{"version":3,"sources":["node_modules/browser-pack/_prelude.js","demo/index.ts","node_modules/@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js","node_modules/@webcomponents/webcomponentsjs/webcomponents-bundle.js","node_modules/@webcomponents/webcomponentsjs/webcomponents-loader.js","node_modules/intl-tel-input/build/js/intlTelInput.js","node_modules/intl-tel-input/index.js","node_modules/js-polyfills/polyfill.js","node_modules/process/browser.js","node_modules/timers-browserify/main.js","src/custom-form.ts","src/elements/Address/AddressElement.ts","src/elements/BankField/BankFieldElement.ts","src/elements/CPRElement/CPRElement.ts","src/elements/CVRElement/CVRElement.ts","src/elements/CheckBoxElement/CheckBoxElement.ts","src/elements/CustomRegularExpression/CustomRegularExpressionElement.ts","src/elements/DateField/DateFieldElement.ts","src/elements/DropDownList/DropDownListElement.ts","src/elements/Elements.ts","src/elements/EmailField/EmailFieldElement.ts","src/elements/FileField/FileFieldElement.ts","src/elements/IdentificationElement/IdentificationElement.ts","src/elements/InternationaPhoneNumber/InternationaPhoneNumberElement.ts","src/elements/NumericField/NumericFieldElement.ts","src/elements/RadioButtonGroup/RadioButtonGroupElement.ts","src/elements/TextAreaElement/TextAreaElement.ts","src/elements/TextField/TextFieldElement.ts","src/framework/CustomEvents.ts","src/framework/CustomInputElement.ts","src/framework/Utilities/ArrayUtil.ts","src/framework/Utilities/DomUtil.ts","src/framework/Utilities/MakeRequest.ts","src/framework/Utilities/StringUtil.ts","src/framework/Utilities/ViewportUtil.ts","src/framework/Validation/Validators/BankAccount.ts","src/framework/Validation/Validators/BankAccountRegistrationNumber.ts","src/framework/Validation/Validators/BankIdNorway.ts","src/framework/Validation/Validators/BankIdSweden.ts","src/framework/Validation/Validators/CPR.ts","src/framework/Validation/Validators/CVR.ts","src/framework/custom-element.decorator.ts","src/index.ts"],"names":[],"mappings":"AAAA;;;ACAA,wCAAsD;AAEtD,QAAQ,CAAC,kBAAkB,GAAG;IAC1B,IAAI,QAAQ,CAAC,UAAU,KAAK,UAAU,EAAE;QACpC,IAAI,IAAI,GAAG,IAAI,kBAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG,UAAA,OAAO;YACnB,OAAO,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAK,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC;KACL;AACL,CAAC,CAAC;;ACTF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACfzyxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC3EA,6DAAwD;AAExD,iEAA4D;AAC5D,0EAAyE;AAEzE;IAOI,oBAAoB,IAAqB;QAArB,SAAI,GAAJ,IAAI,CAAiB;QACrC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;QACnC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,qBAAqB,EAAE,CAAC;IACjC,CAAC;IAED,sBAAI,8BAAM;aAAV;YACI,OAAO,mBAAS,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,6DAA6D,CAAC,CAAC,CAAC;QAC7H,CAAC;;;OAAA;IACD,sBAAI,oCAAY;aAAhB;YACI,IAAI,CAAC,aAAa;gBACd,IAAI,CAAC,aAAa;oBAClB,mBAAS,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;YAChE,OAAO,IAAI,CAAC,aAAa,CAAC;QAC9B,CAAC;;;OAAA;IAED,sBAAI,gCAAQ;aAAZ;YACI,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,YAAY,mCAAgB,EAAjC,CAAiC,CAAC,CAAC;QACxE,CAAC;;;OAAA;IAED,+BAAU,GAAV;QAAA,iBAUC;QATG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,UAAA,KAAK;YACtB,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,IAAI,KAAK,GAAG,KAAI,CAAC,QAAQ,EAAE,CAAC;YAC5B,IAAI,KAAK,EAAE;gBACP,IAAI,KAAI,CAAC,QAAQ,EAAE;oBACf,KAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,MAAM,EAAE,CAAC,CAAC;iBAChC;aACJ;QACL,CAAC,CAAC;IACN,CAAC;IAED,6BAAQ,GAAR;QACI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAqB,KAAM,CAAC,QAAQ,EAAE,EAAtC,CAAsC,CAAC,CAAC;QACrE,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAA,KAAK,IAAI,OAAqB,KAAM,CAAC,KAAK,EAAjC,CAAiC,CAAC,CAAC;IACzE,CAAC;IAED,2BAAM,GAAN;QACI,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAM,OAAO,GAAQ,EAAE,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAA5B,CAA4B,CAAC,CAAC;QACnD,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,OAAO,IAAI,qBAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,CAC1D,QAAQ,CACX,CAAC;IACN,CAAC;IACO,gCAAW,GAAnB;QACI,IAAM,QAAQ,GAAa,IAAI,QAAQ,EAAE,CAAC;QAC1C,KAAoB,UAAW,EAAX,KAAA,IAAI,CAAC,MAAM,EAAX,cAAW,EAAX,IAAW,EAAE;YAA5B,IAAM,KAAK,SAAA;YACZ,IAAI,KAAK,YAAY,mCAAgB,EAAE;gBACnC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBACrD,IAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAChC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;iBAChD;aACJ;iBAAM;gBACH,QAAQ,CAAC,MAAM,CAAC,YAAU,KAAK,CAAC,IAAI,MAAG,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;aACzD;SACJ;QACD,KAAoB,UAAiB,EAAjB,KAAA,IAAI,CAAC,YAAY,EAAjB,cAAiB,EAAjB,IAAiB,EAAE;YAAlC,IAAM,KAAK,SAAA;YACZ,IAAI,KAAK,CAAC,IAAI,EAAE;gBACZ,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;aAC5C;SACJ;QACD,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEO,0CAAqB,GAA7B;QACI,IAAI,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,+CAA+C,CAC/F,CAAC;QACF,eAAe,CAAC,OAAO,CAAC,UAAC,OAAoB;YACzC,IAAI,cAAc,GAAG,OAAO,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;YAC7D,IAAI,cAAc,GAAG,OAAO,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC;YAClE,IAAI,aAAa,GAAuB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,aAAU,cAAc,QAAI,CAAuB,CAAC;YAC5H,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACnC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,UAAA,KAAK;gBAC3B,IAAI,KAAK,CAAC,KAAK,KAAK,cAAc,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;oBACxE,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;iBACrC;qBAAM;oBACH,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;iBACtC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IACL,iBAAC;AAAD,CA3FA,AA2FC,IAAA;AA3FY,gCAAU;;;;;;;;;;;;;;;;;;;;;;;ACLvB,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AAyBtE;IAAoC,kCAAkB;IAKlD;eACI,iBAAO;IACX,CAAC;IAED,sBAAI,iCAAK;aAAT;YACI,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;YACvC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAI,IAAI,CAAC,IAAI,CAAC,KAAO,CAAC,CAAC,CAAC,EAAE,CAAC;YACxD,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,MAAI,IAAI,CAAC,GAAG,CAAC,KAAO,CAAC,CAAC,CAAC,EAAE,CAAC;YACrD,OAAO,KAAG,OAAO,GAAG,IAAI,GAAG,GAAK,CAAC;QACrC,CAAC;aAED,UAAU,KAAa;YACnB,IAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC;;;OAPA;IASD,sBAAI,iCAAK;aAAT;YACI,OAAO,CACH,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK;gBAC3B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK;gBACxB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAC1B,CAAC;QACN,CAAC;;;OAAA;IAED,0CAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,wCAAe,GAAf;QACI,IAAI,CAAC,OAAO,GAAG,iBAAM,aAAa,YAAC,UAAU,CAAC,CAAC;QAC/C,IAAI,CAAC,IAAI,GAAG,iBAAM,aAAa,YAAC,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,GAAG,GAAG,iBAAM,aAAa,YAAC,MAAM,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,SAAS;IACF,+BAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,iCAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IAvDQ,cAAc;QAvB1B,kCAAa,CAAC;YACX,QAAQ,EAAE,iBAAiB;YAC3B,QAAQ,EAAE,qPAKJ;YACN,KAAK,EAAE,sTAWC;YACR,YAAY,EAAE,aAAa;YAC3B,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,cAAc,CAwD1B;IAAD,qBAAC;CAxDD,AAwDC,CAxDmC,uCAAkB,GAwDrD;AAxDY,wCAAc;;;;;;;;;;;;;;;;;;;;;;;AC3B3B,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AACtE,iFAAqF;AACrF,qHAAyH;AA2BzH;IAAsC,oCAAkB;IAMpD;QAAA,YACI,iBAAO,SACV;QALD,0BAAoB,GAAyB,IAAI,qBAAoB,EAAE,CAAC;QACxE,wBAAkB,GAA2C,IAAI,uCAAsC,EAAE,CAAC;;IAI1G,CAAC;IAED,sBAAI,mCAAK;aAAT;YACI,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;YACvC,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,MAAI,IAAI,CAAC,SAAS,CAAC,KAAO,CAAC,CAAC,CAAC,EAAE,CAAC;YACvE,OAAO,KAAG,OAAO,GAAG,SAAW,CAAC;QACpC,CAAC;aAED,UAAU,KAAa;YACnB,IAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC;;;OANA;IAQD,sBAAI,mCAAK;aAAT;YACI,OAAO,CACH,IAAI,CAAC,oBAAoB,CAAC,aAAa,CACnC,IAAI,CAAC,OAAO,CAAC,KAAK,EAClB,CAAC,IAAI,CAAC,QAAQ,CACjB;gBACD,IAAI,CAAC,kBAAkB,CAAC,aAAa,CACjC,IAAI,CAAC,SAAS,CAAC,KAAK,EACpB,CAAC,IAAI,CAAC,QAAQ,CACjB,CACJ,CAAC;QACN,CAAC;;;OAAA;IAED,4CAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,0CAAe,GAAf;QACI,IAAI,CAAC,OAAO,GAAG,iBAAM,aAAa,YAAC,gBAAgB,CAAC,CAAC;QACrD,IAAI,CAAC,SAAS,GAAG,iBAAM,aAAa,YAAC,mBAAmB,CAAC,CAAC;QAC1D,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAClE,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YAC1C,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC/C;IACL,CAAC;IAED,SAAS;IACF,iCAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,mCAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IA7DQ,gBAAgB;QAzB5B,kCAAa,CAAC;YACX,QAAQ,EAAE,cAAc;YACxB,QAAQ,EAAE,kOAIJ;YACN,KAAK,EAAE,iUAeC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,gBAAgB,CA8D5B;IAAD,uBAAC;CA9DD,AA8DC,CA9DqC,uCAAkB,GA8DvD;AA9DY,4CAAgB;;;;;;;;;;;;;;;;;;;;;;;AC/B7B,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AACtE,iEAAqE;AA0BrE;IAAgC,8BAAkB;IAI9C;QAAA,YACI,iBAAO,SACV;QAJD,eAAS,GAAiB,IAAI,aAAY,EAAE,CAAC;;IAI7C,CAAC;IAED,sBAAI,6BAAK;aAAT;YACI,OAAO,KAAG,IAAI,CAAC,IAAI,CAAC,KAAO,CAAC;QAChC,CAAC;aAED,UAAU,KAAa;YACnB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC5B,CAAC;;;OAJA;IAMD,sBAAI,6BAAK;aAAT;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpE,CAAC;;;OAAA;IAED,sCAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,oCAAe,GAAf;QACI,IAAI,CAAC,IAAI,GAAG,iBAAM,aAAa,YAAC,YAAY,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC1C;IACL,CAAC;IAED,SAAS;IACF,2BAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,6BAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IA3CQ,UAAU;QAxBtB,kCAAa,CAAC;YACX,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,wHAGJ;YACN,KAAK,EAAE,iUAeC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,UAAU,CA4CtB;IAAD,iBAAC;CA5CD,AA4CC,CA5C+B,uCAAkB,GA4CjD;AA5CY,gCAAU;;;;;;;;;;;;;;;;;;;;;;;AC7BvB,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AAEtE,iEAAqE;AA0BrE;IAAgC,8BAAkB;IAI9C;QAAA,YACI,iBAAO,SACV;QAJD,eAAS,GAAiB,IAAI,aAAY,EAAE,CAAC;;IAI7C,CAAC;IAED,sBAAI,6BAAK;aAAT;YACI,OAAO,KAAG,IAAI,CAAC,IAAI,CAAC,KAAO,CAAC;QAChC,CAAC;aAED,UAAU,KAAa;YACnB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC5B,CAAC;;;OAJA;IAMD,sBAAI,6BAAK;aAAT;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpE,CAAC;;;OAAA;IAED,sCAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,oCAAe,GAAf;QACI,IAAI,CAAC,IAAI,GAAG,iBAAM,aAAa,YAAC,YAAY,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC1C;IACL,CAAC;IAED,SAAS;IACF,2BAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,6BAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IA3CQ,UAAU;QAxBtB,kCAAa,CAAC;YACX,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,wHAGJ;YACN,KAAK,EAAE,iUAeC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,UAAU,CA4CtB;IAAD,iBAAC;CA5CD,AA4CC,CA5C+B,uCAAkB,GA4CjD;AA5CY,gCAAU;;;;;;;;;;;;;;;;;;;;;;;AC9BvB,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AACtE,mEAAkE;AAmClE;IAAqC,mCAAkB;IAQnD;QAAA,YACI,iBAAO,SACV;QARD,sBAAgB,GAAG,wJAIZ,CAAC;;IAIR,CAAC;IAED,sBAAI,kCAAK;aAAT;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,EAAT,CAAS,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC;QAClE,CAAC;aAED,UAAU,MAAgB;YACtB,+BAA+B;QACnC,CAAC;;;OAJA;IAMD,sBAAI,kCAAK;aAAT;YACI,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;aAChC;iBAAM;gBACH,OAAO,IAAI,CAAC;aACf;QACL,CAAC;;;OAAA;IAED,2CAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,yCAAe,GAAf;QAAA,iBAMC;QALG,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,iBAAM,cAAc,YAAC,WAAS,IAAI,CAAC,IAAI,MAAG,CAAC,CAAC;QAC5D,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;YACnB,OAAA,CAAC,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAApD,CAAoD,CACvD,CAAC;IACN,CAAC;IAEO,uCAAa,GAArB;QAAA,iBAaC;QAZG,IAAM,OAAO,GAAG,iBAAM,eAAe,YAAC,UAAU,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,KAAK;YAChC,OAAO,CAAC,kBAAkB,CACtB,WAAW,EACX,uBAAU,CAAC,YAAY,CACnB,KAAI,CAAC,gBAAgB,EACrB,KAAI,CAAC,IAAI,EACT,OAAO,EACJ,KAAI,CAAC,IAAI,SAAI,KAAO,CAC1B,CACJ,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IACD,SAAS;IACF,gCAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,kCAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IAjEQ,eAAe;QAjC3B,kCAAa,CAAC;YACX,QAAQ,EAAE,kBAAkB;YAC5B,QAAQ,EAAE,gEAGJ;YACN,KAAK,EAAE,srBAwBC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,eAAe,CAkE3B;IAAD,sBAAC;CAlED,AAkEC,CAlEoC,uCAAkB,GAkEtD;AAlEY,0CAAe;;;;;;;;;;;;;;;;;;;;;;;ACtC5B,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AA0BtE;IAAoD,kDAAkB;IAGlE;eACI,iBAAO;IACX,CAAC;IAED,sBAAI,iDAAK;aAAT;YACI,OAAO,KAAG,IAAI,CAAC,IAAI,CAAC,KAAO,CAAC;QAChC,CAAC;aAED,UAAU,KAAa;YACnB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC5B,CAAC;;;OAJA;IAMD,sBAAI,iDAAK;aAAT;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QACpC,CAAC;;;OAAA;IAED,0DAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,wDAAe,GAAf;QACI,IAAI,CAAC,IAAI,GAAG,iBAAM,aAAa,YAAC,cAAc,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC1C;QACD,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;SACvD;IACL,CAAC;IAED,SAAS;IACF,+CAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,iDAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IA7CQ,8BAA8B;QAxB1C,kCAAa,CAAC;YACX,QAAQ,EAAE,eAAe;YACzB,QAAQ,EAAE,gGAGJ;YACN,KAAK,EAAE,iUAeC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,8BAA8B,CA8C1C;IAAD,qCAAC;CA9CD,AA8CC,CA9CmD,uCAAkB,GA8CrE;AA9CY,wEAA8B;;;;;;;;;;;;;;;;;;;;;;;AC5B3C,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AA0BtE;IAAsC,oCAAkB;IAGpD;eACI,iBAAO;IACX,CAAC;IAED,sBAAI,mCAAK;aAAT;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAC3B,CAAC;aAED,UAAU,KAAa;YACnB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC5B,CAAC;;;OAJA;IAMD,sBAAI,mCAAK;aAAT;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QACpC,CAAC;;;OAAA;IAED,4CAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,0CAAe,GAAf;QACI,IAAI,CAAC,IAAI,GAAG,iBAAM,aAAa,YAAC,aAAa,CAAC,CAAC;QAC/C,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC1C;QACD,IAAI,IAAI,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;SAC3C;QACD,IAAI,IAAI,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;SAC3C;IACL,CAAC;IAED,SAAS;IACF,iCAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,mCAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IAhDQ,gBAAgB;QAxB5B,kCAAa,CAAC;YACX,QAAQ,EAAE,cAAc;YACxB,QAAQ,EAAE,+FAGJ;YACN,KAAK,EAAE,iUAeC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,gBAAgB,CAiD5B;IAAD,uBAAC;CAjDD,AAiDC,CAjDqC,uCAAkB,GAiDvD;AAjDY,4CAAgB;;;;;;;;;;;;;;;;;;;;;;;AC5B7B,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AACtE,mEAAkE;AAmClE;IAAyC,uCAAkB;IAOvD;QAAA,YACI,iBAAO,SACV;QAPD,oBAAc,GAAG,uDAGP,CAAC;;IAIX,CAAC;IAED,sBAAI,sCAAK;aAAT;YACI,OAAO,KAAG,IAAI,CAAC,MAAM,CAAC,KAAO,CAAC;QAClC,CAAC;aAED,UAAU,KAAa;YACnB,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;QAC9B,CAAC;;;OAJA;IAMD,sBAAI,sCAAK;aAAT;YACI,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;QACtC,CAAC;;;OAAA;IAED,+CAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,6CAAe,GAAf;QACI,IAAI,CAAC,MAAM,GAAG,iBAAM,aAAa,YAAC,cAAc,CAAC,CAAC;QAClD,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC5C;QACD,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC5C;QACD,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACnE,CAAC;IAEO,wCAAU,GAAlB;QAAA,iBAOC;QANG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,KAAK;YAChC,KAAI,CAAC,MAAM,CAAC,kBAAkB,CAC1B,WAAW,EACX,uBAAU,CAAC,YAAY,CAAC,KAAI,CAAC,cAAc,EAAE,OAAO,EAAE,OAAO,CAAC,CACjE,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IACD,SAAS;IACF,oCAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,sCAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IA1DQ,mBAAmB;QAjC/B,kCAAa,CAAC;YACX,QAAQ,EAAE,mBAAmB;YAC7B,QAAQ,EAAE,mHAIJ;YACN,KAAK,EAAE,0pBAuBC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,mBAAmB,CA2D/B;IAAD,0BAAC;CA3DD,AA2DC,CA3DwC,uCAAkB,GA2D1D;AA3DY,kDAAmB;;;;ACtChC,2DAA0D;AAkBtD,yBAlBK,+BAAc,CAkBL;AAjBlB,iEAAgE;AAkB5D,2BAlBK,mCAAgB,CAkBL;AAjBpB,oEAAmE;AAkB/D,4BAlBK,qCAAiB,CAkBL;AAjBrB,qEAAoE;AAkBhE,0BAlBK,iCAAe,CAkBL;AAjBnB,sFAAqF;AAkBjF,kCAlBK,iDAAuB,CAkBL;AAjB3B,qEAAoE;AAkBhE,0BAlBK,iCAAe,CAkBL;AAjBnB,0EAAyE;AAkBrE,8BAlBK,yCAAmB,CAkBL;AAjBvB,iEAAgE;AAkB5D,2BAlBK,mCAAgB,CAkBL;AAjBpB,0EAAyE;AAkBrE,8BAlBK,yCAAmB,CAkBL;AAjBvB,2GAA0G;AAkBtG,yCAlBK,+DAA8B,CAkBL;AAjBlC,iEAAgE;AAkB5D,2BAlBK,mCAAgB,CAkBL;AAjBpB,2GAAgG;AAkB5F,+BAlBK,qDAAoB,CAkBL;AAjBxB,sDAAqD;AAkBjD,qBAlBK,uBAAU,CAkBL;AAjBd,sDAAqD;AAkBjD,qBAlBK,uBAAU,CAkBL;AAjBd,uFAAsF;AAkBlF,gCAlBK,6CAAqB,CAkBL;AAjBzB,iEAAgE;AAkB5D,2BAlBK,mCAAgB,CAkBL;;;;;;;;;;;;;;;;;;;;;;;ACjCpB,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AA0BtE;IAAuC,qCAAkB;IAOrD;QAAA,YACI,iBAAO,SACV;QARD,eAAS,GAAW,IAAI,MAAM,CAC1B,iFAAiF,CACpF,CAAC;;IAMF,CAAC;IAED,sBAAI,oCAAK;aAAT;YACI,OAAO,KAAG,IAAI,CAAC,KAAK,CAAC,KAAO,CAAC;QACjC,CAAC;aAED,UAAU,KAAa;YACnB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QAC7B,CAAC;;;OAJA;IAMD,sBAAI,oCAAK;aAAT;YACI,IAAM,YAAY,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpE,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,IAAI,YAAY,CAAC;QACrD,CAAC;;;OAAA;IAED,6CAAiB,GAAjB;QACI,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,2CAAe,GAAf;QACI,IAAI,CAAC,KAAK,GAAG,iBAAM,aAAa,YAAC,cAAc,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC3C;IACL,CAAC;IAED,SAAS;IACF,kCAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,oCAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IAhDQ,iBAAiB;QAxB7B,kCAAa,CAAC;YACX,QAAQ,EAAE,eAAe;YACzB,QAAQ,EAAE,gGAGJ;YACN,KAAK,EAAE,iUAeC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,iBAAiB,CAiD7B;IAAD,wBAAC;CAjDD,AAiDC,CAjDsC,uCAAkB,GAiDxD;AAjDY,8CAAiB;;;;;;;;;;;;;;;;;;;;;;;AC5B9B,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AA0BtE;IAAsC,oCAAkB;IAGpD;eACI,iBAAO;IACX,CAAC;IAED,sBAAI,mCAAK;aAAT;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAC3B,CAAC;aAED,UAAU,KAAe;YACrB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC5B,CAAC;;;OAJA;IAMD,sBAAI,mCAAK;aAAT;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QACpC,CAAC;;;OAAA;IAED,4CAAiB,GAAjB;QACI,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,0CAAe,GAAf;QACI,IAAI,CAAC,IAAI,GAAG,iBAAM,aAAa,YAAC,aAAa,CAAC,CAAC;QAC/C,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC1C;QACD,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC1C;IACL,CAAC;IAED,SAAS;IACF,iCAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,mCAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IA9CQ,gBAAgB;QAxB5B,kCAAa,CAAC;YACX,QAAQ,EAAE,cAAc;YACxB,QAAQ,EAAE,kIAGJ;YACN,KAAK,EAAE,iUAeC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,gBAAgB,CA+C5B;IAAD,uBAAC;CA/CD,AA+CC,CA/CqC,uCAAkB,GA+CvD;AA/CY,4CAAgB;;;;;;;;;;;;;;;;;;;;;;;AC5B7B,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AACtE,iEAAqE;AAErE,iEAAqE;AACrE,mFAAuF;AACvF,mFAAuF;AAqCvF;IAA2C,yCAAkB;IAYzD;QAAA,YACI,iBAAO,SACV;QATD,gBAAU,GAAoC;YAC1C,GAAG,EAAE,IAAI,aAAY,EAAE;YACvB,GAAG,EAAE,IAAI,aAAY,EAAE;YACvB,GAAG,EAAE,IAAI,sBAAqB,EAAE;YAChC,GAAG,EAAE,IAAI,sBAAqB,EAAE;SACnC,CAAC;;IAIF,CAAC;IAED,sBAAI,wCAAK;aAAT;YACI,OAAO,KAAG,IAAI,CAAC,IAAI,CAAC,KAAO,CAAC;QAChC,CAAC;aAED,UAAU,KAAa;YACnB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC5B,CAAC;;;OAJA;IAMD,sBAAI,wCAAK;aAAT;YACI,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,aAAa,CAC3C,IAAI,CAAC,KAAK,EACV,CAAC,IAAI,CAAC,QAAQ,CACjB,CAAC;QACN,CAAC;;;OAAA;IAED,iDAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,+CAAe,GAAf;QACI,IAAI,CAAC,IAAI,GAAG,iBAAM,aAAa,YAAC,WAAW,CAAC,CAAC;QAC7C,IAAI,CAAC,YAAY,GAAG,iBAAM,aAAa,YAAC,UAAU,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACrE,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC1C;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;IACxC,CAAC;IAED,SAAS;IACF,sCAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,wCAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IA1DQ,qBAAqB;QAnCjC,kCAAa,CAAC;YACX,QAAQ,EAAE,YAAY;YACtB,QAAQ,EAAE,0aASJ;YACN,KAAK,EAAE,mZAoBC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,qBAAqB,CA2DjC;IAAD,4BAAC;CA3DD,AA2DC,CA3D0C,uCAAkB,GA2D5D;AA3DY,sDAAqB;;;;;;;;;;;;;;;;;;;;;;;AC5ClC,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AACtE,qEAAgE;AAChE,6CAA+C;AA+B/C;IAA0C,wCAAkB;IAIxD;eACI,iBAAO;IACX,CAAC;IAED,sBAAI,uCAAK;aAAT;YACI,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC;QACzC,CAAC;aAED,UAAU,KAAa;YACnB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QAC7B,CAAC;;;OAJA;IAMD,sBAAI,uCAAK;aAAT;YACI,IAAM,YAAY,GACd,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC;YACxE,OAAO,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;QACrD,CAAC;;;OAAA;IAED,gDAAiB,GAAjB;QACI,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,8CAAe,GAAf;QACI,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC3C;IACL,CAAC;IACD,8CAAe,GAAf;QAAA,iBA6BC;QA5BG,IAAI,CAAC,KAAK,GAAG,iBAAM,aAAa,YAAC,cAAc,CAAC,CAAC;QACjD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE;YACzC,WAAW,EAAE,UAAC,OAAO,EAAE,OAAO;gBAC1B,OAAO,IAAI,qBAAW,CAClB,6CAA6C,EAC7C,KAAK,EACL,EAAE,cAAc,EAAE,kBAAkB,EAAE,CACzC;qBACI,IAAI,EAAE;qBACN,IAAI,CAAC,UAAC,OAAY;oBACf,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBAChC,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBAChC,CAAC,CAAC;qBACD,KAAK,CAAC,UAAA,GAAG;oBACN,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;gBACzB,CAAC,CAAC,CAAC;YACX,CAAC;YACD,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,MAAM;YACtB,YAAY,EAAE,IAAI;YAClB,WAAW,EACP,0EAA0E;SAC1E,CAAC,CAAC;QACV,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,CAAC;YAC5B,UAAU,CAAC;gBACP,KAAI,CAAC,SAAS,GAAG,iBAAM,aAAa,aAAC,oBAAoB,CAAC,CAAC;YAC/D,CAAC,EAAE,IAAI,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;IACP,CAAC;IACD,SAAS;IACF,qCAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,uCAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IA1EQ,oBAAoB;QA5BhC,kCAAa,CAAC;YACX,QAAQ,EAAE,mBAAmB;YAC7B,QAAQ,EAAE,wPAIJ;YACN,KAAK,EAAE,qXAkBC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,oBAAoB,CA2EhC;IAAD,2BAAC;CA3ED,AA2EC,CA3EyC,uCAAkB,GA2E3D;AA3EY,oDAAoB;;;;;;;;;;;;;;;;;;;;;;;ACnCjC,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AA0BtE;IAAyC,uCAAkB;IAGvD;eACI,iBAAO;IACX,CAAC;IAED,sBAAI,sCAAK;aAAT;YACI,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE;gBAClC,OAAO,EAAE,CAAC;aACb;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;QACrC,CAAC;aAED,UAAU,KAAU;YAChB,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,KAAK,CAAC;QACtC,CAAC;;;OAJA;IAMD,sBAAI,sCAAK;aAAT;YACI,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;QACtC,CAAC;;;OAAA;IAED,+CAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,6CAAe,GAAf;QACI,IAAI,CAAC,MAAM,GAAG,iBAAM,aAAa,YAAC,gBAAgB,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/D,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC5C;QACD,IAAI,IAAI,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;SAC7C;QACD,IAAI,IAAI,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;SAC7C;QACD,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;SAC/C;IACL,CAAC;IAED,SAAS;IACF,oCAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,sCAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IAtDQ,mBAAmB;QAxB/B,kCAAa,CAAC;YACX,QAAQ,EAAE,iBAAiB;YAC3B,QAAQ,EAAE,oGAGJ;YACN,KAAK,EAAE,iUAeC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,mBAAmB,CAuD/B;IAAD,0BAAC;CAvDD,AAuDC,CAvDwC,uCAAkB,GAuD1D;AAvDY,kDAAmB;;;;;;;;;;;;;;;;;;;;;;;AC5BhC,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AACtE,mEAAkE;AAkClE;IAA6C,2CAAkB;IAQ3D;QAAA,YACI,iBAAO,SACV;QARD,yBAAmB,GAAG,6JAIf,CAAC;;IAIR,CAAC;IAED,sBAAI,0CAAK;aAAT;YACI,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,EAAT,CAAS,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,CAAC;aAED,UAAU,KAAa;YACnB,IAAI,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,KAAK,KAAK,EAAjB,CAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;YACtE,IAAI,YAAY,EAAE;gBACd,YAAY,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;aAC5C;QACL,CAAC;;;OAPA;IASD,sBAAI,0CAAK;aAAT;YACI,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,EAAT,CAAS,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;aAC7D;iBAAM;gBACH,OAAO,IAAI,CAAC;aACf;QACL,CAAC;;;OAAA;IAED,mDAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,iDAAe,GAAf;QAAA,iBAMC;QALG,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,iBAAM,cAAc,YAAC,WAAS,IAAI,CAAC,IAAI,MAAG,CAAC,CAAC;QAC/D,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,KAAK;YAC1B,OAAA,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAAxD,CAAwD,CAC3D,CAAC;IACN,CAAC;IAEO,iDAAe,GAAvB;QAAA,iBAcC;QAbG,IAAM,OAAO,GAAG,iBAAM,eAAe,YAAC,UAAU,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,KAAK;YAChC,OAAO,CAAC,kBAAkB,CACtB,WAAW,EACX,uBAAU,CAAC,YAAY,CACnB,KAAI,CAAC,mBAAmB,EACxB,KAAI,CAAC,IAAI,EACT,OAAO,EACJ,KAAI,CAAC,IAAI,SAAI,KAAO,EACvB,MAAG,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAE,CACvC,CACJ,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IACD,SAAS;IACF,wCAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,0CAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IArEQ,uBAAuB;QAhCnC,kCAAa,CAAC;YACX,QAAQ,EAAE,qBAAqB;YAC/B,QAAQ,EAAE,gEAGJ;YACN,KAAK,EAAE,ypBAuBC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,uBAAuB,CAsEnC;IAAD,8BAAC;CAtED,AAsEC,CAtE4C,uCAAkB,GAsE9D;AAtEY,0DAAuB;;;;;;;;;;;;;;;;;;;;;;;ACrCpC,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AA0BtE;IAAqC,mCAAkB;IAGnD;eACI,iBAAO;IACX,CAAC;IAED,sBAAI,kCAAK;aAAT;YACI,OAAO,KAAG,IAAI,CAAC,IAAI,CAAC,KAAO,CAAC;QAChC,CAAC;aAED,UAAU,KAAa;YACnB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC5B,CAAC;;;OAJA;IAMD,sBAAI,kCAAK;aAAT;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QACpC,CAAC;;;OAAA;IAED,2CAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,yCAAe,GAAf;QACI,IAAI,CAAC,IAAI,GAAG,iBAAM,aAAa,YAAC,kBAAkB,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC1C;IACL,CAAC;IAED,SAAS;IACF,gCAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,kCAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IA1CQ,eAAe;QAxB3B,kCAAa,CAAC;YACX,QAAQ,EAAE,mBAAmB;YAC7B,QAAQ,EAAE,0GAGJ;YACN,KAAK,EAAE,oUAeC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,eAAe,CA2C3B;IAAD,sBAAC;CA3CD,AA2CC,CA3CoC,uCAAkB,GA2CtD;AA3CY,0CAAe;;;;;;;;;;;;;;;;;;;;;;;AC5B5B,qFAAqE;AACrE,yEAAwE;AACxE,6DAAsE;AA0BtE;IAAsC,oCAAkB;IAGpD;eACI,iBAAO;IACX,CAAC;IAED,sBAAI,mCAAK;aAAT;YACI,OAAO,KAAG,IAAI,CAAC,IAAI,CAAC,KAAO,CAAC;QAChC,CAAC;aAED,UAAU,KAAa;YACnB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC5B,CAAC;;;OAJA;IAMD,sBAAI,mCAAK;aAAT;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QACpC,CAAC;;;OAAA;IAED,4CAAiB,GAAjB;QACI,iBAAM,iBAAiB,WAAE,CAAC;IAC9B,CAAC;IAED,0CAAe,GAAf;QACI,IAAI,CAAC,IAAI,GAAG,iBAAM,aAAa,YAAC,aAAa,CAAC,CAAC;QAC/C,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC1C;IACL,CAAC;IAED,SAAS;IACF,iCAAM,GAAb,UAAc,MAAM;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,mCAAQ,GAAf;QACI,IAAI,CAAC,KAAK,CAAC;QACX,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CACrD,CAAC;IACN,CAAC;IA1CQ,gBAAgB;QAxB5B,kCAAa,CAAC;YACX,QAAQ,EAAE,cAAc;YACxB,QAAQ,EAAE,+FAGJ;YACN,KAAK,EAAE,iUAeC;YACR,SAAS,EAAE,IAAI;SAClB,CAAC;OACW,gBAAgB,CA2C5B;IAAD,uBAAC;CA3CD,AA2CC,CA3CqC,uCAAkB,GA2CvD;AA3CY,4CAAgB;;;;ACpB7B;IACI,gCAAmB,KAAU,EAAS,SAAiB;QAApC,UAAK,GAAL,KAAK,CAAK;QAAS,cAAS,GAAT,SAAS,CAAQ;IAAG,CAAC;IAC/D,6BAAC;AAAD,CAFA,AAEC,IAAA;AAFY,wDAAsB;AAGnC,oGAAoG;AACpG;IAAA;QAAA,iBAkCC;QAjCW,cAAS,GAAkB,EAAE,CAAC;QAC9B,mBAAc,GAAkB,EAAE,CAAC;QAE3C,OAAE,GAAG,UAAC,QAAqB;YACvB,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9B,OAAO;gBACH,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAlB,CAAkB;aACpC,CAAC;QACN,CAAC,CAAC;QAEF,SAAI,GAAG,UAAC,QAAqB;YACzB,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,CAAC,CAAC;QAEF,QAAG,GAAG,UAAC,QAAqB;YACxB,IAAI,aAAa,GAAG,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACrD,IAAI,aAAa,GAAG,CAAC,CAAC;gBAAE,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC;QAEF,SAAI,GAAG,UAAC,KAAQ;YACZ,mCAAmC;YACnC,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,EAAf,CAAe,CAAC,CAAC;YAEpD,6BAA6B;YAC7B,IAAI,KAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;gBAChC,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,EAAf,CAAe,CAAC,CAAC;gBACzD,KAAI,CAAC,cAAc,GAAG,EAAE,CAAC;aAC5B;QACL,CAAC,CAAC;QAEF,SAAI,GAAG,UAAC,EAAyB;YAC7B,OAAO,KAAI,CAAC,EAAE,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAV,CAAU,CAAC,CAAC;QACpC,CAAC,CAAC;IACN,CAAC;IAAD,yBAAC;AAAD,CAlCA,AAkCC,IAAA;AAlCY,gDAAkB;;;;;;;;;;;;;;;;;ACZ/B,+CAA4E;AAC5E,+CAA0C;AAC1C,mDAA8C;AAE9C;IAAA;IAEA,CAAC;IAAD,kBAAC;AAAD,CAFA,AAEC,IAAA;AACD;IAAiD,sCAAW;IAyBxD;QAAA,YACI,iBAAO,SACV;QA1BO,qBAAe,GAAG,IAAI,WAAW,EAAW,CAAC;QAC7C,qBAAe,GAAG,IAAI,CAAC;QAErB,aAAO,GAAG,KAAK,CAAC;QAOnB,cAAQ,GAAG,IAAI,iCAAkB,EAA0B,CAAC;QAC5D,gBAAU,GAAG,IAAI,iCAAkB,EAA0B,CAAC;QAC9D,yBAAmB,GAAG,IAAI,iCAAkB,EAA0B,CAAC;QAMvE,8BAAwB,GAAY,KAAK,CAAC;QAC1C,WAAK,GAAY,KAAK,CAAC;;IAO9B,CAAC;IAUD,8CAAiB,GAAjB;QACI,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAED,iCAAI,GAAJ;QAAA,iBAWC;QAVG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,IAAI,iBAAO,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE;YAC5B,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,sCAAS,GAAjB;QACI,IAAI;YACA,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAClD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;YAC5B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;YAClD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;YAChD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACtB,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,wBAAwB,CAAC;YAC9D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACxB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACpB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC;SACjC;QAAC,OAAO,EAAE,EAAE;YACT,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;SACrB;IACL,CAAC;IAEO,uCAAU,GAAlB;QAAA,iBAoBC;QAnBG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,UAAA,CAAC;YAChB,IAAI,KAAI,CAAC,KAAK,EAAE;gBACZ,IAAG,KAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,EAAC;oBACzC,KAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBACtE,KAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;iBACpE;aACJ;iBAAM;gBACH,IAAG,KAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,EAAC;oBACzC,KAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;oBACnE,KAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;iBACvE;gBACD,KAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;aACxB;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,UAAA,CAAC;YACd,IAAI,KAAI,CAAC,OAAO,EAAE;gBACd,KAAI,CAAC,QAAQ,EAAE,CAAC;aACnB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,0CAAa,GAArB;QACI,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAEO,6CAAgB,GAAxB;QACI,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,EAAE;YACjE,KAAwB,UAA6B,EAA7B,KAAA,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAA7B,cAA6B,EAA7B,IAA6B,EAAE;gBAAlD,IAAM,SAAS,SAAA;gBAChB,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aACzC;SACJ;QAED,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,EAAE;YAC/D,KAAwB,UAA4B,EAA5B,KAAA,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAA5B,cAA4B,EAA5B,IAA4B,EAAE;gBAAjD,IAAM,SAAS,SAAA;gBAChB,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;aACxC;SACJ;QAED,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YAC/C,KAAK,IAAM,KAAK,IAAI,IAAI,CAAC,YAAY,EAAE;gBACnC,IAAI,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;oBACzC,IAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBAC5C,KAAwB,UAAgB,EAAhB,KAAA,UAAU,CAAC,KAAK,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;wBAArC,IAAM,SAAS,SAAA;wBAChB,IAAI,CAAC,cAAc,CACf,SAAS,EACT,QAAQ,EACR,UAAU,CAAC,KAAK,EAChB,UAAU,CAAC,QAAQ,CACtB,CAAC;qBACL;iBACJ;aACJ;SACJ;IACL,CAAC;IAEO,2CAAc,GAAtB,UAAuB,WAAmB,EAAE,IAAY,EAAE,KAAc,EAAE,QAAiB;QAA3F,iBAsCC;QArCG,IAAI,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAU,WAAW,QAAI,CAAuB,CAAC;QAEtF,IAAI,OAAO,YAAY,kBAAkB,EAAE;YACvC,IAAI,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACnD,OAAO;aACV;YACD,IAAI,kBAAkB,GAAG,IAAI,KAAK,IAAI,CAAC;YACvC,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;YAC3D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,UAAA,CAAC;gBACd,IAAI,kBAAkB,GAAG,KAAK,CAAC;gBAC/B,IAAI,IAAI,KAAK,KAAK,EAAE;oBAChB,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;iBAClC;gBACD,IAAI,IAAI,KAAK,IAAI,EAAE;oBACf,kBAAkB,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;iBACjC;gBACD,IAAI,IAAI,KAAK,QAAQ,EAAE;oBACnB,IAAI,QAAQ,KAAK,OAAO,EAAE;wBACtB,kBAAkB,GAAG,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC;qBACzC;yBAAM,IAAI,QAAQ,KAAK,UAAU,EAAE;wBAChC,kBAAkB,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;qBACxC;yBAAM,IAAI,QAAQ,KAAK,UAAU,EAAE;wBAChC,kBAAkB,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;qBACxC;iBACJ;gBACD,OAAO,CAAC,uBAAuB,CAAC,KAAI,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,UAAA,CAAC;gBACzB,IAAI,KAAI,CAAC,eAAe,EAAE;oBACtB,KAAI,CAAC,QAAQ,CAAC,IAAI,CACd,IAAI,qCAAsB,CAAC,KAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CACnD,CAAC;iBACL;qBAAM;oBACH,OAAO,CAAC,uBAAuB,CAAC,KAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;iBACrD;YACL,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAEO,0CAAa,GAArB;QACI,IAAI,IAAI,CAAC,wBAAwB,EAAE;YAC/B,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;SACpF;aAAM;YACH,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;SACnF;QAED,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,IAAI,CAAC,IAAI,EAAE,CAAC;SACf;aAAM;YACH,IAAI,CAAC,IAAI,EAAE,CAAC;SACf;QACD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,qCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC,CAAC;IAC/F,CAAC;IAEO,iCAAI,GAAZ;QACI,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAChC,IAAG,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,EAAC;YACzC,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;SACxE;IACL,CAAC;IAEO,iCAAI,GAAZ;QACI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC/B,IAAG,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,EAAC;YACzC,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;SACvE;IACL,CAAC;IAES,0CAAa,GAAvB,UAAwB,QAAgB;QACpC,IAAI,OAAO,GAAQ,IAAI,CAAC;QACxB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;SAC7B;QACD,OAAO,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAqB,CAAC;IAC/D,CAAC;IAES,2CAAc,GAAxB,UAAyB,QAAgB;QACrC,IAAI,OAAO,GAAQ,IAAI,CAAC;QACxB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;SAC7B;QACD,OAAO,mBAAS,CAAC,YAAY,CACzB,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CACf,CAAC;IAC5B,CAAC;IAES,4CAAe,GAAzB,UAA0B,QAAgB;QACtC,IAAI,OAAO,GAAQ,IAAI,CAAC;QACxB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;SAC7B;QACD,OAAO,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAgB,CAAC;IAC1D,CAAC;IAEM,gDAAmB,GAA1B,UAA2B,IAAY,EAAE,YAA6B;QAA7B,6BAAA,EAAA,oBAA6B;QAClE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;QAC1C,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEM,oDAAuB,GAA9B,UAA+B,IAAY,EAAE,KAAc;QACvD,IAAI,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC3C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;SACtC;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IACL,yBAAC;AAAD,CA/OA,AA+OC,CA/OgD,WAAW,GA+O3D;AA/OqB,gDAAkB;;;;ACPxC;IAAA;IAKA,CAAC;IAJc,sBAAY,GAA1B,UAA2C,IAAmB;QAC7D,OAAO,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,IAAW,CAAC,CAAC;IACtD,CAAC;IAEF,gBAAC;AAAD,CALA,AAKC,IAAA;;;;;ACLA,+CAA8C;AAE/C;IAGI,iBAAY,OAAgB;QACxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,IAAI,2BAAY,CAAC,IAAI,CAAC,OAAsB,CAAC,CAAC;IACtE,CAAC;IAEM,6BAAW,GAAlB,UAAmB,IAAY,EAAE,YAAqB;QAClD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,OAAO,IAAI,CAAC;SACf;QACD,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAQ,IAAM,CAAC,CAAC;QAExD,OAAO,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC;IACtD,CAAC;IAEM,6BAAW,GAAlB,UAAmB,IAAY,EAAE,KAAa;QAC1C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,OAAO,IAAI,CAAC;SACf;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAQ,IAAM,EAAE,KAAK,CAAC,CAAC;IAC5D,CAAC;IAEM,yBAAO,GAAd,UAAe,IAAY,EAAE,YAAqB;QAC9C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,OAAO,IAAI,CAAC;SACf;QACD,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC9C,OAAO,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC;IACtD,CAAC;IAEM,yBAAO,GAAd,UAAe,IAAY,EAAE,KAAa;QACtC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,OAAO,IAAI,CAAC;SACf;QACD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC3C,CAAC;IAEM,4BAAU,GAAjB,UAAkB,IAAY;QAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,OAAO,IAAI,CAAC;SACf;QACD,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAEM,gCAAc,GAArB,UAAsB,IAAY;QAC9B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,OAAO,IAAI,CAAC;SACf;QACD,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,UAAQ,IAAM,CAAC,CAAC;IACjD,CAAC;IAEM,yBAAO,GAAd,UAAe,IAAY;QACvB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,OAAO,IAAI,CAAC;SACf;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAEM,uBAAK,GAAZ;QAAA,iBAMC;QALG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC1B,UAAU,CAAC;YACP,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACzB,KAAI,CAAC,OAA4B,CAAC,QAAQ,GAAG,KAAK,CAAC;QACxD,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAEM,uBAAK,GAAZ;QAAA,iBAMC;QALG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC1B,UAAU,CAAC;YACP,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACzB,KAAI,CAAC,OAA4B,CAAC,QAAQ,GAAG,KAAK,CAAC;QACxD,CAAC,EAAE,IAAI,CAAC,CAAC;IACb,CAAC;IAEM,uBAAK,GAAZ;QACI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE;YAChC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;SACjC;IACL,CAAC;IAEM,6BAAW,GAAlB,UAAmB,SAAS;QACxB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAC7C,CAAC;IAEM,6BAAW,GAAlB,UAAmB,SAAS;QACxB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IAEM,+BAAa,GAApB;QACI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,OAAO,IAAI,CAAC;SACf;QACD,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;IAC1B,CAAC;IAEM,2CAAyB,GAAhC,UAAiC,IAAY,EAAE,KAAa;QACxD,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,EAAf,CAAe,CAAC,CAAC;QAC9D,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CACzC,aAAU,WAAW,QAAI,CACR,CAAC;QACtB,IAAI,UAAU,EAAE;YACZ,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;SAC5B;IACL,CAAC;IAEM,0BAAQ,GAAf,UAAgB,SAAiB;QAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACtD,CAAC;IAEM,0BAAQ,GAAf,UAAgB,QAAgB;QAC5B,OAAO,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IACL,cAAC;AAAD,CAlHA,AAkHC,IAAA;;;;;ACpHD;IAKI,qBAAY,GAAW,EAAE,MAAsB,EAAE,OAAiB;QAAzC,uBAAA,EAAA,cAAsB;QAAE,wBAAA,EAAA,YAAiB;QAC9D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAEO,gCAAU,GAAlB,UAAmB,WAA2B;QAC1C,KAAK,IAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;SAC9D;IACL,CAAC;IAED,0BAAI,GAAJ,UAAK,IAAgB;QAArB,iBA4BC;QA5BI,qBAAA,EAAA,WAAgB;QACjB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,IAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;YAC5C,cAAc,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,EAAE,KAAI,CAAC,GAAG,CAAC,CAAC;YAC3C,KAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;YAChC,cAAc,CAAC,MAAM,GAAG;gBACpB,IACI,cAAc,CAAC,MAAM,IAAI,GAAG;oBAC5B,cAAc,CAAC,MAAM,GAAG,GAAG,EAC7B;oBACE,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;iBACpC;qBAAM;oBACH,MAAM,CAAC;wBACH,MAAM,EAAE,cAAc,CAAC,MAAM;wBAC7B,UAAU,EAAE,cAAc,CAAC,UAAU;wBACrC,IAAI,EAAE,cAAc,CAAC,QAAQ;qBAChC,CAAC,CAAC;iBACN;YACL,CAAC,CAAC;YACF,cAAc,CAAC,OAAO,GAAG;gBACrB,MAAM,CAAC;oBACH,MAAM,EAAE,cAAc,CAAC,MAAM;oBAC7B,UAAU,EAAE,cAAc,CAAC,UAAU;oBACrC,IAAI,EAAE,cAAc,CAAC,QAAQ;iBAChC,CAAC,CAAC;YACP,CAAC,CAAC;YACF,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACP,CAAC;IACL,kBAAC;AAAD,CA9CA,AA8CC,IAAA;;;;;AC9CD;IAEI;IAEA,CAAC;IAEa,uBAAY,GAA1B,UAA2B,GAAW;QAAE,cAAiB;aAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;YAAjB,6BAAiB;;QACrD,OAAO,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,UAAC,KAAK,EAAE,KAAK,IAAK,OAAA,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAjB,CAAiB,CAAC,CAAA;IACvE,CAAC;IACL,iBAAC;AAAD,CATA,AASC,IAAA;AATY,gCAAU;;;;ACAvB;IAEI,sBAAY,OAA2B;QAA3B,wBAAA,EAAA,cAA2B;QACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAEM,gCAAS,GAAhB;QACI,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;QACpD,OAAO,CACH,CAAC,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,IAAI,MAAM,CAAC,GAAG,GAAG,WAAW,CAAC;YACzC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,WAAW,CAAC,CAAC;YACvD,CAAC,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC;gBAC1C,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,IAAI,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,CACvD,CAAC;IACN,CAAC;IAEM,yCAAkB,GAAzB;QACI,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;QACpD,OAAO,CACH,MAAM,CAAC,GAAG,IAAI,CAAC;YACf,MAAM,CAAC,IAAI,IAAI,CAAC;YAChB,MAAM,CAAC,MAAM,IAAI,WAAW;YAC5B,MAAM,CAAC,KAAK,IAAI,UAAU,CAC7B,CAAC;IACN,CAAC;IAEM,sCAAe,GAAtB,UAAuB,MAAoB;QAApB,uBAAA,EAAA,YAAoB;QACvC,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;QACpD,4CAA4C;QAC5C,OAAO,CACH,MAAM,CAAC,GAAG,GAAG,MAAM,IAAI,CAAC;YACxB,MAAM,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC;YACzB,MAAM,CAAC,MAAM,GAAG,MAAM,IAAI,WAAW;YACrC,MAAM,CAAC,KAAK,GAAG,MAAM,IAAI,UAAU,CACtC,CAAC;IACN,CAAC;IAEM,gCAAS,GAAhB,UAAiB,MAAkB;QAAlB,uBAAA,EAAA,UAAkB;QAC/B,IAAM,OAAO,GACT,MAAM,CAAC,WAAW;YAClB,QAAQ,CAAC,eAAe,CAAC,SAAS;YAClC,QAAQ,CAAC,IAAI,CAAC,SAAS;YACvB,CAAC,CAAC;QACN,OAAO,MAAM,IAAI,OAAO,CAAC;IAC7B,CAAC;IACL,mBAAC;AAAD,CA7CA,AA6CC,IAAA;AA7CY,oCAAY;;;;ACEzB;IAAA;IAIA,CAAC;IAHG,4CAAa,GAAb,UAAc,KAAa,EAAE,UAA0B;QAA1B,2BAAA,EAAA,iBAA0B;QACnD,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,2BAAC;AAAD,CAJA,AAIC,IAAA;;;;;ACJD;IAAA;IAKA,CAAC;IAHG,8DAAa,GAAb,UAAc,KAAa,EAAE,UAA0B;QAA1B,2BAAA,EAAA,iBAA0B;QACnD,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,6CAAC;AAAD,CALA,AAKC,IAAA;;;;;ACLD;IAAA;IAkBA,CAAC;IAjBG,6CAAa,GAAb,UAAc,KAAa,EAAE,UAA0B;QAA1B,2BAAA,EAAA,iBAA0B;QACnD,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IACvD,CAAC;IAEO,mDAAmB,GAA3B,UACI,KAAa,EACb,UAA0B;QAA1B,2BAAA,EAAA,iBAA0B;QAE1B,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,UAAU,CAAC;SACrB;QACD,IAAM,YAAY,GAAW,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACrE,IAAM,KAAK,GAAW,IAAI,MAAM,CAC5B,8DAA8D,CACjE,CAAC;QACF,OAAO,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACpC,CAAC;IACL,4BAAC;AAAD,CAlBA,AAkBC,IAAA;;;;;AClBD;IAAA;IAkBA,CAAC;IAjBG,6CAAa,GAAb,UAAc,KAAa,EAAE,UAA0B;QAA1B,2BAAA,EAAA,iBAA0B;QACnD,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IACvD,CAAC;IAEO,mDAAmB,GAA3B,UACI,KAAa,EACb,UAA0B;QAA1B,2BAAA,EAAA,iBAA0B;QAE1B,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,UAAU,CAAC;SACrB;QACD,IAAM,YAAY,GAAW,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACrE,IAAM,KAAK,GAAW,IAAI,MAAM,CAC5B,wEAAwE,CAC3E,CAAC;QACF,OAAO,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACpC,CAAC;IACL,4BAAC;AAAD,CAlBA,AAkBC,IAAA;;;;;AClBD;IAAA;IA+EA,CAAC;IA9EG,oCAAa,GAAb,UAAc,KAAa,EAAE,UAA0B;QAA1B,2BAAA,EAAA,iBAA0B;QACnD,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IAC5C,CAAC;IACO,wCAAiB,GAAzB,UAA0B,KAAa,EAAE,KAAa;QAClD,IAAM,OAAO,GAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACzD,OAAO,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;IAClC,CAAC;IAEO,0CAAmB,GAA3B,UAA4B,KAAa;QACrC,IAAM,cAAc,GAAW;YAC3B,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;SACP,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,CAAC,uBAAuB;QAEtD,IAAM,OAAO,GAAS,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAE7C,OAAO,cAAc,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,EAAE,KAAK,OAAO,CAAC,OAAO,EAAE,EAAjC,CAAiC,CAAC,CAAC;IACvE,CAAC;IAEO,mCAAY,GAApB,UAAqB,KAAa;QAC9B,IAAI,IAAI,GAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC;QAC9C,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB;QACrE,IAAM,KAAK,GAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAM,GAAG,GAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACxC,IAAM,IAAI,GAAS,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QAC9C,OAAO,CACH,IAAI,CAAC,WAAW,EAAE,KAAK,IAAI;YAC3B,IAAI,CAAC,QAAQ,EAAE,KAAK,KAAK;YACzB,IAAI,CAAC,OAAO,EAAE,KAAK,GAAG,CACzB,CAAC;IACN,CAAC;IAEO,iCAAU,GAAlB,UAAmB,KAAa;QAC5B,IAAI,IAAI,GAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC;QAC9C,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB;QACrE,IAAM,KAAK,GAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAM,GAAG,GAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACxC,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACtC,CAAC;IAEO,+BAAQ,GAAhB,UAAiB,KAAa,EAAE,UAA0B;QAA1B,2BAAA,EAAA,iBAA0B;QACtD,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,UAAU,CAAC;SACrB;QACD,IAAM,KAAK,GAAW,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;YAC1B,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;YAC3B,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE;YACjC,OAAO,IAAI,CAAC;SACf;QAED,IAAI,MAAM,GAAW,CAAC,CAAC;QACvB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YACjC,MAAM,IAAI,IAAI,CAAC,iBAAiB,CAC5B,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAChC,CAAC,CACJ,CAAC;SACL;QAED,OAAO,MAAM,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,kDAAkD;IAChF,CAAC;IACL,mBAAC;AAAD,CA/EA,AA+EC,IAAA;;;;;AC/ED;IAAA;IAwBA,CAAC;IAvBG,oCAAa,GAAb,UAAc,KAAa,EAAE,UAA0B;QAA1B,2BAAA,EAAA,iBAA0B;QACnD,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IAC5C,CAAC;IAEO,+BAAQ,GAAhB,UAAiB,KAAa,EAAE,UAA0B;QAA1B,2BAAA,EAAA,iBAA0B;QACtD,IAAI,CAAC,UAAU,IAAI,CAAC,KAAK;YAAE,OAAO,KAAK,CAAC;QACxC,IAAM,KAAK,GAAW,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,UAAU,CAAC;SACrB;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACxB,OAAO,KAAK,CAAC;SAChB;QAED,gDAAgD;QAChD,IAAI,KAAK,GAAW,CAAC,CAAC;QAEtB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK;YACxC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,GAAG,EAAE,KAAK,CAAC,CAAC;IAC5B,CAAC;IACL,mBAAC;AAAD,CAxBA,AAwBC,IAAA;;;;;AC1BD;IAAA;IAMA,CAAC;IAAD,oBAAC;AAAD,CANA,AAMC,IAAA;AAED,IAAM,gBAAgB,GAAG,UAAC,QAAgB;IACtC,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QAC5B,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;KAC3E;AACL,CAAC,CAAC;AAEF,IAAM,aAAa,GAAG,UAAC,MAAqB;IACxC,OAAO,UAAC,GAAQ;QACZ,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAClC,IAAI,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACzD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;SAClE;QACD,eAAe,CAAC,SAAS,GAAG,YAAU,MAAM,CAAC,KAAK,iBAC9C,MAAM,CAAC,QACT,CAAC;QACH,IAAI,iBAAiB,GACjB,GAAG,CAAC,SAAS,CAAC,iBAAiB,IAAI,cAAY,CAAC,CAAC;QACrD,GAAG,CAAC,SAAS,CAAC,iBAAiB,GAAG;YAC9B,IAAI,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC/D,IAAI,MAAM,CAAC,SAAS,EAAE;gBAClB,IAAI,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aAC1D;iBAAM;gBACH,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aAC3B;YACD,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IACvD,CAAC,CAAC;AACN,CAAC,CAAC;AAEF,kBAAe,aAAa,CAAC;;;;ACvC7B,wBAAsB;AACtB,+DAA6D;AAC7D,yEAAuE;AACvE,kEAAgE;AAEhE,OAAO;AACP,6CAA2C;AAMlC,qBANA,wBAAU,CAMA;AALnB,qEAAoE;AAKrC,6BALtB,uCAAkB,CAKsB;AAHjD,WAAW;AACX,8CAAgD;AAE3B,4BAAQ","file":"index.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { CustomForm, elements } from './../src/index';\r\n\r\ndocument.onreadystatechange = () => {\r\n    if (document.readyState === 'complete') {\r\n        let form = new CustomForm(document.forms[0]);\r\n        form.onsubmit = promise => {\r\n            promise.then(response => {});\r\n        };\r\n    }\r\n};\r\n","/**\n@license @nocompile\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n(function () {\n  'use strict';\n\n  (function(){if(void 0===window.Reflect||void 0===window.customElements||window.customElements.polyfillWrapFlushCallback)return;const a=HTMLElement;window.HTMLElement=function HTMLElement(){return Reflect.construct(a,[],this.constructor)},HTMLElement.prototype=a.prototype,HTMLElement.prototype.constructor=HTMLElement,Object.setPrototypeOf(HTMLElement,a);})();\n\n}());\n","/**\n@license @nocompile\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n(function(){/*\n\n Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';var r,t=\"undefined\"!=typeof window&&window===this?this:\"undefined\"!=typeof global&&null!=global?global:this,ca=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};function da(){da=function(){};t.Symbol||(t.Symbol=ea)}var ea=function(){var a=0;return function(b){return\"jscomp_symbol_\"+(b||\"\")+a++}}();\nfunction fa(){da();var a=t.Symbol.iterator;a||(a=t.Symbol.iterator=t.Symbol(\"iterator\"));\"function\"!=typeof Array.prototype[a]&&ca(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return ha(this)}});fa=function(){}}function ha(a){var b=0;return ia(function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}})}function ia(a){fa();a={next:a};a[t.Symbol.iterator]=function(){return this};return a}function ja(a){fa();var b=a[Symbol.iterator];return b?b.call(a):ha(a)}\nfunction ka(a){for(var b,c=[];!(b=a.next()).done;)c.push(b.value);return c}var la;if(\"function\"==typeof Object.setPrototypeOf)la=Object.setPrototypeOf;else{var ma;a:{var na={Ga:!0},oa={};try{oa.__proto__=na;ma=oa.Ga;break a}catch(a){}ma=!1}la=ma?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+\" is not extensible\");return a}:null}var pa=la;function qa(){this.f=!1;this.b=null;this.aa=void 0;this.a=1;this.F=0;this.c=null}\nfunction ra(a){if(a.f)throw new TypeError(\"Generator is already running\");a.f=!0}qa.prototype.u=function(a){this.aa=a};function sa(a,b){a.c={Ja:b,Na:!0};a.a=a.F}qa.prototype.return=function(a){this.c={return:a};this.a=this.F};function ta(a,b){a.a=3;return{value:b}}function ua(a){this.a=new qa;this.b=a}function va(a,b){ra(a.a);var c=a.a.b;if(c)return wa(a,\"return\"in c?c[\"return\"]:function(a){return{value:a,done:!0}},b,a.a.return);a.a.return(b);return xa(a)}\nfunction wa(a,b,c,d){try{var e=b.call(a.a.b,c);if(!(e instanceof Object))throw new TypeError(\"Iterator result \"+e+\" is not an object\");if(!e.done)return a.a.f=!1,e;var f=e.value}catch(g){return a.a.b=null,sa(a.a,g),xa(a)}a.a.b=null;d.call(a.a,f);return xa(a)}function xa(a){for(;a.a.a;)try{var b=a.b(a.a);if(b)return a.a.f=!1,{value:b.value,done:!1}}catch(c){a.a.aa=void 0,sa(a.a,c)}a.a.f=!1;if(a.a.c){b=a.a.c;a.a.c=null;if(b.Na)throw b.Ja;return{value:b.return,done:!0}}return{value:void 0,done:!0}}\nfunction ya(a){this.next=function(b){ra(a.a);a.a.b?b=wa(a,a.a.b.next,b,a.a.u):(a.a.u(b),b=xa(a));return b};this.throw=function(b){ra(a.a);a.a.b?b=wa(a,a.a.b[\"throw\"],b,a.a.u):(sa(a.a,b),b=xa(a));return b};this.return=function(b){return va(a,b)};fa();this[Symbol.iterator]=function(){return this}}function Ba(a,b){b=new ya(new ua(b));pa&&pa(b,a.prototype);return b}\n(function(){if(!function(){var a=document.createEvent(\"Event\");a.initEvent(\"foo\",!0,!0);a.preventDefault();return a.defaultPrevented}()){var a=Event.prototype.preventDefault;Event.prototype.preventDefault=function(){this.cancelable&&(a.call(this),Object.defineProperty(this,\"defaultPrevented\",{get:function(){return!0},configurable:!0}))}}var b=/Trident/.test(navigator.userAgent);if(!window.Event||b&&\"function\"!==typeof window.Event){var c=window.Event;window.Event=function(a,b){b=b||{};var c=document.createEvent(\"Event\");\nc.initEvent(a,!!b.bubbles,!!b.cancelable);return c};if(c){for(var d in c)window.Event[d]=c[d];window.Event.prototype=c.prototype}}if(!window.CustomEvent||b&&\"function\"!==typeof window.CustomEvent)window.CustomEvent=function(a,b){b=b||{};var c=document.createEvent(\"CustomEvent\");c.initCustomEvent(a,!!b.bubbles,!!b.cancelable,b.detail);return c},window.CustomEvent.prototype=window.Event.prototype;if(!window.MouseEvent||b&&\"function\"!==typeof window.MouseEvent){b=window.MouseEvent;window.MouseEvent=\nfunction(a,b){b=b||{};var c=document.createEvent(\"MouseEvent\");c.initMouseEvent(a,!!b.bubbles,!!b.cancelable,b.view||window,b.detail,b.screenX,b.screenY,b.clientX,b.clientY,b.ctrlKey,b.altKey,b.shiftKey,b.metaKey,b.button,b.relatedTarget);return c};if(b)for(d in b)window.MouseEvent[d]=b[d];window.MouseEvent.prototype=b.prototype}Array.from||(Array.from=function(a){return[].slice.call(a)});Object.assign||(Object.assign=function(a,b){for(var c=[].slice.call(arguments,1),d=0,e;d<c.length;d++)if(e=c[d])for(var f=\na,n=e,q=Object.getOwnPropertyNames(n),I=0;I<q.length;I++)e=q[I],f[e]=n[e];return a})})();(function(){function a(){}function b(a,b){if(!a.childNodes.length)return[];switch(a.nodeType){case Node.DOCUMENT_NODE:return Q.call(a,b);case Node.DOCUMENT_FRAGMENT_NODE:return Eb.call(a,b);default:return x.call(a,b)}}var c=\"undefined\"===typeof HTMLTemplateElement,d=!(document.createDocumentFragment().cloneNode()instanceof DocumentFragment),e=!1;/Trident/.test(navigator.userAgent)&&function(){function a(a,b){if(a instanceof DocumentFragment)for(var d;d=a.firstChild;)c.call(this,d,b);else c.call(this,\na,b);return a}e=!0;var b=Node.prototype.cloneNode;Node.prototype.cloneNode=function(a){a=b.call(this,a);this instanceof DocumentFragment&&(a.__proto__=DocumentFragment.prototype);return a};DocumentFragment.prototype.querySelectorAll=HTMLElement.prototype.querySelectorAll;DocumentFragment.prototype.querySelector=HTMLElement.prototype.querySelector;Object.defineProperties(DocumentFragment.prototype,{nodeType:{get:function(){return Node.DOCUMENT_FRAGMENT_NODE},configurable:!0},localName:{get:function(){},\nconfigurable:!0},nodeName:{get:function(){return\"#document-fragment\"},configurable:!0}});var c=Node.prototype.insertBefore;Node.prototype.insertBefore=a;var d=Node.prototype.appendChild;Node.prototype.appendChild=function(b){b instanceof DocumentFragment?a.call(this,b,null):d.call(this,b);return b};var f=Node.prototype.removeChild,g=Node.prototype.replaceChild;Node.prototype.replaceChild=function(b,c){b instanceof DocumentFragment?(a.call(this,b,c),f.call(this,c)):g.call(this,b,c);return c};Document.prototype.createDocumentFragment=\nfunction(){var a=this.createElement(\"df\");a.__proto__=DocumentFragment.prototype;return a};var h=Document.prototype.importNode;Document.prototype.importNode=function(a,b){b=h.call(this,a,b||!1);a instanceof DocumentFragment&&(b.__proto__=DocumentFragment.prototype);return b}}();var f=Node.prototype.cloneNode,g=Document.prototype.createElement,h=Document.prototype.importNode,k=Node.prototype.removeChild,l=Node.prototype.appendChild,n=Node.prototype.replaceChild,q=DOMParser.prototype.parseFromString,\nI=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,\"innerHTML\")||{get:function(){return this.innerHTML},set:function(a){this.innerHTML=a}},v=Object.getOwnPropertyDescriptor(window.Node.prototype,\"childNodes\")||{get:function(){return this.childNodes}},x=Element.prototype.querySelectorAll,Q=Document.prototype.querySelectorAll,Eb=DocumentFragment.prototype.querySelectorAll,Fb=function(){if(!c){var a=document.createElement(\"template\"),b=document.createElement(\"template\");b.content.appendChild(document.createElement(\"div\"));\na.content.appendChild(b);a=a.cloneNode(!0);return 0===a.content.childNodes.length||0===a.content.firstChild.content.childNodes.length||d}}();if(c){var T=document.implementation.createHTMLDocument(\"template\"),Ja=!0,p=document.createElement(\"style\");p.textContent=\"template{display:none;}\";var za=document.head;za.insertBefore(p,za.firstElementChild);a.prototype=Object.create(HTMLElement.prototype);var aa=!document.createElement(\"div\").hasOwnProperty(\"innerHTML\");a.S=function(b){if(!b.content&&b.namespaceURI===\ndocument.documentElement.namespaceURI){b.content=T.createDocumentFragment();for(var c;c=b.firstChild;)l.call(b.content,c);if(aa)b.__proto__=a.prototype;else if(b.cloneNode=function(b){return a.b(this,b)},Ja)try{m(b),y(b)}catch(vh){Ja=!1}a.a(b.content)}};var X={option:[\"select\"],thead:[\"table\"],col:[\"colgroup\",\"table\"],tr:[\"tbody\",\"table\"],th:[\"tr\",\"tbody\",\"table\"],td:[\"tr\",\"tbody\",\"table\"]},m=function(b){Object.defineProperty(b,\"innerHTML\",{get:function(){return ba(this)},set:function(b){var c=X[(/<([a-z][^/\\0>\\x20\\t\\r\\n\\f]+)/i.exec(b)||\n[\"\",\"\"])[1].toLowerCase()];if(c)for(var d=0;d<c.length;d++)b=\"<\"+c[d]+\">\"+b+\"</\"+c[d]+\">\";T.body.innerHTML=b;for(a.a(T);this.content.firstChild;)k.call(this.content,this.content.firstChild);b=T.body;if(c)for(d=0;d<c.length;d++)b=b.lastChild;for(;b.firstChild;)l.call(this.content,b.firstChild)},configurable:!0})},y=function(a){Object.defineProperty(a,\"outerHTML\",{get:function(){return\"<template>\"+this.innerHTML+\"</template>\"},set:function(a){if(this.parentNode){T.body.innerHTML=a;for(a=this.ownerDocument.createDocumentFragment();T.body.firstChild;)l.call(a,\nT.body.firstChild);n.call(this.parentNode,a,this)}else throw Error(\"Failed to set the 'outerHTML' property on 'Element': This element has no parent node.\");},configurable:!0})};m(a.prototype);y(a.prototype);a.a=function(c){c=b(c,\"template\");for(var d=0,e=c.length,f;d<e&&(f=c[d]);d++)a.S(f)};document.addEventListener(\"DOMContentLoaded\",function(){a.a(document)});Document.prototype.createElement=function(){var b=g.apply(this,arguments);\"template\"===b.localName&&a.S(b);return b};DOMParser.prototype.parseFromString=\nfunction(){var b=q.apply(this,arguments);a.a(b);return b};Object.defineProperty(HTMLElement.prototype,\"innerHTML\",{get:function(){return ba(this)},set:function(b){I.set.call(this,b);a.a(this)},configurable:!0,enumerable:!0});var Y=/[&\\u00A0\"]/g,Gb=/[&\\u00A0<>]/g,Ka=function(a){switch(a){case \"&\":return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}};p=function(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b};var Aa=p(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),\nLa=p(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \")),ba=function(a,b){\"template\"===a.localName&&(a=a.content);for(var c=\"\",d=b?b(a):v.get.call(a),e=0,f=d.length,g;e<f&&(g=d[e]);e++){a:{var h=g;var k=a;var l=b;switch(h.nodeType){case Node.ELEMENT_NODE:for(var n=h.localName,m=\"<\"+n,q=h.attributes,x=0;k=q[x];x++)m+=\" \"+k.name+'=\"'+k.value.replace(Y,Ka)+'\"';m+=\">\";h=Aa[n]?m:m+ba(h,l)+\"</\"+n+\">\";break a;case Node.TEXT_NODE:h=h.data;h=k&&La[k.localName]?h:h.replace(Gb,Ka);break a;\ncase Node.COMMENT_NODE:h=\"\\x3c!--\"+h.data+\"--\\x3e\";break a;default:throw window.console.error(h),Error(\"not implemented\");}}c+=h}return c}}if(c||Fb){a.b=function(a,b){var c=f.call(a,!1);this.S&&this.S(c);b&&(l.call(c.content,f.call(a.content,!0)),Ma(c.content,a.content));return c};var Ma=function(c,d){if(d.querySelectorAll&&(d=b(d,\"template\"),0!==d.length)){c=b(c,\"template\");for(var e=0,f=c.length,g,h;e<f;e++)h=d[e],g=c[e],a&&a.S&&a.S(h),n.call(g.parentNode,sf.call(h,!0),g)}},sf=Node.prototype.cloneNode=\nfunction(b){if(!e&&d&&this instanceof DocumentFragment)if(b)var c=tf.call(this.ownerDocument,this,!0);else return this.ownerDocument.createDocumentFragment();else this.nodeType===Node.ELEMENT_NODE&&\"template\"===this.localName&&this.namespaceURI==document.documentElement.namespaceURI?c=a.b(this,b):c=f.call(this,b);b&&Ma(c,this);return c},tf=Document.prototype.importNode=function(c,d){d=d||!1;if(\"template\"===c.localName)return a.b(c,d);var e=h.call(this,c,d);if(d){Ma(e,c);c=b(e,'script:not([type]),script[type=\"application/javascript\"],script[type=\"text/javascript\"]');\nfor(var f,k=0;k<c.length;k++){f=c[k];d=g.call(document,\"script\");d.textContent=f.textContent;for(var l=f.attributes,m=0,q;m<l.length;m++)q=l[m],d.setAttribute(q.name,q.value);n.call(f.parentNode,d,f)}}return e}}c&&(window.HTMLTemplateElement=a)})();var Ca=setTimeout;function Da(){}function Ea(a,b){return function(){a.apply(b,arguments)}}function u(a){if(!(this instanceof u))throw new TypeError(\"Promises must be constructed via new\");if(\"function\"!==typeof a)throw new TypeError(\"not a function\");this.I=0;this.oa=!1;this.w=void 0;this.U=[];Fa(a,this)}\nfunction Ga(a,b){for(;3===a.I;)a=a.w;0===a.I?a.U.push(b):(a.oa=!0,Ha(function(){var c=1===a.I?b.Pa:b.Qa;if(null===c)(1===a.I?Ia:Na)(b.ma,a.w);else{try{var d=c(a.w)}catch(e){Na(b.ma,e);return}Ia(b.ma,d)}}))}function Ia(a,b){try{if(b===a)throw new TypeError(\"A promise cannot be resolved with itself.\");if(b&&(\"object\"===typeof b||\"function\"===typeof b)){var c=b.then;if(b instanceof u){a.I=3;a.w=b;Oa(a);return}if(\"function\"===typeof c){Fa(Ea(c,b),a);return}}a.I=1;a.w=b;Oa(a)}catch(d){Na(a,d)}}\nfunction Na(a,b){a.I=2;a.w=b;Oa(a)}function Oa(a){2===a.I&&0===a.U.length&&Ha(function(){a.oa||\"undefined\"!==typeof console&&console&&console.warn(\"Possible Unhandled Promise Rejection:\",a.w)});for(var b=0,c=a.U.length;b<c;b++)Ga(a,a.U[b]);a.U=null}function Pa(a,b,c){this.Pa=\"function\"===typeof a?a:null;this.Qa=\"function\"===typeof b?b:null;this.ma=c}function Fa(a,b){var c=!1;try{a(function(a){c||(c=!0,Ia(b,a))},function(a){c||(c=!0,Na(b,a))})}catch(d){c||(c=!0,Na(b,d))}}\nu.prototype[\"catch\"]=function(a){return this.then(null,a)};u.prototype.then=function(a,b){var c=new this.constructor(Da);Ga(this,new Pa(a,b,c));return c};u.prototype[\"finally\"]=function(a){var b=this.constructor;return this.then(function(c){return b.resolve(a()).then(function(){return c})},function(c){return b.resolve(a()).then(function(){return b.reject(c)})})};\nfunction Qa(a){return new u(function(b,c){function d(a,g){try{if(g&&(\"object\"===typeof g||\"function\"===typeof g)){var h=g.then;if(\"function\"===typeof h){h.call(g,function(b){d(a,b)},c);return}}e[a]=g;0===--f&&b(e)}catch(n){c(n)}}if(!a||\"undefined\"===typeof a.length)throw new TypeError(\"Promise.all accepts an array\");var e=Array.prototype.slice.call(a);if(0===e.length)return b([]);for(var f=e.length,g=0;g<e.length;g++)d(g,e[g])})}\nfunction Ra(a){return a&&\"object\"===typeof a&&a.constructor===u?a:new u(function(b){b(a)})}function Sa(a){return new u(function(b,c){c(a)})}function Ta(a){return new u(function(b,c){for(var d=0,e=a.length;d<e;d++)a[d].then(b,c)})}var Ha=\"function\"===typeof setImmediate&&function(a){setImmediate(a)}||function(a){Ca(a,0)};/*\n\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nif(!window.Promise){window.Promise=u;u.prototype.then=u.prototype.then;u.all=Qa;u.race=Ta;u.resolve=Ra;u.reject=Sa;var Ua=document.createTextNode(\"\"),Va=[];(new MutationObserver(function(){for(var a=Va.length,b=0;b<a;b++)Va[b]();Va.splice(0,a)})).observe(Ua,{characterData:!0});Ha=function(a){Va.push(a);Ua.textContent=0<Ua.textContent.length?\"\":\"a\"}};/*\n Copyright (C) 2015 by WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n(function(a,b){if(!(b in a)){var c=typeof global===typeof c?window:global,d=0,e=\"\"+Math.random(),f=\"__\\u0001symbol@@\"+e,g=a.getOwnPropertyNames,h=a.getOwnPropertyDescriptor,k=a.create,l=a.keys,n=a.freeze||a,q=a.defineProperty,I=a.defineProperties,v=h(a,\"getOwnPropertyNames\"),x=a.prototype,Q=x.hasOwnProperty,Eb=x.propertyIsEnumerable,Fb=x.toString,T=function(a,b,c){Q.call(a,f)||q(a,f,{enumerable:!1,configurable:!1,writable:!1,value:{}});a[f][\"@@\"+b]=c},Ja=function(a,b){var c=k(a);g(b).forEach(function(a){X.call(b,\na)&&Aa(c,a,b[a])});return c},p=function(){},za=function(a){return a!=f&&!Q.call(Y,a)},aa=function(a){return a!=f&&Q.call(Y,a)},X=function(a){var b=\"\"+a;return aa(b)?Q.call(this,b)&&this[f][\"@@\"+b]:Eb.call(this,a)},m=function(b){q(x,b,{enumerable:!1,configurable:!0,get:p,set:function(a){ba(this,b,{enumerable:!1,configurable:!0,writable:!0,value:a});T(this,b,!0)}});return n(Y[b]=q(a(b),\"constructor\",Gb))},y=function(a){if(this&&this!==c)throw new TypeError(\"Symbol is not a constructor\");return m(\"__\\u0001symbol:\".concat(a||\n\"\",e,++d))},Y=k(null),Gb={value:y},Ka=function(a){return Y[a]},Aa=function(a,b,c){var d=\"\"+b;if(aa(d)){b=ba;if(c.enumerable){var e=k(c);e.enumerable=!1}else e=c;b(a,d,e);T(a,d,!!c.enumerable)}else q(a,b,c);return a},La=function(a){return g(a).filter(aa).map(Ka)};v.value=Aa;q(a,\"defineProperty\",v);v.value=La;q(a,b,v);v.value=function(a){return g(a).filter(za)};q(a,\"getOwnPropertyNames\",v);v.value=function(a,b){var c=La(b);c.length?l(b).concat(c).forEach(function(c){X.call(b,c)&&Aa(a,c,b[c])}):I(a,\nb);return a};q(a,\"defineProperties\",v);v.value=X;q(x,\"propertyIsEnumerable\",v);v.value=y;q(c,\"Symbol\",v);v.value=function(a){a=\"__\\u0001symbol:\".concat(\"__\\u0001symbol:\",a,e);return a in x?Y[a]:m(a)};q(y,\"for\",v);v.value=function(a){if(za(a))throw new TypeError(a+\" is not a symbol\");return Q.call(Y,a)?a.slice(20,-e.length):void 0};q(y,\"keyFor\",v);v.value=function(a,b){var c=h(a,b);c&&aa(b)&&(c.enumerable=X.call(a,b));return c};q(a,\"getOwnPropertyDescriptor\",v);v.value=function(a,b){return 1===arguments.length?\nk(a):Ja(a,b)};q(a,\"create\",v);v.value=function(){var a=Fb.call(this);return\"[object String]\"===a&&aa(this)?\"[object Symbol]\":a};q(x,\"toString\",v);try{var ba=k(q({},\"__\\u0001symbol:\",{get:function(){return q(this,\"__\\u0001symbol:\",{value:!1})[\"__\\u0001symbol:\"]}}))[\"__\\u0001symbol:\"]||q}catch(Ma){ba=function(a,b,c){var d=h(x,b);delete x[b];q(a,b,c);q(x,b,d)}}}})(Object,\"getOwnPropertySymbols\");\n(function(a){var b=a.defineProperty,c=a.prototype,d=c.toString,e;\"iterator match replace search split hasInstance isConcatSpreadable unscopables species toPrimitive toStringTag\".split(\" \").forEach(function(f){if(!(f in Symbol))switch(b(Symbol,f,{value:Symbol(f)}),f){case \"toStringTag\":e=a.getOwnPropertyDescriptor(c,\"toString\"),e.value=function(){var a=d.call(this),b=this[Symbol.toStringTag];return\"undefined\"===typeof b?a:\"[object \"+b+\"]\"},b(c,\"toString\",e)}})})(Object,Symbol);\n(function(a,b,c){function d(){return this}b[a]||(b[a]=function(){var b=0,c=this,g={next:function(){var a=c.length<=b;return a?{done:a}:{done:a,value:c[b++]}}};g[a]=d;return g});c[a]||(c[a]=function(){var b=String.fromCodePoint,c=this,g=0,h=c.length,k={next:function(){var a=h<=g,d=a?\"\":b(c.codePointAt(g));g+=d.length;return a?{done:a}:{done:a,value:d}}};k[a]=d;return k})})(Symbol.iterator,Array.prototype,String.prototype);/*\n\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nvar Wa=Object.prototype.toString;Object.prototype.toString=function(){return void 0===this?\"[object Undefined]\":null===this?\"[object Null]\":Wa.call(this)};Object.keys=function(a){return Object.getOwnPropertyNames(a).filter(function(b){return(b=Object.getOwnPropertyDescriptor(a,b))&&b.enumerable})};var Xa=window.Symbol.iterator;\nString.prototype[Xa]&&String.prototype.codePointAt||(String.prototype[Xa]=function Ya(){var b,c=this;return Ba(Ya,function(d){1==d.a&&(b=0);if(3!=d.a)return b<c.length?d=ta(d,c[b]):(d.a=0,d=void 0),d;b++;d.a=2})});Set.prototype[Xa]||(Set.prototype[Xa]=function Za(){var b,c=this,d;return Ba(Za,function(e){1==e.a&&(b=[],c.forEach(function(c){b.push(c)}),d=0);if(3!=e.a)return d<b.length?e=ta(e,b[d]):(e.a=0,e=void 0),e;d++;e.a=2})});\nMap.prototype[Xa]||(Map.prototype[Xa]=function $a(){var b,c=this,d;return Ba($a,function(e){1==e.a&&(b=[],c.forEach(function(c,d){b.push([d,c])}),d=0);if(3!=e.a)return d<b.length?e=ta(e,b[d]):(e.a=0,e=void 0),e;d++;e.a=2})});/*\n\n Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nwindow.WebComponents=window.WebComponents||{flags:{}};var ab=document.querySelector('script[src*=\"webcomponents-bundle\"]'),bb=/wc-(.+)/,w={};if(!w.noOpts){location.search.slice(1).split(\"&\").forEach(function(a){a=a.split(\"=\");var b;a[0]&&(b=a[0].match(bb))&&(w[b[1]]=a[1]||!0)});if(ab)for(var cb=0,db=void 0;db=ab.attributes[cb];cb++)\"src\"!==db.name&&(w[db.name]=db.value||!0);if(w.log&&w.log.split){var eb=w.log.split(\",\");w.log={};eb.forEach(function(a){w.log[a]=!0})}else w.log={}}\nwindow.WebComponents.flags=w;var fb=w.shadydom;fb&&(window.ShadyDOM=window.ShadyDOM||{},window.ShadyDOM.force=fb);var gb=w.register||w.ce;gb&&window.customElements&&(window.customElements.forcePolyfill=gb);/*\n\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nfunction hb(){}hb.prototype.toJSON=function(){return{}};function z(a){a.__shady||(a.__shady=new hb);return a.__shady}function A(a){return a&&a.__shady};var B=window.ShadyDOM||{};B.La=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var ib=Object.getOwnPropertyDescriptor(Node.prototype,\"firstChild\");B.D=!!(ib&&ib.configurable&&ib.get);B.ka=B.force||!B.La;B.M=B.noPatch||!1;B.ta=B.preferPerformance;var jb=navigator.userAgent.match(\"Trident\");B.ya=jb;function kb(a){return(a=A(a))&&void 0!==a.firstChild}function C(a){return\"ShadyRoot\"===a.Da}function lb(a){return(a=(a=A(a))&&a.root)&&mb(a)}\nvar nb=Element.prototype,ob=nb.matches||nb.matchesSelector||nb.mozMatchesSelector||nb.msMatchesSelector||nb.oMatchesSelector||nb.webkitMatchesSelector,pb=document.createTextNode(\"\"),qb=0,rb=[];(new MutationObserver(function(){for(;rb.length;)try{rb.shift()()}catch(a){throw pb.textContent=qb++,a;}})).observe(pb,{characterData:!0});function sb(a){rb.push(a);pb.textContent=qb++}var tb=!!document.contains;function ub(a,b){for(;b;){if(b==a)return!0;b=b.__shady_parentNode}return!1}\nfunction vb(a){for(var b=a.length-1;0<=b;b--){var c=a[b],d=c.getAttribute(\"id\")||c.getAttribute(\"name\");d&&\"length\"!==d&&isNaN(d)&&(a[d]=c)}a.item=function(b){return a[b]};a.namedItem=function(b){if(\"length\"!==b&&isNaN(b)&&a[b])return a[b];for(var c=ja(a),d=c.next();!d.done;d=c.next())if(d=d.value,(d.getAttribute(\"id\")||d.getAttribute(\"name\"))==b)return d;return null};return a}function wb(a){var b=[];for(a=a.__shady_native_firstChild;a;a=a.__shady_native_nextSibling)b.push(a);return b}\nfunction xb(a){var b=[];for(a=a.__shady_firstChild;a;a=a.__shady_nextSibling)b.push(a);return b}function D(a,b,c,d){c=void 0===c?\"\":c;for(var e in b){var f=b[e];if(!(d&&0<=d.indexOf(e))){f.configurable=!0;var g=c+e;if(f.value)a[g]=f.value;else try{Object.defineProperty(a,g,f)}catch(h){}}}}function E(a){var b={};Object.getOwnPropertyNames(a).forEach(function(c){b[c]=Object.getOwnPropertyDescriptor(a,c)});return b};var yb=[],zb;function Ab(a){zb||(zb=!0,sb(Bb));yb.push(a)}function Bb(){zb=!1;for(var a=!!yb.length;yb.length;)yb.shift()();return a}Bb.list=yb;function Cb(){this.a=!1;this.addedNodes=[];this.removedNodes=[];this.$=new Set}function Db(a){a.a||(a.a=!0,sb(function(){a.flush()}))}Cb.prototype.flush=function(){if(this.a){this.a=!1;var a=this.takeRecords();a.length&&this.$.forEach(function(b){b(a)})}};Cb.prototype.takeRecords=function(){if(this.addedNodes.length||this.removedNodes.length){var a=[{addedNodes:this.addedNodes,removedNodes:this.removedNodes}];this.addedNodes=[];this.removedNodes=[];return a}return[]};\nfunction Hb(a,b){var c=z(a);c.V||(c.V=new Cb);c.V.$.add(b);var d=c.V;return{Ca:b,P:d,Ea:a,takeRecords:function(){return d.takeRecords()}}}function Ib(a){var b=a&&a.P;b&&(b.$.delete(a.Ca),b.$.size||(z(a.Ea).V=null))}\nfunction Jb(a,b){var c=b.getRootNode();return a.map(function(a){var b=c===a.target.getRootNode();if(b&&a.addedNodes){if(b=Array.from(a.addedNodes).filter(function(a){return c===a.getRootNode()}),b.length)return a=Object.create(a),Object.defineProperty(a,\"addedNodes\",{value:b,configurable:!0}),a}else if(b)return a}).filter(function(a){return a})};var Kb=/[&\\u00A0\"]/g,Lb=/[&\\u00A0<>]/g;function Mb(a){switch(a){case \"&\":return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}}function Nb(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b}var Ob=Nb(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),Pb=Nb(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \"));\nfunction Qb(a,b){\"template\"===a.localName&&(a=a.content);for(var c=\"\",d=b?b(a):a.childNodes,e=0,f=d.length,g=void 0;e<f&&(g=d[e]);e++){a:{var h=g;var k=a,l=b;switch(h.nodeType){case Node.ELEMENT_NODE:k=h.localName;for(var n=\"<\"+k,q=h.attributes,I=0,v;v=q[I];I++)n+=\" \"+v.name+'=\"'+v.value.replace(Kb,Mb)+'\"';n+=\">\";h=Ob[k]?n:n+Qb(h,l)+\"</\"+k+\">\";break a;case Node.TEXT_NODE:h=h.data;h=k&&Pb[k.localName]?h:h.replace(Lb,Mb);break a;case Node.COMMENT_NODE:h=\"\\x3c!--\"+h.data+\"--\\x3e\";break a;default:throw window.console.error(h),\nError(\"not implemented\");}}c+=h}return c};var Rb=B.D,Sb={querySelector:function(a){return this.__shady_native_querySelector(a)},querySelectorAll:function(a){return this.__shady_native_querySelectorAll(a)}},Tb={};function Ub(a){Tb[a]=function(b){return b[\"__shady_native_\"+a]}}function Vb(a,b){D(a,b,\"__shady_native_\");for(var c in b)Ub(c)}function F(a,b){b=void 0===b?[]:b;for(var c=0;c<b.length;c++){var d=b[c],e=Object.getOwnPropertyDescriptor(a,d);e&&(Object.defineProperty(a,\"__shady_native_\"+d,e),e.value?Sb[d]||(Sb[d]=e.value):Ub(d))}}\nvar G=document.createTreeWalker(document,NodeFilter.SHOW_ALL,null,!1),H=document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,null,!1),Wb=document.implementation.createHTMLDocument(\"inert\");function Xb(a){for(var b;b=a.__shady_native_firstChild;)a.__shady_native_removeChild(b)}var Yb=[\"firstElementChild\",\"lastElementChild\",\"children\",\"childElementCount\"],Zb=[\"querySelector\",\"querySelectorAll\"];\nfunction $b(){var a=[\"dispatchEvent\",\"addEventListener\",\"removeEventListener\"];window.EventTarget?F(window.EventTarget.prototype,a):(F(Node.prototype,a),F(Window.prototype,a));Rb?F(Node.prototype,\"parentNode firstChild lastChild previousSibling nextSibling childNodes parentElement textContent\".split(\" \")):Vb(Node.prototype,{parentNode:{get:function(){G.currentNode=this;return G.parentNode()}},firstChild:{get:function(){G.currentNode=this;return G.firstChild()}},lastChild:{get:function(){G.currentNode=\nthis;return G.lastChild()}},previousSibling:{get:function(){G.currentNode=this;return G.previousSibling()}},nextSibling:{get:function(){G.currentNode=this;return G.nextSibling()}},childNodes:{get:function(){var a=[];G.currentNode=this;for(var c=G.firstChild();c;)a.push(c),c=G.nextSibling();return a}},parentElement:{get:function(){H.currentNode=this;return H.parentNode()}},textContent:{get:function(){switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:for(var a=document.createTreeWalker(this,\nNodeFilter.SHOW_TEXT,null,!1),c=\"\",d;d=a.nextNode();)c+=d.nodeValue;return c;default:return this.nodeValue}},set:function(a){if(\"undefined\"===typeof a||null===a)a=\"\";switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:Xb(this);(0<a.length||this.nodeType===Node.ELEMENT_NODE)&&this.__shady_native_insertBefore(document.createTextNode(a),void 0);break;default:this.nodeValue=a}}}});F(Node.prototype,\"appendChild insertBefore removeChild replaceChild cloneNode contains\".split(\" \"));\nF(HTMLElement.prototype,[\"parentElement\",\"contains\"]);a={firstElementChild:{get:function(){H.currentNode=this;return H.firstChild()}},lastElementChild:{get:function(){H.currentNode=this;return H.lastChild()}},children:{get:function(){var a=[];H.currentNode=this;for(var c=H.firstChild();c;)a.push(c),c=H.nextSibling();return vb(a)}},childElementCount:{get:function(){return this.children?this.children.length:0}}};Rb?(F(Element.prototype,Yb),F(Element.prototype,[\"previousElementSibling\",\"nextElementSibling\",\n\"innerHTML\",\"className\"]),F(HTMLElement.prototype,[\"children\",\"innerHTML\",\"className\"])):(Vb(Element.prototype,a),Vb(Element.prototype,{previousElementSibling:{get:function(){H.currentNode=this;return H.previousSibling()}},nextElementSibling:{get:function(){H.currentNode=this;return H.nextSibling()}},innerHTML:{get:function(){return Qb(this,wb)},set:function(a){var b=\"template\"===this.localName?this.content:this;Xb(b);var d=this.localName||\"div\";d=this.namespaceURI&&this.namespaceURI!==Wb.namespaceURI?\nWb.createElementNS(this.namespaceURI,d):Wb.createElement(d);d.innerHTML=a;for(a=\"template\"===this.localName?d.content:d;d=a.__shady_native_firstChild;)b.__shady_native_insertBefore(d,void 0)}},className:{get:function(){return this.getAttribute(\"class\")||\"\"},set:function(a){this.setAttribute(\"class\",a)}}}));F(Element.prototype,\"setAttribute getAttribute hasAttribute removeAttribute focus blur\".split(\" \"));F(Element.prototype,Zb);F(HTMLElement.prototype,[\"focus\",\"blur\"]);window.HTMLTemplateElement&&\nF(window.HTMLTemplateElement.prototype,[\"innerHTML\"]);Rb?F(DocumentFragment.prototype,Yb):Vb(DocumentFragment.prototype,a);F(DocumentFragment.prototype,Zb);Rb?(F(Document.prototype,Yb),F(Document.prototype,[\"activeElement\"])):Vb(Document.prototype,a);F(Document.prototype,[\"importNode\",\"getElementById\"]);F(Document.prototype,Zb)};var ac=E({get childNodes(){return this.__shady_childNodes},get firstChild(){return this.__shady_firstChild},get lastChild(){return this.__shady_lastChild},get childElementCount(){return this.__shady_childElementCount},get children(){return this.__shady_children},get firstElementChild(){return this.__shady_firstElementChild},get lastElementChild(){return this.__shady_lastElementChild},get shadowRoot(){return this.__shady_shadowRoot}}),bc=E({get textContent(){return this.__shady_textContent},set textContent(a){this.__shady_textContent=\na},get innerHTML(){return this.__shady_innerHTML},set innerHTML(a){return this.__shady_innerHTML=a}}),cc=E({get parentElement(){return this.__shady_parentElement},get parentNode(){return this.__shady_parentNode},get nextSibling(){return this.__shady_nextSibling},get previousSibling(){return this.__shady_previousSibling},get nextElementSibling(){return this.__shady_nextElementSibling},get previousElementSibling(){return this.__shady_previousElementSibling},get className(){return this.__shady_className},\nset className(a){return this.__shady_className=a}}),dc;for(dc in ac)ac[dc].enumerable=!1;for(var ec in bc)bc[ec].enumerable=!1;for(var fc in cc)cc[fc].enumerable=!1;var gc=B.D||B.M,hc=gc?function(){}:function(a){var b=z(a);b.Aa||(b.Aa=!0,D(a,cc))},ic=gc?function(){}:function(a){var b=z(a);b.za||(b.za=!0,D(a,ac),window.customElements&&!B.M||D(a,bc))};var jc=\"__eventWrappers\"+Date.now(),kc=function(){var a=Object.getOwnPropertyDescriptor(Event.prototype,\"composed\");return a?function(b){return a.get.call(b)}:null}(),lc=function(){function a(){}var b=!1,c={get capture(){b=!0}};window.addEventListener(\"test\",a,c);window.removeEventListener(\"test\",a,c);return b}();function mc(a){if(a&&\"object\"===typeof a){var b=!!a.capture;var c=!!a.once;var d=!!a.passive;var e=a.O}else b=!!a,d=c=!1;return{ua:e,capture:b,once:c,passive:d,sa:lc?a:b}}\nvar nc={blur:!0,focus:!0,focusin:!0,focusout:!0,click:!0,dblclick:!0,mousedown:!0,mouseenter:!0,mouseleave:!0,mousemove:!0,mouseout:!0,mouseover:!0,mouseup:!0,wheel:!0,beforeinput:!0,input:!0,keydown:!0,keyup:!0,compositionstart:!0,compositionupdate:!0,compositionend:!0,touchstart:!0,touchend:!0,touchmove:!0,touchcancel:!0,pointerover:!0,pointerenter:!0,pointerdown:!0,pointermove:!0,pointerup:!0,pointercancel:!0,pointerout:!0,pointerleave:!0,gotpointercapture:!0,lostpointercapture:!0,dragstart:!0,\ndrag:!0,dragenter:!0,dragleave:!0,dragover:!0,drop:!0,dragend:!0,DOMActivate:!0,DOMFocusIn:!0,DOMFocusOut:!0,keypress:!0},oc={DOMAttrModified:!0,DOMAttributeNameChanged:!0,DOMCharacterDataModified:!0,DOMElementNameChanged:!0,DOMNodeInserted:!0,DOMNodeInsertedIntoDocument:!0,DOMNodeRemoved:!0,DOMNodeRemovedFromDocument:!0,DOMSubtreeModified:!0};function pc(a){return a instanceof Node?a.__shady_getRootNode():a}\nfunction qc(a,b){var c=[],d=a;for(a=pc(a);d;)c.push(d),d.__shady_assignedSlot?d=d.__shady_assignedSlot:d.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&d.host&&(b||d!==a)?d=d.host:d=d.__shady_parentNode;c[c.length-1]===document&&c.push(window);return c}function rc(a){a.__composedPath||(a.__composedPath=qc(a.target,!0));return a.__composedPath}function sc(a,b){if(!C)return a;a=qc(a,!0);for(var c=0,d,e=void 0,f,g=void 0;c<b.length;c++)if(d=b[c],f=pc(d),f!==e&&(g=a.indexOf(f),e=f),!C(f)||-1<g)return d}\nfunction tc(a){function b(b,d){b=new a(b,d);b.__composed=d&&!!d.composed;return b}b.__proto__=a;b.prototype=a.prototype;return b}var uc={focus:!0,blur:!0};function vc(a){return a.__target!==a.target||a.__relatedTarget!==a.relatedTarget}function wc(a,b,c){if(c=b.__handlers&&b.__handlers[a.type]&&b.__handlers[a.type][c])for(var d=0,e;(e=c[d])&&(!vc(a)||a.target!==a.relatedTarget)&&(e.call(b,a),!a.__immediatePropagationStopped);d++);}\nfunction xc(a){var b=a.composedPath();Object.defineProperty(a,\"currentTarget\",{get:function(){return d},configurable:!0});for(var c=b.length-1;0<=c;c--){var d=b[c];wc(a,d,\"capture\");if(a.ga)return}Object.defineProperty(a,\"eventPhase\",{get:function(){return Event.AT_TARGET}});var e;for(c=0;c<b.length;c++){d=b[c];var f=A(d);f=f&&f.root;if(0===c||f&&f===e)if(wc(a,d,\"bubble\"),d!==window&&(e=d.__shady_getRootNode()),a.ga)break}}\nfunction yc(a,b,c,d,e,f){for(var g=0;g<a.length;g++){var h=a[g],k=h.type,l=h.capture,n=h.once,q=h.passive;if(b===h.node&&c===k&&d===l&&e===n&&f===q)return g}return-1}\nfunction zc(a,b,c){var d=mc(c),e=d.capture,f=d.once,g=d.passive,h=d.ua;d=d.sa;if(b){var k=typeof b;if(\"function\"===k||\"object\"===k)if(\"object\"!==k||b.handleEvent&&\"function\"===typeof b.handleEvent){if(oc[a])return this.__shady_native_addEventListener(a,b,d);var l=h||this;if(h=b[jc]){if(-1<yc(h,l,a,e,f,g))return}else b[jc]=[];h=function(d){f&&this.__shady_removeEventListener(a,b,c);d.__target||Ac(d);if(l!==this){var e=Object.getOwnPropertyDescriptor(d,\"currentTarget\");Object.defineProperty(d,\"currentTarget\",\n{get:function(){return l},configurable:!0})}d.__previousCurrentTarget=d.currentTarget;if(!C(l)&&\"slot\"!==l.localName||-1!=d.composedPath().indexOf(l))if(d.composed||-1<d.composedPath().indexOf(l))if(vc(d)&&d.target===d.relatedTarget)d.eventPhase===Event.BUBBLING_PHASE&&d.stopImmediatePropagation();else if(d.eventPhase===Event.CAPTURING_PHASE||d.bubbles||d.target===l||l instanceof Window){var g=\"function\"===k?b.call(l,d):b.handleEvent&&b.handleEvent(d);l!==this&&(e?(Object.defineProperty(d,\"currentTarget\",\ne),e=null):delete d.currentTarget);return g}};b[jc].push({node:l,type:a,capture:e,once:f,passive:g,ab:h});uc[a]?(this.__handlers=this.__handlers||{},this.__handlers[a]=this.__handlers[a]||{capture:[],bubble:[]},this.__handlers[a][e?\"capture\":\"bubble\"].push(h)):this.__shady_native_addEventListener(a,h,d)}}}\nfunction Bc(a,b,c){if(b){var d=mc(c);c=d.capture;var e=d.once,f=d.passive,g=d.ua;d=d.sa;if(oc[a])return this.__shady_native_removeEventListener(a,b,d);var h=g||this;g=void 0;var k=null;try{k=b[jc]}catch(l){}k&&(e=yc(k,h,a,c,e,f),-1<e&&(g=k.splice(e,1)[0].ab,k.length||(b[jc]=void 0)));this.__shady_native_removeEventListener(a,g||b,d);g&&uc[a]&&this.__handlers&&this.__handlers[a]&&(a=this.__handlers[a][c?\"capture\":\"bubble\"],b=a.indexOf(g),-1<b&&a.splice(b,1))}}\nfunction Cc(){for(var a in uc)window.__shady_native_addEventListener(a,function(a){a.__target||(Ac(a),xc(a))},!0)}\nvar Dc=E({get composed(){void 0===this.__composed&&(kc?this.__composed=\"focusin\"===this.type||\"focusout\"===this.type||kc(this):!1!==this.isTrusted&&(this.__composed=nc[this.type]));return this.__composed||!1},composedPath:function(){this.__composedPath||(this.__composedPath=qc(this.__target,this.composed));return this.__composedPath},get target(){return sc(this.currentTarget||this.__previousCurrentTarget,this.composedPath())},get relatedTarget(){if(!this.__relatedTarget)return null;this.__relatedTargetComposedPath||\n(this.__relatedTargetComposedPath=qc(this.__relatedTarget,!0));return sc(this.currentTarget||this.__previousCurrentTarget,this.__relatedTargetComposedPath)},stopPropagation:function(){Event.prototype.stopPropagation.call(this);this.ga=!0},stopImmediatePropagation:function(){Event.prototype.stopImmediatePropagation.call(this);this.ga=this.__immediatePropagationStopped=!0}});\nfunction Ac(a){a.__target=a.target;a.__relatedTarget=a.relatedTarget;if(B.D){var b=Object.getPrototypeOf(a);if(!Object.hasOwnProperty(b,\"__shady_patchedProto\")){var c=Object.create(b);c.__shady_sourceProto=b;D(c,Dc);b.__shady_patchedProto=c}a.__proto__=b.__shady_patchedProto}else D(a,Dc)}var Ec=tc(Event),Fc=tc(CustomEvent),Gc=tc(MouseEvent);\nfunction Hc(){if(!kc&&Object.getOwnPropertyDescriptor(Event.prototype,\"isTrusted\")){var a=function(){var a=new MouseEvent(\"click\",{bubbles:!0,cancelable:!0,composed:!0});this.__shady_dispatchEvent(a)};Element.prototype.click?Element.prototype.click=a:HTMLElement.prototype.click&&(HTMLElement.prototype.click=a)}}var Ic=Object.getOwnPropertyNames(Document.prototype).filter(function(a){return\"on\"===a.substring(0,2)});function Jc(a,b){return{index:a,W:[],Z:b}}\nfunction Kc(a,b,c,d){var e=0,f=0,g=0,h=0,k=Math.min(b-e,d-f);if(0==e&&0==f)a:{for(g=0;g<k;g++)if(a[g]!==c[g])break a;g=k}if(b==a.length&&d==c.length){h=a.length;for(var l=c.length,n=0;n<k-g&&Lc(a[--h],c[--l]);)n++;h=n}e+=g;f+=g;b-=h;d-=h;if(0==b-e&&0==d-f)return[];if(e==b){for(b=Jc(e,0);f<d;)b.W.push(c[f++]);return[b]}if(f==d)return[Jc(e,b-e)];k=e;g=f;d=d-g+1;h=b-k+1;b=Array(d);for(l=0;l<d;l++)b[l]=Array(h),b[l][0]=l;for(l=0;l<h;l++)b[0][l]=l;for(l=1;l<d;l++)for(n=1;n<h;n++)if(a[k+n-1]===c[g+l-1])b[l][n]=\nb[l-1][n-1];else{var q=b[l-1][n]+1,I=b[l][n-1]+1;b[l][n]=q<I?q:I}k=b.length-1;g=b[0].length-1;d=b[k][g];for(a=[];0<k||0<g;)0==k?(a.push(2),g--):0==g?(a.push(3),k--):(h=b[k-1][g-1],l=b[k-1][g],n=b[k][g-1],q=l<n?l<h?l:h:n<h?n:h,q==h?(h==d?a.push(0):(a.push(1),d=h),k--,g--):q==l?(a.push(3),k--,d=l):(a.push(2),g--,d=n));a.reverse();b=void 0;k=[];for(g=0;g<a.length;g++)switch(a[g]){case 0:b&&(k.push(b),b=void 0);e++;f++;break;case 1:b||(b=Jc(e,0));b.Z++;e++;b.W.push(c[f]);f++;break;case 2:b||(b=Jc(e,0));\nb.Z++;e++;break;case 3:b||(b=Jc(e,0)),b.W.push(c[f]),f++}b&&k.push(b);return k}function Lc(a,b){return a===b};function Mc(a,b,c,d){hc(a);d=d||null;var e=z(a),f=d?z(d):null;e.previousSibling=d?f.previousSibling:b.__shady_lastChild;if(f=A(e.previousSibling))f.nextSibling=a;if(f=A(e.nextSibling=d))f.previousSibling=a;e.parentNode=b;d?d===c.firstChild&&(c.firstChild=a):(c.lastChild=a,c.firstChild||(c.firstChild=a));c.childNodes=null}\nfunction Nc(a,b,c){ic(b);var d=z(b);void 0!==d.firstChild&&(d.childNodes=null);if(a.nodeType===Node.DOCUMENT_FRAGMENT_NODE)for(a=a.__shady_native_firstChild;a;a=a.__shady_native_nextSibling)Mc(a,b,d,c);else Mc(a,b,d,c)}\nfunction Oc(a,b){var c=z(a);b=z(b);a===b.firstChild&&(b.firstChild=c.nextSibling);a===b.lastChild&&(b.lastChild=c.previousSibling);a=c.previousSibling;var d=c.nextSibling;a&&(z(a).nextSibling=d);d&&(z(d).previousSibling=a);c.parentNode=c.previousSibling=c.nextSibling=void 0;void 0!==b.childNodes&&(b.childNodes=null)}\nfunction Pc(a,b){var c=z(a);if(b||void 0===c.firstChild){c.childNodes=null;var d=c.firstChild=a.__shady_native_firstChild;c.lastChild=a.__shady_native_lastChild;ic(a);c=d;for(d=void 0;c;c=c.__shady_native_nextSibling){var e=z(c);e.parentNode=b||a;e.nextSibling=c.__shady_native_nextSibling;e.previousSibling=d||null;d=c;hc(c)}}};var Qc=null;function Rc(){Qc||(Qc=window.ShadyCSS&&window.ShadyCSS.ScopingShim);return Qc||null}function Sc(a,b){var c=Rc();c&&c.unscopeNode(a,b)}function Tc(a,b){var c=Rc();if(!c)return!0;if(a.nodeType===Node.DOCUMENT_FRAGMENT_NODE){c=!0;for(a=a.__shady_firstChild;a;a=a.__shady_nextSibling)c=c&&Tc(a,b);return c}return a.nodeType!==Node.ELEMENT_NODE?!0:c.currentScopeForNode(a)===b}function Uc(a){if(a.nodeType!==Node.ELEMENT_NODE)return\"\";var b=Rc();return b?b.currentScopeForNode(a):\"\"}\nfunction Vc(a,b){if(a)for(a.nodeType===Node.ELEMENT_NODE&&b(a),a=a.__shady_firstChild;a;a=a.__shady_nextSibling)a.nodeType===Node.ELEMENT_NODE&&Vc(a,b)};var Wc=window.document,Xc=B.ta,Yc=Object.getOwnPropertyDescriptor(Node.prototype,\"isConnected\"),Zc=Yc&&Yc.get;function $c(a){for(var b;b=a.__shady_firstChild;)a.__shady_removeChild(b)}function ad(a){var b=A(a);if(b&&void 0!==b.ca)for(b=a.__shady_firstChild;b;b=b.__shady_nextSibling)ad(b);if(a=A(a))a.ca=void 0}function bd(a){var b=a;a&&\"slot\"===a.localName&&(b=(b=(b=A(a))&&b.T)&&b.length?b[0]:bd(a.__shady_nextSibling));return b}\nfunction cd(a,b,c){if(a=(a=A(a))&&a.V)b&&a.addedNodes.push(b),c&&a.removedNodes.push(c),Db(a)}\nvar gd=E({get parentNode(){var a=A(this);a=a&&a.parentNode;return void 0!==a?a:this.__shady_native_parentNode},get firstChild(){var a=A(this);a=a&&a.firstChild;return void 0!==a?a:this.__shady_native_firstChild},get lastChild(){var a=A(this);a=a&&a.lastChild;return void 0!==a?a:this.__shady_native_lastChild},get nextSibling(){var a=A(this);a=a&&a.nextSibling;return void 0!==a?a:this.__shady_native_nextSibling},get previousSibling(){var a=A(this);a=a&&a.previousSibling;return void 0!==a?a:this.__shady_native_previousSibling},\nget childNodes(){if(kb(this)){var a=A(this);if(!a.childNodes){a.childNodes=[];for(var b=this.__shady_firstChild;b;b=b.__shady_nextSibling)a.childNodes.push(b)}var c=a.childNodes}else c=this.__shady_native_childNodes;c.item=function(a){return c[a]};return c},get parentElement(){var a=A(this);(a=a&&a.parentNode)&&a.nodeType!==Node.ELEMENT_NODE&&(a=null);return void 0!==a?a:this.__shady_native_parentElement},get isConnected(){if(Zc&&Zc.call(this))return!0;if(this.nodeType==Node.DOCUMENT_FRAGMENT_NODE)return!1;\nvar a=this.ownerDocument;if(tb){if(a.__shady_native_contains(this))return!0}else if(a.documentElement&&a.documentElement.__shady_native_contains(this))return!0;for(a=this;a&&!(a instanceof Document);)a=a.__shady_parentNode||(C(a)?a.host:void 0);return!!(a&&a instanceof Document)},get textContent(){if(kb(this)){for(var a=[],b=this.__shady_firstChild;b;b=b.__shady_nextSibling)b.nodeType!==Node.COMMENT_NODE&&a.push(b.__shady_textContent);return a.join(\"\")}return this.__shady_native_textContent},set textContent(a){if(\"undefined\"===\ntypeof a||null===a)a=\"\";switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:if(!kb(this)&&B.D){var b=this.__shady_firstChild;(b!=this.__shady_lastChild||b&&b.nodeType!=Node.TEXT_NODE)&&$c(this);this.__shady_native_textContent=a}else $c(this),(0<a.length||this.nodeType===Node.ELEMENT_NODE)&&this.__shady_insertBefore(document.createTextNode(a));break;default:this.nodeValue=a}},insertBefore:function(a,b){if(this.ownerDocument!==Wc&&a.ownerDocument!==Wc)return this.__shady_native_insertBefore(a,\nb),a;if(a===this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");if(b){var c=A(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;var d=[],e=(c=dd(this))?c.host.localName:Uc(this),f=a.__shady_parentNode;if(f){var g=Uc(a);var h=!!c||!dd(a)||Xc&&void 0!==\nthis.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!Xc||void 0===a.__noInsertionPoint&&void 0===this.__noInsertionPoint)&&!Tc(a,e),l=c&&!a.__noInsertionPoint&&(!Xc||a.nodeType===Node.DOCUMENT_FRAGMENT_NODE);if(l||k)k&&(g=g||Uc(a)),Vc(a,function(a){l&&\"slot\"===a.localName&&d.push(a);if(k){var b=g;Rc()&&(b&&Sc(a,b),(b=Rc())&&b.scopeNode(a,e))}});d.length&&(ed(c),c.c.push.apply(c.c,d instanceof Array?d:ka(ja(d))),J(c));kb(this)&&(Nc(a,this,b),c=A(this),lb(this)?(J(c.root),f=!1):c.root&&(f=\n!1));f?(c=C(this)?this.host:this,b?(b=bd(b),c.__shady_native_insertBefore(a,b)):c.__shady_native_appendChild(a)):a.ownerDocument!==this.ownerDocument&&this.ownerDocument.adoptNode(a);cd(this,a);return a},appendChild:function(a){if(this!=a||!C(a))return this.__shady_insertBefore(a)},removeChild:function(a,b){b=void 0===b?!1:b;if(this.ownerDocument!==Wc)return this.__shady_native_removeChild(a);if(a.__shady_parentNode!==this)throw Error(\"The node to be removed is not a child of this node: \"+a);var c=\ndd(a),d=c&&fd(c,a),e=A(this);if(kb(this)&&(Oc(a,this),lb(this))){J(e.root);var f=!0}if(Rc()&&!b&&c&&a.nodeType!==Node.TEXT_NODE){var g=Uc(a);Vc(a,function(a){Sc(a,g)})}ad(a);c&&((b=this&&\"slot\"===this.localName)&&(f=!0),(d||b)&&J(c));f||(f=C(this)?this.host:this,(!e.root&&\"slot\"!==a.localName||f===a.__shady_native_parentNode)&&f.__shady_native_removeChild(a));cd(this,null,a);return a},replaceChild:function(a,b){this.__shady_insertBefore(a,b);this.__shady_removeChild(b);return a},cloneNode:function(a){if(\"template\"==\nthis.localName)return this.__shady_native_cloneNode(a);var b=this.__shady_native_cloneNode(!1);if(a&&b.nodeType!==Node.ATTRIBUTE_NODE){a=this.__shady_firstChild;for(var c;a;a=a.__shady_nextSibling)c=a.__shady_cloneNode(!0),b.__shady_appendChild(c)}return b},getRootNode:function(a){if(this&&this.nodeType){var b=z(this),c=b.ca;void 0===c&&(C(this)?(c=this,b.ca=c):(c=(c=this.__shady_parentNode)?c.__shady_getRootNode(a):this,document.documentElement.__shady_native_contains(this)&&(b.ca=c)));return c}},\ncontains:function(a){return ub(this,a)}});function hd(a,b,c){var d=[];id(a,b,c,d);return d}function id(a,b,c,d){for(a=a.__shady_firstChild;a;a=a.__shady_nextSibling){var e;if(e=a.nodeType===Node.ELEMENT_NODE){e=a;var f=b,g=c,h=d,k=f(e);k&&h.push(e);g&&g(k)?e=k:(id(e,f,g,h),e=void 0)}if(e)break}}\nvar jd=E({get firstElementChild(){var a=A(this);if(a&&void 0!==a.firstChild){for(a=this.__shady_firstChild;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.__shady_nextSibling;return a}return this.__shady_native_firstElementChild},get lastElementChild(){var a=A(this);if(a&&void 0!==a.lastChild){for(a=this.__shady_lastChild;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.__shady_previousSibling;return a}return this.__shady_native_lastElementChild},get children(){return kb(this)?vb(Array.prototype.filter.call(xb(this),\nfunction(a){return a.nodeType===Node.ELEMENT_NODE})):this.__shady_native_children},get childElementCount(){var a=this.__shady_children;return a?a.length:0}}),kd=E({querySelector:function(a){return hd(this,function(b){return ob.call(b,a)},function(a){return!!a})[0]||null},querySelectorAll:function(a,b){if(b){b=Array.prototype.slice.call(this.__shady_native_querySelectorAll(a));var c=this.__shady_getRootNode();return b.filter(function(a){return a.__shady_getRootNode()==c})}return hd(this,function(b){return ob.call(b,\na)})}}),ld=B.ta&&!B.M?Object.assign({},jd):jd;Object.assign(jd,kd);var md=E({getElementById:function(a){return\"\"===a?null:hd(this,function(b){return b.id==a},function(a){return!!a})[0]||null}});var nd=E({get activeElement(){var a=B.D?document.__shady_native_activeElement:document.activeElement;if(!a||!a.nodeType)return null;var b=!!C(this);if(!(this===document||b&&this.host!==a&&this.host.__shady_native_contains(a)))return null;for(b=dd(a);b&&b!==this;)a=b.host,b=dd(a);return this===document?b?null:a:b===this?a:null}});var od=document.implementation.createHTMLDocument(\"inert\"),pd=E({get innerHTML(){return kb(this)?Qb(\"template\"===this.localName?this.content:this,xb):this.__shady_native_innerHTML},set innerHTML(a){if(\"template\"===this.localName)this.__shady_native_innerHTML=a;else{$c(this);var b=this.localName||\"div\";b=this.namespaceURI&&this.namespaceURI!==od.namespaceURI?od.createElementNS(this.namespaceURI,b):od.createElement(b);for(B.D?b.__shady_native_innerHTML=a:b.innerHTML=a;a=b.__shady_firstChild;)this.__shady_insertBefore(a)}}});var qd=E({addEventListener:function(a,b,c){\"object\"!==typeof c&&(c={capture:!!c});c.O=c.O||this;this.host.__shady_addEventListener(a,b,c)},removeEventListener:function(a,b,c){\"object\"!==typeof c&&(c={capture:!!c});c.O=c.O||this;this.host.__shady_removeEventListener(a,b,c)}});function rd(a,b){D(a,qd,b);D(a,nd,b);D(a,pd,b);D(a,jd,b);B.M&&!b?(D(a,gd,b),D(a,md,b)):B.D||(D(a,cc),D(a,ac),D(a,bc))};var sd={},td=B.deferConnectionCallbacks&&\"loading\"===document.readyState,ud;function vd(a){var b=[];do b.unshift(a);while(a=a.__shady_parentNode);return b}function wd(a,b,c){if(a!==sd)throw new TypeError(\"Illegal constructor\");this.a=null;xd(this,b,c)}\nfunction xd(a,b,c){a.Da=\"ShadyRoot\";a.host=b;a.mode=c&&c.mode;Pc(a.host);b=z(a.host);b.root=a;b.Ta=\"closed\"!==a.mode?a:null;b=z(a);b.firstChild=b.lastChild=b.parentNode=b.nextSibling=b.previousSibling=null;if(B.preferPerformance)for(;b=a.host.__shady_native_firstChild;)a.host.__shady_native_removeChild(b);else J(a)}function J(a){a.R||(a.R=!0,Ab(function(){return yd(a)}))}\nfunction yd(a){var b;if(b=a.R){for(var c;a;)a:{a.R&&(c=a),b=a;a=b.host.__shady_getRootNode();if(C(a)&&(b=A(b.host))&&0<b.Y)break a;a=void 0}b=c}(c=b)&&c._renderSelf()}\nwd.prototype._renderSelf=function(){var a=td;td=!0;this.R=!1;if(this.a){zd(this);for(var b=0,c;b<this.a.length;b++){c=this.a[b];var d=A(c),e=d.assignedNodes;d.assignedNodes=[];d.T=[];if(d.qa=e)for(d=0;d<e.length;d++){var f=A(e[d]);f.ha=f.assignedSlot;f.assignedSlot===c&&(f.assignedSlot=null)}}for(b=this.host.__shady_firstChild;b;b=b.__shady_nextSibling)Ad(this,b);for(b=0;b<this.a.length;b++){c=this.a[b];e=A(c);if(!e.assignedNodes.length)for(d=c.__shady_firstChild;d;d=d.__shady_nextSibling)Ad(this,\nd,c);(d=(d=A(c.__shady_parentNode))&&d.root)&&(mb(d)||d.R)&&d._renderSelf();Bd(this,e.T,e.assignedNodes);if(d=e.qa){for(f=0;f<d.length;f++)A(d[f]).ha=null;e.qa=null;d.length>e.assignedNodes.length&&(e.ja=!0)}e.ja&&(e.ja=!1,Cd(this,c))}c=this.a;b=[];for(e=0;e<c.length;e++)d=c[e].__shady_parentNode,(f=A(d))&&f.root||!(0>b.indexOf(d))||b.push(d);for(c=0;c<b.length;c++){f=b[c];e=f===this?this.host:f;d=[];for(f=f.__shady_firstChild;f;f=f.__shady_nextSibling)if(\"slot\"==f.localName)for(var g=A(f).T,h=0;h<\ng.length;h++)d.push(g[h]);else d.push(f);f=wb(e);g=Kc(d,d.length,f,f.length);for(var k=h=0,l=void 0;h<g.length&&(l=g[h]);h++){for(var n=0,q=void 0;n<l.W.length&&(q=l.W[n]);n++)q.__shady_native_parentNode===e&&e.__shady_native_removeChild(q),f.splice(l.index+k,1);k-=l.Z}k=0;for(l=void 0;k<g.length&&(l=g[k]);k++)for(h=f[l.index],n=l.index;n<l.index+l.Z;n++)q=d[n],e.__shady_native_insertBefore(q,h),f.splice(n,0,q)}}if(!B.preferPerformance&&!this.pa)for(b=this.host.__shady_firstChild;b;b=b.__shady_nextSibling)c=\nA(b),b.__shady_native_parentNode!==this.host||\"slot\"!==b.localName&&c.assignedSlot||this.host.__shady_native_removeChild(b);this.pa=!0;td=a;ud&&ud()};function Ad(a,b,c){var d=z(b),e=d.ha;d.ha=null;c||(c=(a=a.b[b.__shady_slot||\"__catchall\"])&&a[0]);c?(z(c).assignedNodes.push(b),d.assignedSlot=c):d.assignedSlot=void 0;e!==d.assignedSlot&&d.assignedSlot&&(z(d.assignedSlot).ja=!0)}\nfunction Bd(a,b,c){for(var d=0,e=void 0;d<c.length&&(e=c[d]);d++)if(\"slot\"==e.localName){var f=A(e).assignedNodes;f&&f.length&&Bd(a,b,f)}else b.push(c[d])}function Cd(a,b){b.__shady_native_dispatchEvent(new Event(\"slotchange\"));b=A(b);b.assignedSlot&&Cd(a,b.assignedSlot)}function ed(a){a.c=a.c||[];a.a=a.a||[];a.b=a.b||{}}\nfunction zd(a){if(a.c&&a.c.length){for(var b=a.c,c,d=0;d<b.length;d++){var e=b[d];Pc(e);var f=e.__shady_parentNode;Pc(f);f=A(f);f.Y=(f.Y||0)+1;f=Dd(e);a.b[f]?(c=c||{},c[f]=!0,a.b[f].push(e)):a.b[f]=[e];a.a.push(e)}if(c)for(var g in c)a.b[g]=Ed(a.b[g]);a.c=[]}}function Dd(a){var b=a.name||a.getAttribute(\"name\")||\"__catchall\";return a.Ba=b}\nfunction Ed(a){return a.sort(function(a,c){a=vd(a);for(var b=vd(c),e=0;e<a.length;e++){c=a[e];var f=b[e];if(c!==f)return a=xb(c.__shady_parentNode),a.indexOf(c)-a.indexOf(f)}})}\nfunction fd(a,b){if(a.a){zd(a);var c=a.b,d;for(d in c)for(var e=c[d],f=0;f<e.length;f++){var g=e[f];if(ub(b,g)){e.splice(f,1);var h=a.a.indexOf(g);0<=h&&(a.a.splice(h,1),(h=A(g.__shady_parentNode))&&h.Y&&h.Y--);f--;g=A(g);if(h=g.T)for(var k=0;k<h.length;k++){var l=h[k],n=l.__shady_native_parentNode;n&&n.__shady_native_removeChild(l)}g.T=[];g.assignedNodes=[];h=!0}}return h}}function mb(a){zd(a);return!(!a.a||!a.a.length)}\n(function(a){a.__proto__=DocumentFragment.prototype;rd(a,\"__shady_\");rd(a);Object.defineProperties(a,{nodeType:{value:Node.DOCUMENT_FRAGMENT_NODE,configurable:!0},nodeName:{value:\"#document-fragment\",configurable:!0},nodeValue:{value:null,configurable:!0}});[\"localName\",\"namespaceURI\",\"prefix\"].forEach(function(b){Object.defineProperty(a,b,{value:void 0,configurable:!0})});[\"ownerDocument\",\"baseURI\",\"isConnected\"].forEach(function(b){Object.defineProperty(a,b,{get:function(){return this.host[b]},\nconfigurable:!0})})})(wd.prototype);\nif(window.customElements&&B.ka&&!B.preferPerformance){var Fd=new Map;ud=function(){var a=[];Fd.forEach(function(b,c){a.push([c,b])});Fd.clear();for(var b=0;b<a.length;b++){var c=a[b][0];a[b][1]?c.__shadydom_connectedCallback():c.__shadydom_disconnectedCallback()}};td&&document.addEventListener(\"readystatechange\",function(){td=!1;ud()},{once:!0});var Gd=function(a,b,c){var d=0,e=\"__isConnected\"+d++;if(b||c)a.prototype.connectedCallback=a.prototype.__shadydom_connectedCallback=function(){td?Fd.set(this,\n!0):this[e]||(this[e]=!0,b&&b.call(this))},a.prototype.disconnectedCallback=a.prototype.__shadydom_disconnectedCallback=function(){td?this.isConnected||Fd.set(this,!1):this[e]&&(this[e]=!1,c&&c.call(this))};return a},Hd=window.customElements.define,define=function(a,b){var c=b.prototype.connectedCallback,d=b.prototype.disconnectedCallback;Hd.call(window.customElements,a,Gd(b,c,d));b.prototype.connectedCallback=c;b.prototype.disconnectedCallback=d};window.customElements.define=define;Object.defineProperty(window.CustomElementRegistry.prototype,\n\"define\",{value:define,configurable:!0})}function dd(a){a=a.__shady_getRootNode();if(C(a))return a};function Id(a){this.node=a}r=Id.prototype;r.addEventListener=function(a,b,c){return this.node.__shady_addEventListener(a,b,c)};r.removeEventListener=function(a,b,c){return this.node.__shady_removeEventListener(a,b,c)};r.appendChild=function(a){return this.node.__shady_appendChild(a)};r.insertBefore=function(a,b){return this.node.__shady_insertBefore(a,b)};r.removeChild=function(a){return this.node.__shady_removeChild(a)};r.replaceChild=function(a,b){return this.node.__shady_replaceChild(a,b)};\nr.cloneNode=function(a){return this.node.__shady_cloneNode(a)};r.getRootNode=function(a){return this.node.__shady_getRootNode(a)};r.contains=function(a){return this.node.__shady_contains(a)};r.dispatchEvent=function(a){return this.node.__shady_dispatchEvent(a)};r.setAttribute=function(a,b){this.node.__shady_setAttribute(a,b)};r.getAttribute=function(a){return this.node.__shady_native_getAttribute(a)};r.hasAttribute=function(a){return this.node.__shady_native_hasAttribute(a)};r.removeAttribute=function(a){this.node.__shady_removeAttribute(a)};\nr.attachShadow=function(a){return this.node.__shady_attachShadow(a)};r.focus=function(){this.node.__shady_native_focus()};r.blur=function(){this.node.__shady_blur()};r.importNode=function(a,b){if(this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_importNode(a,b)};r.getElementById=function(a){if(this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_getElementById(a)};r.querySelector=function(a){return this.node.__shady_querySelector(a)};\nr.querySelectorAll=function(a,b){return this.node.__shady_querySelectorAll(a,b)};r.assignedNodes=function(a){if(\"slot\"===this.node.localName)return this.node.__shady_assignedNodes(a)};\nt.Object.defineProperties(Id.prototype,{activeElement:{configurable:!0,enumerable:!0,get:function(){if(C(this.node)||this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_activeElement}},_activeElement:{configurable:!0,enumerable:!0,get:function(){return this.activeElement}},host:{configurable:!0,enumerable:!0,get:function(){if(C(this.node))return this.node.host}},parentNode:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_parentNode}},firstChild:{configurable:!0,\nenumerable:!0,get:function(){return this.node.__shady_firstChild}},lastChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_lastChild}},nextSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_nextSibling}},previousSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_previousSibling}},childNodes:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_childNodes}},parentElement:{configurable:!0,enumerable:!0,\nget:function(){return this.node.__shady_parentElement}},firstElementChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_firstElementChild}},lastElementChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_lastElementChild}},nextElementSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_nextElementSibling}},previousElementSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_previousElementSibling}},\nchildren:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_children}},childElementCount:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_childElementCount}},shadowRoot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_shadowRoot}},assignedSlot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_assignedSlot}},isConnected:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_isConnected}},innerHTML:{configurable:!0,\nenumerable:!0,get:function(){return this.node.__shady_innerHTML},set:function(a){this.node.__shady_innerHTML=a}},textContent:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_textContent},set:function(a){this.node.__shady_textContent=a}},slot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_slot},set:function(a){this.node.__shady_slot=a}},className:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_className},set:function(a){return this.node.__shady_className=\na}}});Ic.forEach(function(a){Object.defineProperty(Id.prototype,a,{get:function(){return this.node[\"__shady_\"+a]},set:function(b){this.node[\"__shady_\"+a]=b},configurable:!0})});var Jd=new WeakMap;function Kd(a){if(C(a)||a instanceof Id)return a;var b=Jd.get(a);b||(b=new Id(a),Jd.set(a,b));return b};var Ld=E({dispatchEvent:function(a){Bb();return this.__shady_native_dispatchEvent(a)},addEventListener:zc,removeEventListener:Bc});var Md=E({get assignedSlot(){var a=this.__shady_parentNode;(a=a&&a.__shady_shadowRoot)&&yd(a);return(a=A(this))&&a.assignedSlot||null}});var Nd=window.document;function Od(a,b){if(\"slot\"===b)a=a.__shady_parentNode,lb(a)&&J(A(a).root);else if(\"slot\"===a.localName&&\"name\"===b&&(b=dd(a))){if(b.a){zd(b);var c=a.Ba,d=Dd(a);if(d!==c){c=b.b[c];var e=c.indexOf(a);0<=e&&c.splice(e,1);c=b.b[d]||(b.b[d]=[]);c.push(a);1<c.length&&(b.b[d]=Ed(c))}}J(b)}}\nvar Pd=E({get previousElementSibling(){var a=A(this);if(a&&void 0!==a.previousSibling){for(a=this.__shady_previousSibling;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.__shady_previousSibling;return a}return this.__shady_native_previousElementSibling},get nextElementSibling(){var a=A(this);if(a&&void 0!==a.nextSibling){for(a=this.__shady_nextSibling;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.__shady_nextSibling;return a}return this.__shady_native_nextElementSibling},get slot(){return this.getAttribute(\"slot\")},\nset slot(a){this.__shady_setAttribute(\"slot\",a)},get shadowRoot(){var a=A(this);return a&&a.Ta||null},get className(){return this.getAttribute(\"class\")||\"\"},set className(a){this.__shady_setAttribute(\"class\",a)},setAttribute:function(a,b){if(this.ownerDocument!==Nd)this.__shady_native_setAttribute(a,b);else{var c;(c=Rc())&&\"class\"===a?(c.setElementClass(this,b),c=!0):c=!1;c||(this.__shady_native_setAttribute(a,b),Od(this,a))}},removeAttribute:function(a){this.__shady_native_removeAttribute(a);Od(this,\na)},attachShadow:function(a){if(!this)throw Error(\"Must provide a host.\");if(!a)throw Error(\"Not enough arguments.\");if(a.shadyUpgradeFragment&&!B.ya){var b=a.shadyUpgradeFragment;b.__proto__=ShadowRoot.prototype;xd(b,this,a);Pc(b,b);a=b.__noInsertionPoint?null:b.querySelectorAll(\"slot\");b.__noInsertionPoint=void 0;if(a&&a.length){var c=b;ed(c);c.c.push.apply(c.c,a instanceof Array?a:ka(ja(a)));J(b)}b.host.__shady_native_appendChild(b)}else b=new wd(sd,this,a);return b}});var Qd=E({blur:function(){var a=A(this);(a=(a=a&&a.root)&&a.activeElement)?a.__shady_blur():this.__shady_native_blur()}});Ic.forEach(function(a){Qd[a]={set:function(b){var c=z(this),d=a.substring(2);c.N||(c.N={});c.N[a]&&this.removeEventListener(d,c.N[a]);this.__shady_addEventListener(d,b);c.N[a]=b},get:function(){var b=A(this);return b&&b.N&&b.N[a]},configurable:!0}});var Rd=E({assignedNodes:function(a){if(\"slot\"===this.localName){var b=this.__shady_getRootNode();b&&C(b)&&yd(b);return(b=A(this))?(a&&a.flatten?b.T:b.assignedNodes)||[]:[]}},addEventListener:function(a,b,c){if(\"slot\"!==this.localName||\"slotchange\"===a)zc.call(this,a,b,c);else{\"object\"!==typeof c&&(c={capture:!!c});var d=this.__shady_parentNode;if(!d)throw Error(\"ShadyDOM cannot attach event to slot unless it has a `parentNode`\");c.O=this;d.__shady_addEventListener(a,b,c)}},removeEventListener:function(a,\nb,c){if(\"slot\"!==this.localName||\"slotchange\"===a)Bc.call(this,a,b,c);else{\"object\"!==typeof c&&(c={capture:!!c});var d=this.__shady_parentNode;if(!d)throw Error(\"ShadyDOM cannot attach event to slot unless it has a `parentNode`\");c.O=this;d.__shady_removeEventListener(a,b,c)}}});var Sd=window.document,Td=E({importNode:function(a,b){if(a.ownerDocument!==Sd||\"template\"===a.localName)return this.__shady_native_importNode(a,b);var c=this.__shady_native_importNode(a,!1);if(b)for(a=a.__shady_firstChild;a;a=a.__shady_nextSibling)b=this.__shady_importNode(a,!0),c.__shady_appendChild(b);return c}});var Ud=E({addEventListener:zc.bind(window),removeEventListener:Bc.bind(window)});var Vd={};Object.getOwnPropertyDescriptor(HTMLElement.prototype,\"parentElement\")&&(Vd.parentElement=gd.parentElement);Object.getOwnPropertyDescriptor(HTMLElement.prototype,\"contains\")&&(Vd.contains=gd.contains);Object.getOwnPropertyDescriptor(HTMLElement.prototype,\"children\")&&(Vd.children=jd.children);Object.getOwnPropertyDescriptor(HTMLElement.prototype,\"innerHTML\")&&(Vd.innerHTML=pd.innerHTML);Object.getOwnPropertyDescriptor(HTMLElement.prototype,\"className\")&&(Vd.className=Pd.className);\nvar Wd={EventTarget:[Ld],Node:[gd,window.EventTarget?null:Ld],Text:[Md],Element:[Pd,jd,Md,!B.D||\"innerHTML\"in Element.prototype?pd:null,window.HTMLSlotElement?null:Rd],HTMLElement:[Qd,Vd],HTMLSlotElement:[Rd],DocumentFragment:[ld,md],Document:[Td,ld,md,nd],Window:[Ud]},Xd=B.D?null:[\"innerHTML\",\"textContent\"];function Yd(a){var b=a?null:Xd,c={},d;for(d in Wd)c.ea=window[d]&&window[d].prototype,Wd[d].forEach(function(c){return function(d){return c.ea&&d&&D(c.ea,d,a,b)}}(c)),c={ea:c.ea}};if(B.ka){var ShadyDOM={inUse:B.ka,patch:function(a){ic(a);hc(a);return a},isShadyRoot:C,enqueue:Ab,flush:Bb,flushInitial:function(a){!a.pa&&a.R&&yd(a)},settings:B,filterMutations:Jb,observeChildren:Hb,unobserveChildren:Ib,deferConnectionCallbacks:B.deferConnectionCallbacks,preferPerformance:B.preferPerformance,handlesDynamicScoping:!0,wrap:B.M?Kd:function(a){return a},Wrapper:Id,composedPath:rc,noPatch:B.M,nativeMethods:Sb,nativeTree:Tb};window.ShadyDOM=ShadyDOM;$b();Yd(\"__shady_\");Object.defineProperty(document,\n\"_activeElement\",nd.activeElement);D(Window.prototype,Ud,\"__shady_\");B.M||(Yd(),Hc());Cc();window.Event=Ec;window.CustomEvent=Fc;window.MouseEvent=Gc;window.ShadowRoot=wd};var Zd=new Set(\"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph\".split(\" \"));function $d(a){var b=Zd.has(a);a=/^[a-z][.0-9_a-z]*-[\\-.0-9_a-z]*$/.test(a);return!b&&a}function K(a){var b=a.isConnected;if(void 0!==b)return b;for(;a&&!(a.__CE_isImportDocument||a instanceof Document);)a=a.parentNode||(window.ShadowRoot&&a instanceof ShadowRoot?a.host:void 0);return!(!a||!(a.__CE_isImportDocument||a instanceof Document))}\nfunction ae(a,b){for(;b&&b!==a&&!b.nextSibling;)b=b.parentNode;return b&&b!==a?b.nextSibling:null}\nfunction be(a,b,c){c=void 0===c?new Set:c;for(var d=a;d;){if(d.nodeType===Node.ELEMENT_NODE){var e=d;b(e);var f=e.localName;if(\"link\"===f&&\"import\"===e.getAttribute(\"rel\")){d=e.import;if(d instanceof Node&&!c.has(d))for(c.add(d),d=d.firstChild;d;d=d.nextSibling)be(d,b,c);d=ae(a,e);continue}else if(\"template\"===f){d=ae(a,e);continue}if(e=e.__CE_shadowRoot)for(e=e.firstChild;e;e=e.nextSibling)be(e,b,c)}d=d.firstChild?d.firstChild:ae(a,d)}}function L(a,b,c){a[b]=c};function ce(){this.a=new Map;this.u=new Map;this.c=[];this.f=[];this.b=!1}function de(a,b,c){a.a.set(b,c);a.u.set(c.constructorFunction,c)}function ee(a,b){a.b=!0;a.c.push(b)}function fe(a,b){a.b=!0;a.f.push(b)}function ge(a,b){a.b&&be(b,function(b){return he(a,b)})}function he(a,b){if(a.b&&!b.__CE_patched){b.__CE_patched=!0;for(var c=0;c<a.c.length;c++)a.c[c](b);for(c=0;c<a.f.length;c++)a.f[c](b)}}\nfunction M(a,b){var c=[];be(b,function(a){return c.push(a)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state?a.connectedCallback(d):ie(a,d)}}function N(a,b){var c=[];be(b,function(a){return c.push(a)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state&&a.disconnectedCallback(d)}}\nfunction O(a,b,c){c=void 0===c?{}:c;var d=c.$a||new Set,e=c.fa||function(b){return ie(a,b)},f=[];be(b,function(b){if(\"link\"===b.localName&&\"import\"===b.getAttribute(\"rel\")){var c=b.import;c instanceof Node&&(c.__CE_isImportDocument=!0,c.__CE_hasRegistry=!0);c&&\"complete\"===c.readyState?c.__CE_documentLoadHandled=!0:b.addEventListener(\"load\",function(){var c=b.import;if(!c.__CE_documentLoadHandled){c.__CE_documentLoadHandled=!0;var f=new Set(d);f.delete(c);O(a,c,{$a:f,fa:e})}})}else f.push(b)},d);\nif(a.b)for(b=0;b<f.length;b++)he(a,f[b]);for(b=0;b<f.length;b++)e(f[b])}\nfunction ie(a,b){if(void 0===b.__CE_state){var c=b.ownerDocument;if(c.defaultView||c.__CE_isImportDocument&&c.__CE_hasRegistry)if(c=a.a.get(b.localName)){c.constructionStack.push(b);var d=c.constructorFunction;try{try{if(new d!==b)throw Error(\"The custom element constructor did not produce the element being upgraded.\");}finally{c.constructionStack.pop()}}catch(g){throw b.__CE_state=2,g;}b.__CE_state=1;b.__CE_definition=c;if(c.attributeChangedCallback)for(c=c.observedAttributes,d=0;d<c.length;d++){var e=\nc[d],f=b.getAttribute(e);null!==f&&a.attributeChangedCallback(b,e,null,f,null)}K(b)&&a.connectedCallback(b)}}}ce.prototype.connectedCallback=function(a){var b=a.__CE_definition;b.connectedCallback&&b.connectedCallback.call(a)};ce.prototype.disconnectedCallback=function(a){var b=a.__CE_definition;b.disconnectedCallback&&b.disconnectedCallback.call(a)};\nce.prototype.attributeChangedCallback=function(a,b,c,d,e){var f=a.__CE_definition;f.attributeChangedCallback&&-1<f.observedAttributes.indexOf(b)&&f.attributeChangedCallback.call(a,b,c,d,e)};function je(a){var b=document;this.b=a;this.a=b;this.P=void 0;O(this.b,this.a);\"loading\"===this.a.readyState&&(this.P=new MutationObserver(this.c.bind(this)),this.P.observe(this.a,{childList:!0,subtree:!0}))}function ke(a){a.P&&a.P.disconnect()}je.prototype.c=function(a){var b=this.a.readyState;\"interactive\"!==b&&\"complete\"!==b||ke(this);for(b=0;b<a.length;b++)for(var c=a[b].addedNodes,d=0;d<c.length;d++)O(this.b,c[d])};function le(){var a=this;this.a=this.w=void 0;this.b=new Promise(function(b){a.a=b;a.w&&b(a.w)})}le.prototype.resolve=function(a){if(this.w)throw Error(\"Already resolved.\");this.w=a;this.a&&this.a(a)};function P(a){this.c=!1;this.a=a;this.F=new Map;this.f=function(a){return a()};this.b=!1;this.u=[];this.aa=new je(a)}r=P.prototype;\nr.wa=function(a,b){var c=this;if(!(b instanceof Function))throw new TypeError(\"Custom element constructors must be functions.\");if(!$d(a))throw new SyntaxError(\"The element name '\"+a+\"' is not valid.\");if(this.a.a.get(a))throw Error(\"A custom element with name '\"+a+\"' has already been defined.\");if(this.c)throw Error(\"A custom element is already being defined.\");this.c=!0;try{var d=function(a){var b=e[a];if(void 0!==b&&!(b instanceof Function))throw Error(\"The '\"+a+\"' callback must be a function.\");\nreturn b},e=b.prototype;if(!(e instanceof Object))throw new TypeError(\"The custom element constructor's prototype is not an object.\");var f=d(\"connectedCallback\");var g=d(\"disconnectedCallback\");var h=d(\"adoptedCallback\");var k=d(\"attributeChangedCallback\");var l=b.observedAttributes||[]}catch(n){return}finally{this.c=!1}b={localName:a,constructorFunction:b,connectedCallback:f,disconnectedCallback:g,adoptedCallback:h,attributeChangedCallback:k,observedAttributes:l,constructionStack:[]};de(this.a,\na,b);this.u.push(b);this.b||(this.b=!0,this.f(function(){return me(c)}))};r.fa=function(a){O(this.a,a)};\nfunction me(a){if(!1!==a.b){a.b=!1;for(var b=a.u,c=[],d=new Map,e=0;e<b.length;e++)d.set(b[e].localName,[]);O(a.a,document,{fa:function(b){if(void 0===b.__CE_state){var e=b.localName,f=d.get(e);f?f.push(b):a.a.a.get(e)&&c.push(b)}}});for(e=0;e<c.length;e++)ie(a.a,c[e]);for(;0<b.length;){var f=b.shift();e=f.localName;f=d.get(f.localName);for(var g=0;g<f.length;g++)ie(a.a,f[g]);(e=a.F.get(e))&&e.resolve(void 0)}}}r.get=function(a){if(a=this.a.a.get(a))return a.constructorFunction};\nr.xa=function(a){if(!$d(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.F.get(a);if(b)return b.b;b=new le;this.F.set(a,b);this.a.a.get(a)&&!this.u.some(function(b){return b.localName===a})&&b.resolve(void 0);return b.b};r.Ra=function(a){ke(this.aa);var b=this.f;this.f=function(c){return a(function(){return b(c)})}};window.CustomElementRegistry=P;P.prototype.define=P.prototype.wa;P.prototype.upgrade=P.prototype.fa;P.prototype.get=P.prototype.get;\nP.prototype.whenDefined=P.prototype.xa;P.prototype.polyfillWrapFlushCallback=P.prototype.Ra;var ne=window.Document.prototype.createElement,oe=window.Document.prototype.createElementNS,pe=window.Document.prototype.importNode,qe=window.Document.prototype.prepend,re=window.Document.prototype.append,se=window.DocumentFragment.prototype.prepend,te=window.DocumentFragment.prototype.append,ue=window.Node.prototype.cloneNode,ve=window.Node.prototype.appendChild,we=window.Node.prototype.insertBefore,xe=window.Node.prototype.removeChild,ye=window.Node.prototype.replaceChild,ze=Object.getOwnPropertyDescriptor(window.Node.prototype,\n\"textContent\"),Ae=window.Element.prototype.attachShadow,Be=Object.getOwnPropertyDescriptor(window.Element.prototype,\"innerHTML\"),Ce=window.Element.prototype.getAttribute,De=window.Element.prototype.setAttribute,Ee=window.Element.prototype.removeAttribute,Fe=window.Element.prototype.getAttributeNS,Ge=window.Element.prototype.setAttributeNS,He=window.Element.prototype.removeAttributeNS,Ie=window.Element.prototype.insertAdjacentElement,Je=window.Element.prototype.insertAdjacentHTML,Ke=window.Element.prototype.prepend,\nLe=window.Element.prototype.append,Me=window.Element.prototype.before,Ne=window.Element.prototype.after,Oe=window.Element.prototype.replaceWith,Pe=window.Element.prototype.remove,Qe=window.HTMLElement,Re=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,\"innerHTML\"),Se=window.HTMLElement.prototype.insertAdjacentElement,Te=window.HTMLElement.prototype.insertAdjacentHTML;var Ue=new function(){};function Ve(){var a=We;window.HTMLElement=function(){function b(){var b=this.constructor,d=a.u.get(b);if(!d)throw Error(\"The custom element being constructed was not registered with `customElements`.\");var e=d.constructionStack;if(0===e.length)return e=ne.call(document,d.localName),Object.setPrototypeOf(e,b.prototype),e.__CE_state=1,e.__CE_definition=d,he(a,e),e;d=e.length-1;var f=e[d];if(f===Ue)throw Error(\"The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.\");\ne[d]=Ue;Object.setPrototypeOf(f,b.prototype);he(a,f);return f}b.prototype=Qe.prototype;Object.defineProperty(b.prototype,\"constructor\",{writable:!0,configurable:!0,enumerable:!1,value:b});return b}()};function Xe(a,b,c){function d(b){return function(c){for(var d=[],e=0;e<arguments.length;++e)d[e]=arguments[e];e=[];for(var f=[],l=0;l<d.length;l++){var n=d[l];n instanceof Element&&K(n)&&f.push(n);if(n instanceof DocumentFragment)for(n=n.firstChild;n;n=n.nextSibling)e.push(n);else e.push(n)}b.apply(this,d);for(d=0;d<f.length;d++)N(a,f[d]);if(K(this))for(d=0;d<e.length;d++)f=e[d],f instanceof Element&&M(a,f)}}void 0!==c.da&&(b.prepend=d(c.da));void 0!==c.append&&(b.append=d(c.append))};function Ye(){var a=We;L(Document.prototype,\"createElement\",function(b){if(this.__CE_hasRegistry){var c=a.a.get(b);if(c)return new c.constructorFunction}b=ne.call(this,b);he(a,b);return b});L(Document.prototype,\"importNode\",function(b,c){b=pe.call(this,b,!!c);this.__CE_hasRegistry?O(a,b):ge(a,b);return b});L(Document.prototype,\"createElementNS\",function(b,c){if(this.__CE_hasRegistry&&(null===b||\"http://www.w3.org/1999/xhtml\"===b)){var d=a.a.get(c);if(d)return new d.constructorFunction}b=oe.call(this,\nb,c);he(a,b);return b});Xe(a,Document.prototype,{da:qe,append:re})};function Ze(){function a(a,d){Object.defineProperty(a,\"textContent\",{enumerable:d.enumerable,configurable:!0,get:d.get,set:function(a){if(this.nodeType===Node.TEXT_NODE)d.set.call(this,a);else{var c=void 0;if(this.firstChild){var e=this.childNodes,h=e.length;if(0<h&&K(this)){c=Array(h);for(var k=0;k<h;k++)c[k]=e[k]}}d.set.call(this,a);if(c)for(a=0;a<c.length;a++)N(b,c[a])}}})}var b=We;L(Node.prototype,\"insertBefore\",function(a,d){if(a instanceof DocumentFragment){var c=Array.prototype.slice.apply(a.childNodes);\na=we.call(this,a,d);if(K(this))for(d=0;d<c.length;d++)M(b,c[d]);return a}c=K(a);d=we.call(this,a,d);c&&N(b,a);K(this)&&M(b,a);return d});L(Node.prototype,\"appendChild\",function(a){if(a instanceof DocumentFragment){var c=Array.prototype.slice.apply(a.childNodes);a=ve.call(this,a);if(K(this))for(var e=0;e<c.length;e++)M(b,c[e]);return a}c=K(a);e=ve.call(this,a);c&&N(b,a);K(this)&&M(b,a);return e});L(Node.prototype,\"cloneNode\",function(a){a=ue.call(this,!!a);this.ownerDocument.__CE_hasRegistry?O(b,a):\nge(b,a);return a});L(Node.prototype,\"removeChild\",function(a){var c=K(a),e=xe.call(this,a);c&&N(b,a);return e});L(Node.prototype,\"replaceChild\",function(a,d){if(a instanceof DocumentFragment){var c=Array.prototype.slice.apply(a.childNodes);a=ye.call(this,a,d);if(K(this))for(N(b,d),d=0;d<c.length;d++)M(b,c[d]);return a}c=K(a);var f=ye.call(this,a,d),g=K(this);g&&N(b,d);c&&N(b,a);g&&M(b,a);return f});ze&&ze.get?a(Node.prototype,ze):ee(b,function(b){a(b,{enumerable:!0,configurable:!0,get:function(){for(var a=\n[],b=0;b<this.childNodes.length;b++){var c=this.childNodes[b];c.nodeType!==Node.COMMENT_NODE&&a.push(c.textContent)}return a.join(\"\")},set:function(a){for(;this.firstChild;)xe.call(this,this.firstChild);null!=a&&\"\"!==a&&ve.call(this,document.createTextNode(a))}})})};function $e(a){function b(b){return function(c){for(var d=[],e=0;e<arguments.length;++e)d[e]=arguments[e];e=[];for(var h=[],k=0;k<d.length;k++){var l=d[k];l instanceof Element&&K(l)&&h.push(l);if(l instanceof DocumentFragment)for(l=l.firstChild;l;l=l.nextSibling)e.push(l);else e.push(l)}b.apply(this,d);for(d=0;d<h.length;d++)N(a,h[d]);if(K(this))for(d=0;d<e.length;d++)h=e[d],h instanceof Element&&M(a,h)}}var c=Element.prototype;void 0!==Me&&(c.before=b(Me));void 0!==Me&&(c.after=b(Ne));void 0!==Oe&&\nL(c,\"replaceWith\",function(b){for(var c=[],d=0;d<arguments.length;++d)c[d]=arguments[d];d=[];for(var g=[],h=0;h<c.length;h++){var k=c[h];k instanceof Element&&K(k)&&g.push(k);if(k instanceof DocumentFragment)for(k=k.firstChild;k;k=k.nextSibling)d.push(k);else d.push(k)}h=K(this);Oe.apply(this,c);for(c=0;c<g.length;c++)N(a,g[c]);if(h)for(N(a,this),c=0;c<d.length;c++)g=d[c],g instanceof Element&&M(a,g)});void 0!==Pe&&L(c,\"remove\",function(){var b=K(this);Pe.call(this);b&&N(a,this)})};function af(){function a(a,b){Object.defineProperty(a,\"innerHTML\",{enumerable:b.enumerable,configurable:!0,get:b.get,set:function(a){var c=this,e=void 0;K(this)&&(e=[],be(this,function(a){a!==c&&e.push(a)}));b.set.call(this,a);if(e)for(var f=0;f<e.length;f++){var g=e[f];1===g.__CE_state&&d.disconnectedCallback(g)}this.ownerDocument.__CE_hasRegistry?O(d,this):ge(d,this);return a}})}function b(a,b){L(a,\"insertAdjacentElement\",function(a,c){var e=K(c);a=b.call(this,a,c);e&&N(d,c);K(a)&&M(d,c);return a})}\nfunction c(a,b){function c(a,b){for(var c=[];a!==b;a=a.nextSibling)c.push(a);for(b=0;b<c.length;b++)O(d,c[b])}L(a,\"insertAdjacentHTML\",function(a,d){a=a.toLowerCase();if(\"beforebegin\"===a){var e=this.previousSibling;b.call(this,a,d);c(e||this.parentNode.firstChild,this)}else if(\"afterbegin\"===a)e=this.firstChild,b.call(this,a,d),c(this.firstChild,e);else if(\"beforeend\"===a)e=this.lastChild,b.call(this,a,d),c(e||this.firstChild,null);else if(\"afterend\"===a)e=this.nextSibling,b.call(this,a,d),c(this.nextSibling,\ne);else throw new SyntaxError(\"The value provided (\"+String(a)+\") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.\");})}var d=We;Ae&&L(Element.prototype,\"attachShadow\",function(a){a=Ae.call(this,a);var b=d;if(b.b&&!a.__CE_patched){a.__CE_patched=!0;for(var c=0;c<b.c.length;c++)b.c[c](a)}return this.__CE_shadowRoot=a});Be&&Be.get?a(Element.prototype,Be):Re&&Re.get?a(HTMLElement.prototype,Re):fe(d,function(b){a(b,{enumerable:!0,configurable:!0,get:function(){return ue.call(this,\n!0).innerHTML},set:function(a){var b=\"template\"===this.localName,c=b?this.content:this,d=oe.call(document,this.namespaceURI,this.localName);for(d.innerHTML=a;0<c.childNodes.length;)xe.call(c,c.childNodes[0]);for(a=b?d.content:d;0<a.childNodes.length;)ve.call(c,a.childNodes[0])}})});L(Element.prototype,\"setAttribute\",function(a,b){if(1!==this.__CE_state)return De.call(this,a,b);var c=Ce.call(this,a);De.call(this,a,b);b=Ce.call(this,a);d.attributeChangedCallback(this,a,c,b,null)});L(Element.prototype,\n\"setAttributeNS\",function(a,b,c){if(1!==this.__CE_state)return Ge.call(this,a,b,c);var e=Fe.call(this,a,b);Ge.call(this,a,b,c);c=Fe.call(this,a,b);d.attributeChangedCallback(this,b,e,c,a)});L(Element.prototype,\"removeAttribute\",function(a){if(1!==this.__CE_state)return Ee.call(this,a);var b=Ce.call(this,a);Ee.call(this,a);null!==b&&d.attributeChangedCallback(this,a,b,null,null)});L(Element.prototype,\"removeAttributeNS\",function(a,b){if(1!==this.__CE_state)return He.call(this,a,b);var c=Fe.call(this,\na,b);He.call(this,a,b);var e=Fe.call(this,a,b);c!==e&&d.attributeChangedCallback(this,b,c,e,a)});Se?b(HTMLElement.prototype,Se):Ie?b(Element.prototype,Ie):console.warn(\"Custom Elements: `Element#insertAdjacentElement` was not patched.\");Te?c(HTMLElement.prototype,Te):Je?c(Element.prototype,Je):console.warn(\"Custom Elements: `Element#insertAdjacentHTML` was not patched.\");Xe(d,Element.prototype,{da:Ke,append:Le});$e(d)};var bf=window.customElements;if(!bf||bf.forcePolyfill||\"function\"!=typeof bf.define||\"function\"!=typeof bf.get){var We=new ce;Ve();Ye();Xe(We,DocumentFragment.prototype,{da:se,append:te});Ze();af();document.__CE_hasRegistry=!0;var customElements=new P(We);Object.defineProperty(window,\"customElements\",{configurable:!0,enumerable:!0,value:customElements})};function cf(){this.end=this.start=0;this.rules=this.parent=this.previous=null;this.cssText=this.parsedCssText=\"\";this.atRule=!1;this.type=0;this.parsedSelector=this.selector=this.keyframesName=\"\"}\nfunction df(a){a=a.replace(ef,\"\").replace(ff,\"\");var b=gf,c=a,d=new cf;d.start=0;d.end=c.length;for(var e=d,f=0,g=c.length;f<g;f++)if(\"{\"===c[f]){e.rules||(e.rules=[]);var h=e,k=h.rules[h.rules.length-1]||null;e=new cf;e.start=f+1;e.parent=h;e.previous=k;h.rules.push(e)}else\"}\"===c[f]&&(e.end=f+1,e=e.parent||d);return b(d,a)}\nfunction gf(a,b){var c=b.substring(a.start,a.end-1);a.parsedCssText=a.cssText=c.trim();a.parent&&(c=b.substring(a.previous?a.previous.end:a.parent.start,a.start-1),c=hf(c),c=c.replace(jf,\" \"),c=c.substring(c.lastIndexOf(\";\")+1),c=a.parsedSelector=a.selector=c.trim(),a.atRule=0===c.indexOf(\"@\"),a.atRule?0===c.indexOf(\"@media\")?a.type=kf:c.match(lf)&&(a.type=mf,a.keyframesName=a.selector.split(jf).pop()):a.type=0===c.indexOf(\"--\")?nf:of);if(c=a.rules)for(var d=0,e=c.length,f=void 0;d<e&&(f=c[d]);d++)gf(f,\nb);return a}function hf(a){return a.replace(/\\\\([0-9a-f]{1,6})\\s/gi,function(a,c){a=c;for(c=6-a.length;c--;)a=\"0\"+a;return\"\\\\\"+a})}\nfunction pf(a,b,c){c=void 0===c?\"\":c;var d=\"\";if(a.cssText||a.rules){var e=a.rules,f;if(f=e)f=e[0],f=!(f&&f.selector&&0===f.selector.indexOf(\"--\"));if(f){f=0;for(var g=e.length,h=void 0;f<g&&(h=e[f]);f++)d=pf(h,b,d)}else b?b=a.cssText:(b=a.cssText,b=b.replace(qf,\"\").replace(rf,\"\"),b=b.replace(uf,\"\").replace(vf,\"\")),(d=b.trim())&&(d=\"  \"+d+\"\\n\")}d&&(a.selector&&(c+=a.selector+\" {\\n\"),c+=d,a.selector&&(c+=\"}\\n\\n\"));return c}\nvar of=1,mf=7,kf=4,nf=1E3,ef=/\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,ff=/@import[^;]*;/gim,qf=/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,rf=/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,uf=/@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,vf=/[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,lf=/^@[^\\s]*keyframes/,jf=/\\s+/g;var R=!(window.ShadyDOM&&window.ShadyDOM.inUse),wf;function xf(a){wf=a&&a.shimcssproperties?!1:R||!(navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/)||!window.CSS||!CSS.supports||!CSS.supports(\"box-shadow\",\"0 0 0 var(--foo)\"))}var yf;window.ShadyCSS&&void 0!==window.ShadyCSS.cssBuild&&(yf=window.ShadyCSS.cssBuild);var zf=!(!window.ShadyCSS||!window.ShadyCSS.disableRuntime);\nwindow.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?wf=window.ShadyCSS.nativeCss:window.ShadyCSS?(xf(window.ShadyCSS),window.ShadyCSS=void 0):xf(window.WebComponents&&window.WebComponents.flags);var S=wf,Af=yf;var Bf=/(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi,Cf=/(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,Df=/(--[\\w-]+)\\s*([:,;)]|$)/gi,Ef=/(animation\\s*:)|(animation-name\\s*:)/,Ff=/@media\\s(.*)/,Gf=/\\{[^}]*\\}/g;var Hf=new Set;function If(a,b){if(!a)return\"\";\"string\"===typeof a&&(a=df(a));b&&Jf(a,b);return pf(a,S)}function Kf(a){!a.__cssRules&&a.textContent&&(a.__cssRules=df(a.textContent));return a.__cssRules||null}function Lf(a){return!!a.parent&&a.parent.type===mf}function Jf(a,b,c,d){if(a){var e=!1,f=a.type;if(d&&f===kf){var g=a.selector.match(Ff);g&&(window.matchMedia(g[1]).matches||(e=!0))}f===of?b(a):c&&f===mf?c(a):f===nf&&(e=!0);if((a=a.rules)&&!e)for(e=0,f=a.length,g=void 0;e<f&&(g=a[e]);e++)Jf(g,b,c,d)}}\nfunction Mf(a,b,c,d){var e=document.createElement(\"style\");b&&e.setAttribute(\"scope\",b);e.textContent=a;Nf(e,c,d);return e}var Of=null;function Pf(a){a=document.createComment(\" Shady DOM styles for \"+a+\" \");var b=document.head;b.insertBefore(a,(Of?Of.nextSibling:null)||b.firstChild);return Of=a}function Nf(a,b,c){b=b||document.head;b.insertBefore(a,c&&c.nextSibling||b.firstChild);Of?a.compareDocumentPosition(Of)===Node.DOCUMENT_POSITION_PRECEDING&&(Of=a):Of=a}\nfunction Qf(a,b){for(var c=0,d=a.length;b<d;b++)if(\"(\"===a[b])c++;else if(\")\"===a[b]&&0===--c)return b;return-1}function Rf(a,b){var c=a.indexOf(\"var(\");if(-1===c)return b(a,\"\",\"\",\"\");var d=Qf(a,c+3),e=a.substring(c+4,d);c=a.substring(0,c);a=Rf(a.substring(d+1),b);d=e.indexOf(\",\");return-1===d?b(c,e.trim(),\"\",a):b(c,e.substring(0,d).trim(),e.substring(d+1).trim(),a)}function Sf(a,b){R?a.setAttribute(\"class\",b):window.ShadyDOM.nativeMethods.setAttribute.call(a,\"class\",b)}\nvar Tf=window.ShadyDOM&&window.ShadyDOM.wrap||function(a){return a};function Uf(a){var b=a.localName,c=\"\";b?-1<b.indexOf(\"-\")||(c=b,b=a.getAttribute&&a.getAttribute(\"is\")||\"\"):(b=a.is,c=a.extends);return{is:b,X:c}}function Vf(a){for(var b=[],c=\"\",d=0;0<=d&&d<a.length;d++)if(\"(\"===a[d]){var e=Qf(a,d);c+=a.slice(d,e+1);d=e}else\",\"===a[d]?(b.push(c),c=\"\"):c+=a[d];c&&b.push(c);return b}\nfunction Wf(a){if(void 0!==Af)return Af;if(void 0===a.__cssBuild){var b=a.getAttribute(\"css-build\");if(b)a.__cssBuild=b;else{a:{b=\"template\"===a.localName?a.content.firstChild:a.firstChild;if(b instanceof Comment&&(b=b.textContent.trim().split(\":\"),\"css-build\"===b[0])){b=b[1];break a}b=\"\"}if(\"\"!==b){var c=\"template\"===a.localName?a.content.firstChild:a.firstChild;c.parentNode.removeChild(c)}a.__cssBuild=b}}return a.__cssBuild||\"\"}\nfunction Xf(a){a=void 0===a?\"\":a;return\"\"!==a&&S?R?\"shadow\"===a:\"shady\"===a:!1};function Yf(){}function Zf(a,b){$f(U,a,function(a){ag(a,b||\"\")})}function $f(a,b,c){b.nodeType===Node.ELEMENT_NODE&&c(b);var d;\"template\"===b.localName?d=(b.content||b._content||b).childNodes:d=b.children||b.childNodes;if(d)for(b=0;b<d.length;b++)$f(a,d[b],c)}\nfunction ag(a,b,c){if(b)if(a.classList)c?(a.classList.remove(\"style-scope\"),a.classList.remove(b)):(a.classList.add(\"style-scope\"),a.classList.add(b));else if(a.getAttribute){var d=a.getAttribute(\"class\");c?d&&(b=d.replace(\"style-scope\",\"\").replace(b,\"\"),Sf(a,b)):Sf(a,(d?d+\" \":\"\")+\"style-scope \"+b)}}function bg(a,b,c){$f(U,a,function(a){ag(a,b,!0);ag(a,c)})}function cg(a,b){$f(U,a,function(a){ag(a,b||\"\",!0)})}\nfunction dg(a,b,c,d,e){var f=U;e=void 0===e?\"\":e;\"\"===e&&(R||\"shady\"===(void 0===d?\"\":d)?e=If(b,c):(a=Uf(a),e=eg(f,b,a.is,a.X,c)+\"\\n\\n\"));return e.trim()}function eg(a,b,c,d,e){var f=fg(c,d);c=c?\".\"+c:\"\";return If(b,function(b){b.c||(b.selector=b.C=gg(a,b,a.b,c,f),b.c=!0);e&&e(b,c,f)})}function fg(a,b){return b?\"[is=\"+a+\"]\":a}\nfunction gg(a,b,c,d,e){var f=Vf(b.selector);if(!Lf(b)){b=0;for(var g=f.length,h=void 0;b<g&&(h=f[b]);b++)f[b]=c.call(a,h,d,e)}return f.filter(function(a){return!!a}).join(\",\")}function hg(a){return a.replace(ig,function(a,c,d){-1<d.indexOf(\"+\")?d=d.replace(/\\+/g,\"___\"):-1<d.indexOf(\"___\")&&(d=d.replace(/___/g,\"+\"));return\":\"+c+\"(\"+d+\")\"})}\nfunction jg(a){for(var b=[],c;c=a.match(kg);){var d=c.index,e=Qf(a,d);if(-1===e)throw Error(c.input+\" selector missing ')'\");c=a.slice(d,e+1);a=a.replace(c,\"\\ue000\");b.push(c)}return{na:a,matches:b}}function lg(a,b){var c=a.split(\"\\ue000\");return b.reduce(function(a,b,f){return a+b+c[f+1]},c[0])}\nYf.prototype.b=function(a,b,c){var d=!1;a=a.trim();var e=ig.test(a);e&&(a=a.replace(ig,function(a,b,c){return\":\"+b+\"(\"+c.replace(/\\s/g,\"\")+\")\"}),a=hg(a));var f=kg.test(a);if(f){var g=jg(a);a=g.na;g=g.matches}a=a.replace(mg,\":host $1\");a=a.replace(ng,function(a,e,f){d||(a=og(f,e,b,c),d=d||a.stop,e=a.Ha,f=a.value);return e+f});f&&(a=lg(a,g));e&&(a=hg(a));return a=a.replace(pg,function(a,b,c,d){return'[dir=\"'+c+'\"] '+b+d+\", \"+b+'[dir=\"'+c+'\"]'+d})};\nfunction og(a,b,c,d){var e=a.indexOf(\"::slotted\");0<=a.indexOf(\":host\")?a=qg(a,d):0!==e&&(a=c?rg(a,c):a);c=!1;0<=e&&(b=\"\",c=!0);if(c){var f=!0;c&&(a=a.replace(sg,function(a,b){return\" > \"+b}))}return{value:a,Ha:b,stop:f}}function rg(a,b){a=a.split(/(\\[.+?\\])/);for(var c=[],d=0;d<a.length;d++)if(1===d%2)c.push(a[d]);else{var e=a[d];if(\"\"!==e||d!==a.length-1)e=e.split(\":\"),e[0]+=b,c.push(e.join(\":\"))}return c.join(\"\")}\nfunction qg(a,b){var c=a.match(tg);return(c=c&&c[2].trim()||\"\")?c[0].match(ug)?a.replace(tg,function(a,c,f){return b+f}):c.split(ug)[0]===b?c:\"should_not_match\":a.replace(\":host\",b)}function vg(a){\":root\"===a.selector&&(a.selector=\"html\")}Yf.prototype.c=function(a){return a.match(\":host\")?\"\":a.match(\"::slotted\")?this.b(a,\":not(.style-scope)\"):rg(a.trim(),\":not(.style-scope)\")};t.Object.defineProperties(Yf.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return\"style-scope\"}}});\nvar ig=/:(nth[-\\w]+)\\(([^)]+)\\)/,ng=/(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=[])+)/g,ug=/[[.:#*]/,mg=/^(::slotted)/,tg=/(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/,sg=/(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/,pg=/(.*):dir\\((?:(ltr|rtl))\\)(.*)/,kg=/:(?:matches|any|-(?:webkit|moz)-any)/,U=new Yf;function wg(a,b,c,d,e){this.L=a||null;this.b=b||null;this.la=c||[];this.G=null;this.cssBuild=e||\"\";this.X=d||\"\";this.a=this.H=this.K=null}function V(a){return a?a.__styleInfo:null}function xg(a,b){return a.__styleInfo=b}wg.prototype.c=function(){return this.L};wg.prototype._getStyleRules=wg.prototype.c;function yg(a){var b=this.matches||this.matchesSelector||this.mozMatchesSelector||this.msMatchesSelector||this.oMatchesSelector||this.webkitMatchesSelector;return b&&b.call(this,a)}var zg=navigator.userAgent.match(\"Trident\");function Ag(){}function Bg(a){var b={},c=[],d=0;Jf(a,function(a){Cg(a);a.index=d++;a=a.A.cssText;for(var c;c=Df.exec(a);){var e=c[1];\":\"!==c[2]&&(b[e]=!0)}},function(a){c.push(a)});a.b=c;a=[];for(var e in b)a.push(e);return a}\nfunction Cg(a){if(!a.A){var b={},c={};Dg(a,c)&&(b.J=c,a.rules=null);b.cssText=a.parsedCssText.replace(Gf,\"\").replace(Bf,\"\");a.A=b}}function Dg(a,b){var c=a.A;if(c){if(c.J)return Object.assign(b,c.J),!0}else{c=a.parsedCssText;for(var d;a=Bf.exec(c);){d=(a[2]||a[3]).trim();if(\"inherit\"!==d||\"unset\"!==d)b[a[1].trim()]=d;d=!0}return d}}\nfunction Eg(a,b,c){b&&(b=0<=b.indexOf(\";\")?Fg(a,b,c):Rf(b,function(b,e,f,g){if(!e)return b+g;(e=Eg(a,c[e],c))&&\"initial\"!==e?\"apply-shim-inherit\"===e&&(e=\"inherit\"):e=Eg(a,c[f]||f,c)||f;return b+(e||\"\")+g}));return b&&b.trim()||\"\"}\nfunction Fg(a,b,c){b=b.split(\";\");for(var d=0,e,f;d<b.length;d++)if(e=b[d]){Cf.lastIndex=0;if(f=Cf.exec(e))e=Eg(a,c[f[1]],c);else if(f=e.indexOf(\":\"),-1!==f){var g=e.substring(f);g=g.trim();g=Eg(a,g,c)||g;e=e.substring(0,f)+g}b[d]=e&&e.lastIndexOf(\";\")===e.length-1?e.slice(0,-1):e||\"\"}return b.join(\";\")}\nfunction Gg(a,b){var c={},d=[];Jf(a,function(a){a.A||Cg(a);var e=a.C||a.parsedSelector;b&&a.A.J&&e&&yg.call(b,e)&&(Dg(a,c),a=a.index,e=parseInt(a/32,10),d[e]=(d[e]||0)|1<<a%32)},null,!0);return{J:c,key:d}}\nfunction Hg(a,b,c,d){b.A||Cg(b);if(b.A.J){var e=Uf(a);a=e.is;e=e.X;e=a?fg(a,e):\"html\";var f=b.parsedSelector,g=\":host > *\"===f||\"html\"===f,h=0===f.indexOf(\":host\")&&!g;\"shady\"===c&&(g=f===e+\" > *.\"+e||-1!==f.indexOf(\"html\"),h=!g&&0===f.indexOf(e));if(g||h)c=e,h&&(b.C||(b.C=gg(U,b,U.b,a?\".\"+a:\"\",e)),c=b.C||e),d({na:c,Oa:h,bb:g})}}function Ig(a,b,c){var d={},e={};Jf(b,function(b){Hg(a,b,c,function(c){yg.call(a._element||a,c.na)&&(c.Oa?Dg(b,d):Dg(b,e))})},null,!0);return{Ua:e,Ma:d}}\nfunction Jg(a,b,c,d){var e=Uf(b),f=fg(e.is,e.X),g=new RegExp(\"(?:^|[^.#[:])\"+(b.extends?\"\\\\\"+f.slice(0,-1)+\"\\\\]\":f)+\"($|[.:[\\\\s>+~])\"),h=V(b);e=h.L;h=h.cssBuild;var k=Kg(e,d);return dg(b,e,function(b){var e=\"\";b.A||Cg(b);b.A.cssText&&(e=Fg(a,b.A.cssText,c));b.cssText=e;if(!R&&!Lf(b)&&b.cssText){var h=e=b.cssText;null==b.ra&&(b.ra=Ef.test(e));if(b.ra)if(null==b.ba){b.ba=[];for(var l in k)h=k[l],h=h(e),e!==h&&(e=h,b.ba.push(l))}else{for(l=0;l<b.ba.length;++l)h=k[b.ba[l]],e=h(e);h=e}b.cssText=h;b.C=\nb.C||b.selector;e=\".\"+d;l=Vf(b.C);h=0;for(var v=l.length,x=void 0;h<v&&(x=l[h]);h++)l[h]=x.match(g)?x.replace(f,e):e+\" \"+x;b.selector=l.join(\",\")}},h)}function Kg(a,b){a=a.b;var c={};if(!R&&a)for(var d=0,e=a[d];d<a.length;e=a[++d]){var f=e,g=b;f.f=new RegExp(\"\\\\b\"+f.keyframesName+\"(?!\\\\B|-)\",\"g\");f.a=f.keyframesName+\"-\"+g;f.C=f.C||f.selector;f.selector=f.C.replace(f.keyframesName,f.a);c[e.keyframesName]=Lg(e)}return c}function Lg(a){return function(b){return b.replace(a.f,a.a)}}\nfunction Mg(a,b){var c=Ng,d=Kf(a);a.textContent=If(d,function(a){var d=a.cssText=a.parsedCssText;a.A&&a.A.cssText&&(d=d.replace(qf,\"\").replace(rf,\"\"),a.cssText=Fg(c,d,b))})}t.Object.defineProperties(Ag.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return\"x-scope\"}}});var Ng=new Ag;var Og={},Pg=window.customElements;if(Pg&&!R&&!zf){var Qg=Pg.define;Pg.define=function(a,b,c){Og[a]||(Og[a]=Pf(a));Qg.call(Pg,a,b,c)}};function Rg(){this.cache={}}Rg.prototype.store=function(a,b,c,d){var e=this.cache[a]||[];e.push({J:b,styleElement:c,H:d});100<e.length&&e.shift();this.cache[a]=e};function Sg(){}var Tg=new RegExp(U.a+\"\\\\s*([^\\\\s]*)\");function Ug(a){return(a=(a.classList&&a.classList.value?a.classList.value:a.getAttribute(\"class\")||\"\").match(Tg))?a[1]:\"\"}function Vg(a){var b=Tf(a).getRootNode();return b===a||b===a.ownerDocument?\"\":(a=b.host)?Uf(a).is:\"\"}\nfunction Wg(a){for(var b=0;b<a.length;b++){var c=a[b];if(c.target!==document.documentElement&&c.target!==document.head)for(var d=0;d<c.addedNodes.length;d++){var e=c.addedNodes[d];if(e.nodeType===Node.ELEMENT_NODE){var f=e.getRootNode(),g=Ug(e);if(g&&f===e.ownerDocument&&(\"style\"!==e.localName&&\"template\"!==e.localName||\"\"===Wf(e)))cg(e,g);else if(f instanceof ShadowRoot)for(f=Vg(e),f!==g&&bg(e,g,f),e=window.ShadyDOM.nativeMethods.querySelectorAll.call(e,\":not(.\"+U.a+\")\"),g=0;g<e.length;g++){f=e[g];\nvar h=Vg(f);h&&ag(f,h)}}}}}\nif(!(R||window.ShadyDOM&&window.ShadyDOM.handlesDynamicScoping)){var Xg=new MutationObserver(Wg),Yg=function(a){Xg.observe(a,{childList:!0,subtree:!0})};if(window.customElements&&!window.customElements.polyfillWrapFlushCallback)Yg(document);else{var Zg=function(){Yg(document.body)};window.HTMLImports?window.HTMLImports.whenReady(Zg):requestAnimationFrame(function(){if(\"loading\"===document.readyState){var a=function(){Zg();document.removeEventListener(\"readystatechange\",a)};document.addEventListener(\"readystatechange\",\na)}else Zg()})}Sg=function(){Wg(Xg.takeRecords())}}var $g=Sg;var ah={};var bh=Promise.resolve();function ch(a){if(a=ah[a])a._applyShimCurrentVersion=a._applyShimCurrentVersion||0,a._applyShimValidatingVersion=a._applyShimValidatingVersion||0,a._applyShimNextVersion=(a._applyShimNextVersion||0)+1}function dh(a){return a._applyShimCurrentVersion===a._applyShimNextVersion}function eh(a){a._applyShimValidatingVersion=a._applyShimNextVersion;a._validating||(a._validating=!0,bh.then(function(){a._applyShimCurrentVersion=a._applyShimNextVersion;a._validating=!1}))};var fh={},gh=new Rg;function W(){this.F={};this.c=document.documentElement;var a=new cf;a.rules=[];this.f=xg(this.c,new wg(a));this.u=!1;this.b=this.a=null}r=W.prototype;r.flush=function(){$g()};r.Ka=function(a){return Kf(a)};r.Ya=function(a){return If(a)};r.prepareTemplate=function(a,b,c){this.prepareTemplateDom(a,b);this.prepareTemplateStyles(a,b,c)};\nr.prepareTemplateStyles=function(a,b,c){if(!a._prepared&&!zf){R||Og[b]||(Og[b]=Pf(b));a._prepared=!0;a.name=b;a.extends=c;ah[b]=a;var d=Wf(a),e=Xf(d);c={is:b,extends:c};for(var f=[],g=a.content.querySelectorAll(\"style\"),h=0;h<g.length;h++){var k=g[h];if(k.hasAttribute(\"shady-unscoped\")){if(!R){var l=k.textContent;Hf.has(l)||(Hf.add(l),l=k.cloneNode(!0),document.head.appendChild(l));k.parentNode.removeChild(k)}}else f.push(k.textContent),k.parentNode.removeChild(k)}f=f.join(\"\").trim()+(fh[b]||\"\");\nhh(this);if(!e){if(g=!d)g=Cf.test(f)||Bf.test(f),Cf.lastIndex=0,Bf.lastIndex=0;h=df(f);g&&S&&this.a&&this.a.transformRules(h,b);a._styleAst=h}g=[];S||(g=Bg(a._styleAst));if(!g.length||S)h=R?a.content:null,b=Og[b]||null,d=dg(c,a._styleAst,null,d,e?f:\"\"),d=d.length?Mf(d,c.is,h,b):null,a._style=d;a.a=g}};r.Sa=function(a,b){fh[b]=a.join(\" \")};r.prepareTemplateDom=function(a,b){if(!zf){var c=Wf(a);R||\"shady\"===c||a._domPrepared||(a._domPrepared=!0,Zf(a.content,b))}};\nfunction ih(a){var b=Uf(a),c=b.is;b=b.X;var d=Og[c]||null,e=ah[c];if(e){c=e._styleAst;var f=e.a;e=Wf(e);b=new wg(c,d,f,b,e);xg(a,b);return b}}function jh(a){!a.b&&window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface&&(a.b=window.ShadyCSS.CustomStyleInterface,a.b.transformCallback=function(b){a.va(b)},a.b.validateCallback=function(){requestAnimationFrame(function(){(a.b.enqueued||a.u)&&a.flushCustomStyles()})})}\nfunction hh(a){!a.a&&window.ShadyCSS&&window.ShadyCSS.ApplyShim&&(a.a=window.ShadyCSS.ApplyShim,a.a.invalidCallback=ch);jh(a)}\nr.flushCustomStyles=function(){if(!zf&&(hh(this),this.b)){var a=this.b.processStyles();if(this.b.enqueued&&!Xf(this.f.cssBuild)){if(S){if(!this.f.cssBuild)for(var b=0;b<a.length;b++){var c=this.b.getStyleForCustomStyle(a[b]);if(c&&S&&this.a){var d=Kf(c);hh(this);this.a.transformRules(d);c.textContent=If(d)}}}else{kh(this,this.c,this.f);for(b=0;b<a.length;b++)(c=this.b.getStyleForCustomStyle(a[b]))&&Mg(c,this.f.K);this.u&&this.styleDocument()}this.b.enqueued=!1}}};\nr.styleElement=function(a,b){if(zf){if(b){V(a)||xg(a,new wg(null));var c=V(a);c.G=c.G||{};Object.assign(c.G,b);lh(this,a,c)}}else if(c=V(a)||ih(a))if(a!==this.c&&(this.u=!0),b&&(c.G=c.G||{},Object.assign(c.G,b)),S)lh(this,a,c);else if(this.flush(),kh(this,a,c),c.la&&c.la.length){b=Uf(a).is;var d;a:{if(d=gh.cache[b])for(var e=d.length-1;0<=e;e--){var f=d[e];b:{var g=c.la;for(var h=0;h<g.length;h++){var k=g[h];if(f.J[k]!==c.K[k]){g=!1;break b}}g=!0}if(g){d=f;break a}}d=void 0}g=d?d.styleElement:null;\ne=c.H;(f=d&&d.H)||(f=this.F[b]=(this.F[b]||0)+1,f=b+\"-\"+f);c.H=f;f=c.H;h=Ng;h=g?g.textContent||\"\":Jg(h,a,c.K,f);k=V(a);var l=k.a;l&&!R&&l!==g&&(l._useCount--,0>=l._useCount&&l.parentNode&&l.parentNode.removeChild(l));R?k.a?(k.a.textContent=h,g=k.a):h&&(g=Mf(h,f,a.shadowRoot,k.b)):g?g.parentNode||(zg&&-1<h.indexOf(\"@media\")&&(g.textContent=h),Nf(g,null,k.b)):h&&(g=Mf(h,f,null,k.b));g&&(g._useCount=g._useCount||0,k.a!=g&&g._useCount++,k.a=g);f=g;R||(g=c.H,k=h=a.getAttribute(\"class\")||\"\",e&&(k=h.replace(new RegExp(\"\\\\s*x-scope\\\\s*\"+\ne+\"\\\\s*\",\"g\"),\" \")),k+=(k?\" \":\"\")+\"x-scope \"+g,h!==k&&Sf(a,k));d||gh.store(b,c.K,f,c.H)}};\nfunction lh(a,b,c){var d=Uf(b).is;if(c.G){var e=c.G,f;for(f in e)null===f?b.style.removeProperty(f):b.style.setProperty(f,e[f])}e=ah[d];if(!(!e&&b!==a.c||e&&\"\"!==Wf(e))&&e&&e._style&&!dh(e)){if(dh(e)||e._applyShimValidatingVersion!==e._applyShimNextVersion)hh(a),a.a&&a.a.transformRules(e._styleAst,d),e._style.textContent=dg(b,c.L),eh(e);R&&(a=b.shadowRoot)&&(a=a.querySelector(\"style\"))&&(a.textContent=dg(b,c.L));c.L=e._styleAst}}\nfunction mh(a,b){return(b=Tf(b).getRootNode().host)?V(b)||ih(b)?b:mh(a,b):a.c}function kh(a,b,c){var d=mh(a,b),e=V(d),f=e.K;d===a.c||f||(kh(a,d,e),f=e.K);a=Object.create(f||null);d=Ig(b,c.L,c.cssBuild);b=Gg(e.L,b).J;Object.assign(a,d.Ma,b,d.Ua);b=c.G;for(var g in b)if((e=b[g])||0===e)a[g]=e;g=Ng;b=Object.getOwnPropertyNames(a);for(e=0;e<b.length;e++)d=b[e],a[d]=Eg(g,a[d],a);c.K=a}r.styleDocument=function(a){this.styleSubtree(this.c,a)};\nr.styleSubtree=function(a,b){var c=Tf(a),d=c.shadowRoot;(d||a===this.c)&&this.styleElement(a,b);if(a=d&&(d.children||d.childNodes))for(c=0;c<a.length;c++)this.styleSubtree(a[c]);else if(c=c.children||c.childNodes)for(a=0;a<c.length;a++)this.styleSubtree(c[a])};\nr.va=function(a){var b=this,c=Wf(a);c!==this.f.cssBuild&&(this.f.cssBuild=c);if(!Xf(c)){var d=Kf(a);Jf(d,function(a){if(R)vg(a);else{var d=U;a.selector=a.parsedSelector;vg(a);a.selector=a.C=gg(d,a,d.c,void 0,void 0)}S&&\"\"===c&&(hh(b),b.a&&b.a.transformRule(a))});S?a.textContent=If(d):this.f.L.rules.push(d)}};r.getComputedStyleValue=function(a,b){var c;S||(c=(V(a)||V(mh(this,a))).K[b]);return(c=c||window.getComputedStyle(a).getPropertyValue(b))?c.trim():\"\"};\nr.Xa=function(a,b){var c=Tf(a).getRootNode();b=b?b.split(/\\s/):[];c=c.host&&c.host.localName;if(!c){var d=a.getAttribute(\"class\");if(d){d=d.split(/\\s/);for(var e=0;e<d.length;e++)if(d[e]===U.a){c=d[e+1];break}}}c&&b.push(U.a,c);S||(c=V(a))&&c.H&&b.push(Ng.a,c.H);Sf(a,b.join(\" \"))};r.Fa=function(a){return V(a)};r.Wa=function(a,b){ag(a,b)};r.Za=function(a,b){ag(a,b,!0)};r.Va=function(a){return Vg(a)};r.Ia=function(a){return Ug(a)};W.prototype.flush=W.prototype.flush;W.prototype.prepareTemplate=W.prototype.prepareTemplate;\nW.prototype.styleElement=W.prototype.styleElement;W.prototype.styleDocument=W.prototype.styleDocument;W.prototype.styleSubtree=W.prototype.styleSubtree;W.prototype.getComputedStyleValue=W.prototype.getComputedStyleValue;W.prototype.setElementClass=W.prototype.Xa;W.prototype._styleInfoForNode=W.prototype.Fa;W.prototype.transformCustomStyleForDocument=W.prototype.va;W.prototype.getStyleAst=W.prototype.Ka;W.prototype.styleAstToString=W.prototype.Ya;W.prototype.flushCustomStyles=W.prototype.flushCustomStyles;\nW.prototype.scopeNode=W.prototype.Wa;W.prototype.unscopeNode=W.prototype.Za;W.prototype.scopeForNode=W.prototype.Va;W.prototype.currentScopeForNode=W.prototype.Ia;W.prototype.prepareAdoptedCssText=W.prototype.Sa;Object.defineProperties(W.prototype,{nativeShadow:{get:function(){return R}},nativeCss:{get:function(){return S}}});var Z=new W,nh,oh;window.ShadyCSS&&(nh=window.ShadyCSS.ApplyShim,oh=window.ShadyCSS.CustomStyleInterface);\nwindow.ShadyCSS={ScopingShim:Z,prepareTemplate:function(a,b,c){Z.flushCustomStyles();Z.prepareTemplate(a,b,c)},prepareTemplateDom:function(a,b){Z.prepareTemplateDom(a,b)},prepareTemplateStyles:function(a,b,c){Z.flushCustomStyles();Z.prepareTemplateStyles(a,b,c)},styleSubtree:function(a,b){Z.flushCustomStyles();Z.styleSubtree(a,b)},styleElement:function(a){Z.flushCustomStyles();Z.styleElement(a)},styleDocument:function(a){Z.flushCustomStyles();Z.styleDocument(a)},flushCustomStyles:function(){Z.flushCustomStyles()},\ngetComputedStyleValue:function(a,b){return Z.getComputedStyleValue(a,b)},nativeCss:S,nativeShadow:R,cssBuild:Af,disableRuntime:zf};nh&&(window.ShadyCSS.ApplyShim=nh);oh&&(window.ShadyCSS.CustomStyleInterface=oh);(function(a){function b(a){\"\"==a&&(f.call(this),this.i=!0);return a.toLowerCase()}function c(a){var b=a.charCodeAt(0);return 32<b&&127>b&&-1==[34,35,60,62,63,96].indexOf(b)?a:encodeURIComponent(a)}function d(a){var b=a.charCodeAt(0);return 32<b&&127>b&&-1==[34,35,60,62,96].indexOf(b)?a:encodeURIComponent(a)}function e(a,e,g){function h(a){X.push(a)}var k=e||\"scheme start\",x=0,p=\"\",v=!1,Q=!1,X=[];a:for(;(void 0!=a[x-1]||0==x)&&!this.i;){var m=a[x];switch(k){case \"scheme start\":if(m&&q.test(m))p+=m.toLowerCase(),\nk=\"scheme\";else if(e){h(\"Invalid scheme.\");break a}else{p=\"\";k=\"no scheme\";continue}break;case \"scheme\":if(m&&I.test(m))p+=m.toLowerCase();else if(\":\"==m){this.h=p;p=\"\";if(e)break a;void 0!==l[this.h]&&(this.B=!0);k=\"file\"==this.h?\"relative\":this.B&&g&&g.h==this.h?\"relative or authority\":this.B?\"authority first slash\":\"scheme data\"}else if(e){void 0!=m&&h(\"Code point not allowed in scheme: \"+m);break a}else{p=\"\";x=0;k=\"no scheme\";continue}break;case \"scheme data\":\"?\"==m?(this.o=\"?\",k=\"query\"):\"#\"==\nm?(this.v=\"#\",k=\"fragment\"):void 0!=m&&\"\\t\"!=m&&\"\\n\"!=m&&\"\\r\"!=m&&(this.ia+=c(m));break;case \"no scheme\":if(g&&void 0!==l[g.h]){k=\"relative\";continue}else h(\"Missing scheme.\"),f.call(this),this.i=!0;break;case \"relative or authority\":if(\"/\"==m&&\"/\"==a[x+1])k=\"authority ignore slashes\";else{h(\"Expected /, got: \"+m);k=\"relative\";continue}break;case \"relative\":this.B=!0;\"file\"!=this.h&&(this.h=g.h);if(void 0==m){this.j=g.j;this.m=g.m;this.l=g.l.slice();this.o=g.o;this.s=g.s;this.g=g.g;break a}else if(\"/\"==\nm||\"\\\\\"==m)\"\\\\\"==m&&h(\"\\\\ is an invalid code point.\"),k=\"relative slash\";else if(\"?\"==m)this.j=g.j,this.m=g.m,this.l=g.l.slice(),this.o=\"?\",this.s=g.s,this.g=g.g,k=\"query\";else if(\"#\"==m)this.j=g.j,this.m=g.m,this.l=g.l.slice(),this.o=g.o,this.v=\"#\",this.s=g.s,this.g=g.g,k=\"fragment\";else{k=a[x+1];var y=a[x+2];if(\"file\"!=this.h||!q.test(m)||\":\"!=k&&\"|\"!=k||void 0!=y&&\"/\"!=y&&\"\\\\\"!=y&&\"?\"!=y&&\"#\"!=y)this.j=g.j,this.m=g.m,this.s=g.s,this.g=g.g,this.l=g.l.slice(),this.l.pop();k=\"relative path\";continue}break;\ncase \"relative slash\":if(\"/\"==m||\"\\\\\"==m)\"\\\\\"==m&&h(\"\\\\ is an invalid code point.\"),k=\"file\"==this.h?\"file host\":\"authority ignore slashes\";else{\"file\"!=this.h&&(this.j=g.j,this.m=g.m,this.s=g.s,this.g=g.g);k=\"relative path\";continue}break;case \"authority first slash\":if(\"/\"==m)k=\"authority second slash\";else{h(\"Expected '/', got: \"+m);k=\"authority ignore slashes\";continue}break;case \"authority second slash\":k=\"authority ignore slashes\";if(\"/\"!=m){h(\"Expected '/', got: \"+m);continue}break;case \"authority ignore slashes\":if(\"/\"!=\nm&&\"\\\\\"!=m){k=\"authority\";continue}else h(\"Expected authority, got: \"+m);break;case \"authority\":if(\"@\"==m){v&&(h(\"@ already seen.\"),p+=\"%40\");v=!0;for(m=0;m<p.length;m++)y=p[m],\"\\t\"==y||\"\\n\"==y||\"\\r\"==y?h(\"Invalid whitespace in authority.\"):\":\"==y&&null===this.g?this.g=\"\":(y=c(y),null!==this.g?this.g+=y:this.s+=y);p=\"\"}else if(void 0==m||\"/\"==m||\"\\\\\"==m||\"?\"==m||\"#\"==m){x-=p.length;p=\"\";k=\"host\";continue}else p+=m;break;case \"file host\":if(void 0==m||\"/\"==m||\"\\\\\"==m||\"?\"==m||\"#\"==m){2!=p.length||\n!q.test(p[0])||\":\"!=p[1]&&\"|\"!=p[1]?(0!=p.length&&(this.j=b.call(this,p),p=\"\"),k=\"relative path start\"):k=\"relative path\";continue}else\"\\t\"==m||\"\\n\"==m||\"\\r\"==m?h(\"Invalid whitespace in file host.\"):p+=m;break;case \"host\":case \"hostname\":if(\":\"!=m||Q)if(void 0==m||\"/\"==m||\"\\\\\"==m||\"?\"==m||\"#\"==m){this.j=b.call(this,p);p=\"\";k=\"relative path start\";if(e)break a;continue}else\"\\t\"!=m&&\"\\n\"!=m&&\"\\r\"!=m?(\"[\"==m?Q=!0:\"]\"==m&&(Q=!1),p+=m):h(\"Invalid code point in host/hostname: \"+m);else if(this.j=b.call(this,\np),p=\"\",k=\"port\",\"hostname\"==e)break a;break;case \"port\":if(/[0-9]/.test(m))p+=m;else if(void 0==m||\"/\"==m||\"\\\\\"==m||\"?\"==m||\"#\"==m||e){\"\"!=p&&(p=parseInt(p,10),p!=l[this.h]&&(this.m=p+\"\"),p=\"\");if(e)break a;k=\"relative path start\";continue}else\"\\t\"==m||\"\\n\"==m||\"\\r\"==m?h(\"Invalid code point in port: \"+m):(f.call(this),this.i=!0);break;case \"relative path start\":\"\\\\\"==m&&h(\"'\\\\' not allowed in path.\");k=\"relative path\";if(\"/\"!=m&&\"\\\\\"!=m)continue;break;case \"relative path\":if(void 0!=m&&\"/\"!=m&&\"\\\\\"!=\nm&&(e||\"?\"!=m&&\"#\"!=m))\"\\t\"!=m&&\"\\n\"!=m&&\"\\r\"!=m&&(p+=c(m));else{\"\\\\\"==m&&h(\"\\\\ not allowed in relative path.\");if(y=n[p.toLowerCase()])p=y;\"..\"==p?(this.l.pop(),\"/\"!=m&&\"\\\\\"!=m&&this.l.push(\"\")):\".\"==p&&\"/\"!=m&&\"\\\\\"!=m?this.l.push(\"\"):\".\"!=p&&(\"file\"==this.h&&0==this.l.length&&2==p.length&&q.test(p[0])&&\"|\"==p[1]&&(p=p[0]+\":\"),this.l.push(p));p=\"\";\"?\"==m?(this.o=\"?\",k=\"query\"):\"#\"==m&&(this.v=\"#\",k=\"fragment\")}break;case \"query\":e||\"#\"!=m?void 0!=m&&\"\\t\"!=m&&\"\\n\"!=m&&\"\\r\"!=m&&(this.o+=d(m)):(this.v=\n\"#\",k=\"fragment\");break;case \"fragment\":void 0!=m&&\"\\t\"!=m&&\"\\n\"!=m&&\"\\r\"!=m&&(this.v+=m)}x++}}function f(){this.s=this.ia=this.h=\"\";this.g=null;this.m=this.j=\"\";this.l=[];this.v=this.o=\"\";this.B=this.i=!1}function g(a,b){void 0===b||b instanceof g||(b=new g(String(b)));this.a=a;f.call(this);a=this.a.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g,\"\");e.call(this,a,null,b)}var h=!1;try{var k=new URL(\"b\",\"http://a\");k.pathname=\"c%20d\";h=\"http://a/c%20d\"===k.href}catch(x){}if(!h){var l=Object.create(null);l.ftp=\n21;l.file=0;l.gopher=70;l.http=80;l.https=443;l.ws=80;l.wss=443;var n=Object.create(null);n[\"%2e\"]=\".\";n[\".%2e\"]=\"..\";n[\"%2e.\"]=\"..\";n[\"%2e%2e\"]=\"..\";var q=/[a-zA-Z]/,I=/[a-zA-Z0-9\\+\\-\\.]/;g.prototype={toString:function(){return this.href},get href(){if(this.i)return this.a;var a=\"\";if(\"\"!=this.s||null!=this.g)a=this.s+(null!=this.g?\":\"+this.g:\"\")+\"@\";return this.protocol+(this.B?\"//\"+a+this.host:\"\")+this.pathname+this.o+this.v},set href(a){f.call(this);e.call(this,a)},get protocol(){return this.h+\n\":\"},set protocol(a){this.i||e.call(this,a+\":\",\"scheme start\")},get host(){return this.i?\"\":this.m?this.j+\":\"+this.m:this.j},set host(a){!this.i&&this.B&&e.call(this,a,\"host\")},get hostname(){return this.j},set hostname(a){!this.i&&this.B&&e.call(this,a,\"hostname\")},get port(){return this.m},set port(a){!this.i&&this.B&&e.call(this,a,\"port\")},get pathname(){return this.i?\"\":this.B?\"/\"+this.l.join(\"/\"):this.ia},set pathname(a){!this.i&&this.B&&(this.l=[],e.call(this,a,\"relative path start\"))},get search(){return this.i||\n!this.o||\"?\"==this.o?\"\":this.o},set search(a){!this.i&&this.B&&(this.o=\"?\",\"?\"==a[0]&&(a=a.slice(1)),e.call(this,a,\"query\"))},get hash(){return this.i||!this.v||\"#\"==this.v?\"\":this.v},set hash(a){this.i||(a?(this.v=\"#\",\"#\"==a[0]&&(a=a.slice(1)),e.call(this,a,\"fragment\")):this.v=\"\")},get origin(){var a;if(this.i||!this.h)return\"\";switch(this.h){case \"data\":case \"file\":case \"javascript\":case \"mailto\":return\"null\"}return(a=this.host)?this.h+\"://\"+a:\"\"}};var v=a.URL;v&&(g.createObjectURL=function(a){return v.createObjectURL.apply(v,\narguments)},g.revokeObjectURL=function(a){v.revokeObjectURL(a)});a.URL=g}})(window);Object.getOwnPropertyDescriptor(Node.prototype,\"baseURI\")||Object.defineProperty(Node.prototype,\"baseURI\",{get:function(){var a=(this.ownerDocument||this).querySelector(\"base[href]\");return a&&a.href||window.location.href},configurable:!0,enumerable:!0});var ph=document.createElement(\"style\");ph.textContent=\"body {transition: opacity ease-in 0.2s; } \\nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \\n\";var qh=document.querySelector(\"head\");qh.insertBefore(ph,qh.firstChild);var rh=window.customElements,sh=!1,th=null;rh.polyfillWrapFlushCallback&&rh.polyfillWrapFlushCallback(function(a){th=a;sh&&a()});function uh(){window.HTMLTemplateElement.bootstrap&&window.HTMLTemplateElement.bootstrap(window.document);th&&th();sh=!0;window.WebComponents.ready=!0;document.dispatchEvent(new CustomEvent(\"WebComponentsReady\",{bubbles:!0}))}\n\"complete\"!==document.readyState?(window.addEventListener(\"load\",uh),window.addEventListener(\"DOMContentLoaded\",function(){window.removeEventListener(\"load\",uh);uh()})):uh();}).call(this);\n\n//# sourceMappingURL=webcomponents-bundle.js.map\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\n(function() {\n  'use strict';\n\n  /**\n   * Basic flow of the loader process\n   *\n   * There are 4 flows the loader can take when booting up\n   *\n   * - Synchronous script, no polyfills needed\n   *   - wait for `DOMContentLoaded`\n   *   - fire WCR event, as there could not be any callbacks passed to `waitFor`\n   *\n   * - Synchronous script, polyfills needed\n   *   - document.write the polyfill bundle\n   *   - wait on the `load` event of the bundle to batch Custom Element upgrades\n   *   - wait for `DOMContentLoaded`\n   *   - run callbacks passed to `waitFor`\n   *   - fire WCR event\n   *\n   * - Asynchronous script, no polyfills needed\n   *   - wait for `DOMContentLoaded`\n   *   - run callbacks passed to `waitFor`\n   *   - fire WCR event\n   *\n   * - Asynchronous script, polyfills needed\n   *   - Append the polyfill bundle script\n   *   - wait for `load` event of the bundle\n   *   - batch Custom Element Upgrades\n   *   - run callbacks pass to `waitFor`\n   *   - fire WCR event\n   */\n\n  var polyfillsLoaded = false;\n  var whenLoadedFns = [];\n  var allowUpgrades = false;\n  var flushFn;\n\n  function fireEvent() {\n    window.WebComponents.ready = true;\n    document.dispatchEvent(new CustomEvent('WebComponentsReady', { bubbles: true }));\n  }\n\n  function batchCustomElements() {\n    if (window.customElements && customElements.polyfillWrapFlushCallback) {\n      customElements.polyfillWrapFlushCallback(function (flushCallback) {\n        flushFn = flushCallback;\n        if (allowUpgrades) {\n          flushFn();\n        }\n      });\n    }\n  }\n\n  function asyncReady() {\n    batchCustomElements();\n    ready();\n  }\n\n  function ready() {\n    // bootstrap <template> elements before custom elements\n    if (window.HTMLTemplateElement && HTMLTemplateElement.bootstrap) {\n      HTMLTemplateElement.bootstrap(window.document);\n    }\n    polyfillsLoaded = true;\n    runWhenLoadedFns().then(fireEvent);\n  }\n\n  function runWhenLoadedFns() {\n    allowUpgrades = false;\n    var fnsMap = whenLoadedFns.map(function(fn) {\n      return fn instanceof Function ? fn() : fn;\n    });\n    whenLoadedFns = [];\n    return Promise.all(fnsMap).then(function() {\n      allowUpgrades = true;\n      flushFn && flushFn();\n    }).catch(function(err) {\n      console.error(err);\n    });\n  }\n\n  window.WebComponents = window.WebComponents || {};\n  window.WebComponents.ready = window.WebComponents.ready || false;\n  window.WebComponents.waitFor = window.WebComponents.waitFor || function(waitFn) {\n    if (!waitFn) {\n      return;\n    }\n    whenLoadedFns.push(waitFn);\n    if (polyfillsLoaded) {\n      runWhenLoadedFns();\n    }\n  };\n  window.WebComponents._batchCustomElements = batchCustomElements;\n\n  var name = 'webcomponents-loader.js';\n  // Feature detect which polyfill needs to be imported.\n  var polyfills = [];\n  if (!('attachShadow' in Element.prototype && 'getRootNode' in Element.prototype) ||\n    (window.ShadyDOM && window.ShadyDOM.force)) {\n    polyfills.push('sd');\n  }\n  if (!window.customElements || window.customElements.forcePolyfill) {\n    polyfills.push('ce');\n  }\n\n  var needsTemplate = (function() {\n    // no real <template> because no `content` property (IE and older browsers)\n    var t = document.createElement('template');\n    if (!('content' in t)) {\n      return true;\n    }\n    // broken doc fragment (older Edge)\n    if (!(t.content.cloneNode() instanceof DocumentFragment)) {\n      return true;\n    }\n    // broken <template> cloning (Edge up to at least version 17)\n    var t2 = document.createElement('template');\n    t2.content.appendChild(document.createElement('div'));\n    t.content.appendChild(t2);\n    var clone = t.cloneNode(true);\n    return (clone.content.childNodes.length === 0 ||\n        clone.content.firstChild.content.childNodes.length === 0);\n  })();\n\n  // NOTE: any browser that does not have template or ES6 features\n  // must load the full suite of polyfills.\n  if (!window.Promise || !Array.from || !window.URL || !window.Symbol || needsTemplate) {\n    polyfills = ['sd-ce-pf'];\n  }\n\n  if (polyfills.length) {\n    var url;\n    var polyfillFile = 'bundles/webcomponents-' + polyfills.join('-') + '.js';\n\n    // Load it from the right place.\n    if (window.WebComponents.root) {\n      url = window.WebComponents.root + polyfillFile;\n    } else {\n      var script = document.querySelector('script[src*=\"' + name +'\"]');\n      // Load it from the right place.\n      url = script.src.replace(name, polyfillFile);\n    }\n\n    var newScript = document.createElement('script');\n    newScript.src = url;\n    // if readyState is 'loading', this script is synchronous\n    if (document.readyState === 'loading') {\n      // make sure custom elements are batched whenever parser gets to the injected script\n      newScript.setAttribute('onload', 'window.WebComponents._batchCustomElements()');\n      document.write(newScript.outerHTML);\n      document.addEventListener('DOMContentLoaded', ready);\n    } else {\n      newScript.addEventListener('load', function () {\n        asyncReady();\n      });\n      newScript.addEventListener('error', function () {\n        throw new Error('Could not load polyfill bundle' + url);\n      });\n      document.head.appendChild(newScript);\n    }\n  } else {\n    // if readyState is 'complete', script is loaded imperatively on a spec-compliant browser, so just fire WCR\n    if (document.readyState === 'complete') {\n      polyfillsLoaded = true;\n      fireEvent();\n    } else {\n      // this script may come between DCL and load, so listen for both, and cancel load listener if DCL fires\n      window.addEventListener('load', ready);\n      window.addEventListener('DOMContentLoaded', function() {\n        window.removeEventListener('load', ready);\n        ready();\n      })\n    }\n  }\n})();\n","/*\n * International Telephone Input v16.0.2\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function(factory) {\n    var intlTelInput = factory(window, document);\n    if (typeof module === \"object\" && module.exports) module.exports = intlTelInput; else window.intlTelInput = intlTelInput;\n})(function(window, document, undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua and Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2 ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1 ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"Macedonia (FYROM) (Македонија)\", \"mk\", \"389\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"Saint Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Swaziland\", \"sz\", \"268\" ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null\n            };\n        }\n        \"use strict\";\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n        }\n        window.intlTelInputGlobals = {\n            getInstance: function getInstance(input) {\n                var id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {}\n        };\n        // these vars persist through all instances of the plugin\n        var id = 0;\n        var defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // if there is just a dial code in the input: remove it on blur\n            autoHideDialCode: true,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // modify the parentClass\n            customContainer: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n            hiddenInput: \"\",\n            // initial country\n            initialCountry: \"\",\n            // localized country names e.g. { 'de': 'Deutschland' }\n            localizedCountries: null,\n            // don't insert international dial codes\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list. defaults to united states and united kingdom\n            preferredCountries: [ \"us\", \"gb\" ],\n            // display the country dial code next to the selected flag so it's not part of the typed number\n            separateDialCode: false,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        var regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        // keep track of if the window.load event has fired as impossible to check after the fact\n        window.addEventListener(\"load\", function() {\n            // UPDATE: use a public static field so we can fudge it in the tests\n            window.intlTelInputGlobals.windowLoaded = true;\n        });\n        // utility function to iterate over an object. can't use Object.entries or native forEach because\n        // of IE11\n        var forEachProp = function forEachProp(obj, callback) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                callback(keys[i], obj[keys[i]]);\n            }\n        };\n        // run a method on each instance of the plugin\n        var forEachInstance = function forEachInstance(method) {\n            forEachProp(window.intlTelInputGlobals.instances, function(key) {\n                window.intlTelInputGlobals.instances[key][method]();\n            });\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        var Iti = /*#__PURE__*/\n        function() {\n            function Iti(input, options) {\n                var _this = this;\n                _classCallCheck(this, Iti);\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                // alternative to Object.assign, which isn't supported by IE11\n                var customOptions = options || {};\n                this.options = {};\n                forEachProp(defaults, function(key, value) {\n                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n                });\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _createClass(Iti, [ {\n                key: \"_init\",\n                value: function _init() {\n                    var _this2 = this;\n                    // if in nationalMode, disable options relating to dial codes\n                    if (this.options.nationalMode) this.options.autoHideDialCode = false;\n                    // if separateDialCode then doesn't make sense to A) insert dial code into input\n                    // (autoHideDialCode), and B) display national numbers (because we're displaying the country\n                    // dial code next to them)\n                    if (this.options.separateDialCode) {\n                        this.options.autoHideDialCode = this.options.nationalMode = false;\n                    }\n                    // we cannot just test screen size as some smartphones/website meta tags will report desktop\n                    // resolutions\n                    // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n                    // rest of these declarations\n                    // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n                    this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n                    if (this.isMobile) {\n                        // trigger the mobile dropdown css\n                        document.body.classList.add(\"iti-mobile\");\n                        // on mobile, we want a full screen dropdown, so we must append it to the body\n                        if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;\n                    }\n                    // these promises get resolved when their individual requests complete\n                    // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                    // complete\n                    if (typeof Promise !== \"undefined\") {\n                        var autoCountryPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveAutoCountryPromise = resolve;\n                            _this2.rejectAutoCountryPromise = reject;\n                        });\n                        var utilsScriptPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveUtilsScriptPromise = resolve;\n                            _this2.rejectUtilsScriptPromise = reject;\n                        });\n                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                    } else {\n                        // prevent errors when Promise doesn't exist\n                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};\n                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};\n                    }\n                    // in various situations there could be no country selected initially, but we need to be able\n                    // to assume this variable exists\n                    this.selectedCountryData = {};\n                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                    this._processCountryData();\n                    // generate the markup\n                    this._generateMarkup();\n                    // set the initial state of the input value and the selected flag\n                    this._setInitialState();\n                    // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\n                    this._initListeners();\n                    // utils script, and auto country\n                    this._initRequests();\n                }\n            }, {\n                key: \"_processCountryData\",\n                value: function _processCountryData() {\n                    // process onlyCountries or excludeCountries array if present\n                    this._processAllCountries();\n                    // process the countryCodes map\n                    this._processCountryCodes();\n                    // process the preferredCountries\n                    this._processPreferredCountries();\n                    // translate countries according to localizedCountries option\n                    if (this.options.localizedCountries) this._translateCountriesByLocale();\n                    // sort countries by name\n                    if (this.options.onlyCountries.length || this.options.localizedCountries) {\n                        this.countries.sort(this._countryNameSort);\n                    }\n                }\n            }, {\n                key: \"_addCountryCode\",\n                value: function _addCountryCode(iso2, dialCode, priority) {\n                    if (dialCode.length > this.dialCodeMaxLen) {\n                        this.dialCodeMaxLen = dialCode.length;\n                    }\n                    if (!this.countryCodes.hasOwnProperty(dialCode)) {\n                        this.countryCodes[dialCode] = [];\n                    }\n                    // bail if we already have this country for this dialCode\n                    for (var i = 0; i < this.countryCodes[dialCode].length; i++) {\n                        if (this.countryCodes[dialCode][i] === iso2) return;\n                    }\n                    // check for undefined as 0 is falsy\n                    var index = priority !== undefined ? priority : this.countryCodes[dialCode].length;\n                    this.countryCodes[dialCode][index] = iso2;\n                }\n            }, {\n                key: \"_processAllCountries\",\n                value: function _processAllCountries() {\n                    if (this.options.onlyCountries.length) {\n                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n                        });\n                    } else if (this.options.excludeCountries.length) {\n                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n                        });\n                    } else {\n                        this.countries = allCountries;\n                    }\n                }\n            }, {\n                key: \"_translateCountriesByLocale\",\n                value: function _translateCountriesByLocale() {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var iso = this.countries[i].iso2.toLowerCase();\n                        if (this.options.localizedCountries.hasOwnProperty(iso)) {\n                            this.countries[i].name = this.options.localizedCountries[iso];\n                        }\n                    }\n                }\n            }, {\n                key: \"_countryNameSort\",\n                value: function _countryNameSort(a, b) {\n                    return a.name.localeCompare(b.name);\n                }\n            }, {\n                key: \"_processCountryCodes\",\n                value: function _processCountryCodes() {\n                    this.dialCodeMaxLen = 0;\n                    this.countryCodes = {};\n                    // first: add dial codes\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        this._addCountryCode(c.iso2, c.dialCode, c.priority);\n                    }\n                    // next: add area codes\n                    // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                    // already in the map, so that we can access them, as each time we add an area code substring\n                    // to the map, we also need to include the \"root\" country's code, as that also matches\n                    for (var _i = 0; _i < this.countries.length; _i++) {\n                        var _c = this.countries[_i];\n                        // area codes\n                        if (_c.areaCodes) {\n                            var rootCountryCode = this.countryCodes[_c.dialCode][0];\n                            // for each area code\n                            for (var j = 0; j < _c.areaCodes.length; j++) {\n                                var areaCode = _c.areaCodes[j];\n                                // for each digit in the area code to add all partial matches as well\n                                for (var k = 1; k < areaCode.length; k++) {\n                                    var partialDialCode = _c.dialCode + areaCode.substr(0, k);\n                                    // start with the root country, as that also matches this dial code\n                                    this._addCountryCode(rootCountryCode, partialDialCode);\n                                    this._addCountryCode(_c.iso2, partialDialCode);\n                                }\n                                // add the full area code\n                                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_processPreferredCountries\",\n                value: function _processPreferredCountries() {\n                    this.preferredCountries = [];\n                    for (var i = 0; i < this.options.preferredCountries.length; i++) {\n                        var countryCode = this.options.preferredCountries[i].toLowerCase();\n                        var countryData = this._getCountryData(countryCode, false, true);\n                        if (countryData) this.preferredCountries.push(countryData);\n                    }\n                }\n            }, {\n                key: \"_createEl\",\n                value: function _createEl(name, attrs, container) {\n                    var el = document.createElement(name);\n                    if (attrs) forEachProp(attrs, function(key, value) {\n                        return el.setAttribute(key, value);\n                    });\n                    if (container) container.appendChild(el);\n                    return el;\n                }\n            }, {\n                key: \"_generateMarkup\",\n                value: function _generateMarkup() {\n                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                    // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)\n                    this.telInput.setAttribute(\"autocomplete\", \"off\");\n                    // containers (mostly for positioning)\n                    var parentClass = \"iti\";\n                    if (this.options.allowDropdown) parentClass += \" iti--allow-dropdown\";\n                    if (this.options.separateDialCode) parentClass += \" iti--separate-dial-code\";\n                    if (this.options.customContainer) {\n                        parentClass += \" \";\n                        parentClass += this.options.customContainer;\n                    }\n                    var wrapper = this._createEl(\"div\", {\n                        \"class\": parentClass\n                    });\n                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                    this.flagsContainer = this._createEl(\"div\", {\n                        \"class\": \"iti__flag-container\"\n                    }, wrapper);\n                    wrapper.appendChild(this.telInput);\n                    // selected flag (displayed to left of input)\n                    this.selectedFlag = this._createEl(\"div\", {\n                        \"class\": \"iti__selected-flag\",\n                        role: \"combobox\",\n                        \"aria-owns\": \"country-listbox\"\n                    }, this.flagsContainer);\n                    this.selectedFlagInner = this._createEl(\"div\", {\n                        \"class\": \"iti__flag\"\n                    }, this.selectedFlag);\n                    if (this.options.separateDialCode) {\n                        this.selectedDialCode = this._createEl(\"div\", {\n                            \"class\": \"iti__selected-dial-code\"\n                        }, this.selectedFlag);\n                    }\n                    if (this.options.allowDropdown) {\n                        // make element focusable and tab navigable\n                        this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                        this.dropdownArrow = this._createEl(\"div\", {\n                            \"class\": \"iti__arrow\"\n                        }, this.selectedFlag);\n                        // country dropdown: preferred countries, then divider, then all countries\n                        this.countryList = this._createEl(\"ul\", {\n                            \"class\": \"iti__country-list iti__hide\",\n                            id: \"country-listbox\",\n                            \"aria-expanded\": \"false\",\n                            role: \"listbox\"\n                        });\n                        if (this.preferredCountries.length) {\n                            this._appendListItems(this.preferredCountries, \"iti__preferred\");\n                            this._createEl(\"li\", {\n                                \"class\": \"iti__divider\",\n                                role: \"separator\",\n                                \"aria-disabled\": \"true\"\n                            }, this.countryList);\n                        }\n                        this._appendListItems(this.countries, \"iti__standard\");\n                        // create dropdownContainer markup\n                        if (this.options.dropdownContainer) {\n                            this.dropdown = this._createEl(\"div\", {\n                                \"class\": \"iti iti--container\"\n                            });\n                            this.dropdown.appendChild(this.countryList);\n                        } else {\n                            this.flagsContainer.appendChild(this.countryList);\n                        }\n                    }\n                    if (this.options.hiddenInput) {\n                        var hiddenInputName = this.options.hiddenInput;\n                        var name = this.telInput.getAttribute(\"name\");\n                        if (name) {\n                            var i = name.lastIndexOf(\"[\");\n                            // if input name contains square brackets, then give the hidden input the same name,\n                            // replacing the contents of the last set of brackets with the given hiddenInput name\n                            if (i !== -1) hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n                        }\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: hiddenInputName\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                }\n            }, {\n                key: \"_appendListItems\",\n                value: function _appendListItems(countries, className) {\n                    // we create so many DOM elements, it is faster to build a temp string\n                    // and then add everything to the DOM in one go at the end\n                    var tmp = \"\";\n                    // for each country\n                    for (var i = 0; i < countries.length; i++) {\n                        var c = countries[i];\n                        // open the list item\n                        tmp += \"<li class='iti__country \".concat(className, \"' tabIndex='-1' id='iti-item-\").concat(c.iso2, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"'>\");\n                        // add the flag\n                        tmp += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\");\n                        // and the country name and dial code\n                        tmp += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n                        tmp += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\");\n                        // close the list item\n                        tmp += \"</li>\";\n                    }\n                    this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n                }\n            }, {\n                key: \"_setInitialState\",\n                value: function _setInitialState() {\n                    var val = this.telInput.value;\n                    var dialCode = this._getDialCode(val);\n                    var isRegionlessNanp = this._isRegionlessNanp(val);\n                    var _this$options = this.options, initialCountry = _this$options.initialCountry, nationalMode = _this$options.nationalMode, autoHideDialCode = _this$options.autoHideDialCode, separateDialCode = _this$options.separateDialCode;\n                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                    // flag, else fall back to the default country\n                    if (dialCode && !isRegionlessNanp) {\n                        this._updateFlagFromNumber(val);\n                    } else if (initialCountry !== \"auto\") {\n                        // see if we should select a flag\n                        if (initialCountry) {\n                            this._setFlag(initialCountry.toLowerCase());\n                        } else {\n                            if (dialCode && isRegionlessNanp) {\n                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                                this._setFlag(\"us\");\n                            } else {\n                                // no dial code and no initialCountry, so default to first in list\n                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                                if (!val) {\n                                    this._setFlag(this.defaultCountry);\n                                }\n                            }\n                        }\n                        // if empty and no nationalMode and no autoHideDialCode then insert the default dial code\n                        if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {\n                            this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n                        }\n                    }\n                    // NOTE: if initialCountry is set to auto, that will be handled separately\n                    // format - note this wont be run after _updateDialCode as that's only called if no val\n                    if (val) this._updateValFromNumber(val);\n                }\n            }, {\n                key: \"_initListeners\",\n                value: function _initListeners() {\n                    this._initKeyListeners();\n                    if (this.options.autoHideDialCode) this._initBlurListeners();\n                    if (this.options.allowDropdown) this._initDropdownListeners();\n                    if (this.hiddenInput) this._initHiddenInputListener();\n                }\n            }, {\n                key: \"_initHiddenInputListener\",\n                value: function _initHiddenInputListener() {\n                    var _this3 = this;\n                    this._handleHiddenInputSubmit = function() {\n                        _this3.hiddenInput.value = _this3.getNumber();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n                }\n            }, {\n                key: \"_getClosestLabel\",\n                value: function _getClosestLabel() {\n                    var el = this.telInput;\n                    while (el && el.tagName !== \"LABEL\") {\n                        el = el.parentNode;\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_initDropdownListeners\",\n                value: function _initDropdownListeners() {\n                    var _this4 = this;\n                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                    // open the dropdown would then automatically trigger a 2nd click on the input which would\n                    // close it again\n                    this._handleLabelClick = function(e) {\n                        // if the dropdown is closed, then focus the input, else ignore the click\n                        if (_this4.countryList.classList.contains(\"iti__hide\")) _this4.telInput.focus(); else e.preventDefault();\n                    };\n                    var label = this._getClosestLabel();\n                    if (label) label.addEventListener(\"click\", this._handleLabelClick);\n                    // toggle country dropdown on click\n                    this._handleClickSelectedFlag = function() {\n                        // only intercept this event if we're opening the dropdown\n                        // else let it bubble up to the top (\"click-off-to-close\" listener)\n                        // we cannot just stopPropagation as it may be needed to close another instance\n                        if (_this4.countryList.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n                            _this4._showDropdown();\n                        }\n                    };\n                    this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                    // open dropdown list if currently focused\n                    this._handleFlagsContainerKeydown = function(e) {\n                        var isDropdownHidden = _this4.countryList.classList.contains(\"iti__hide\");\n                        if (isDropdownHidden && [ \"ArrowUp\", \"ArrowDown\", \" \", \"Enter\" ].indexOf(e.key) !== -1) {\n                            // prevent form from being submitted if \"ENTER\" was pressed\n                            e.preventDefault();\n                            // prevent event from being handled again by document\n                            e.stopPropagation();\n                            _this4._showDropdown();\n                        }\n                        // allow navigation from dropdown to input on TAB\n                        if (e.key === \"Tab\") _this4._closeDropdown();\n                    };\n                    this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                }\n            }, {\n                key: \"_initRequests\",\n                value: function _initRequests() {\n                    var _this5 = this;\n                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                    if (this.options.utilsScript && !window.intlTelInputUtils) {\n                        // if the plugin is being initialised after the window.load event has already been fired\n                        if (window.intlTelInputGlobals.windowLoaded) {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        } else {\n                            // wait until the load event so we don't block any other requests e.g. the flags image\n                            window.addEventListener(\"load\", function() {\n                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n                            });\n                        }\n                    } else this.resolveUtilsScriptPromise();\n                    if (this.options.initialCountry === \"auto\") this._loadAutoCountry(); else this.resolveAutoCountryPromise();\n                }\n            }, {\n                key: \"_loadAutoCountry\",\n                value: function _loadAutoCountry() {\n                    // 3 options:\n                    // 1) already loaded (we're done)\n                    // 2) not already started loading (start)\n                    // 3) already started loading (do nothing - just wait for loading callback to fire)\n                    if (window.intlTelInputGlobals.autoCountry) {\n                        this.handleAutoCountry();\n                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                        // don't do this twice!\n                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                        if (typeof this.options.geoIpLookup === \"function\") {\n                            this.options.geoIpLookup(function(countryCode) {\n                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(function() {\n                                    return forEachInstance(\"handleAutoCountry\");\n                                });\n                            }, function() {\n                                return forEachInstance(\"rejectAutoCountryPromise\");\n                            });\n                        }\n                    }\n                }\n            }, {\n                key: \"_initKeyListeners\",\n                value: function _initKeyListeners() {\n                    var _this6 = this;\n                    // update flag on keyup\n                    this._handleKeyupEvent = function() {\n                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n                            _this6._triggerCountryChange();\n                        }\n                    };\n                    this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n                    // update flag on cut/paste events (now supported in all major browsers)\n                    this._handleClipboardEvent = function() {\n                        // hack because \"paste\" event is fired before input is updated\n                        setTimeout(_this6._handleKeyupEvent);\n                    };\n                    this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n                }\n            }, {\n                key: \"_cap\",\n                value: function _cap(number) {\n                    var max = this.telInput.getAttribute(\"maxlength\");\n                    return max && number.length > max ? number.substr(0, max) : number;\n                }\n            }, {\n                key: \"_initBlurListeners\",\n                value: function _initBlurListeners() {\n                    var _this7 = this;\n                    // on blur or form submit: if just a dial code then remove it\n                    this._handleSubmitOrBlurEvent = function() {\n                        _this7._removeEmptyDialCode();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                    this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                }\n            }, {\n                key: \"_removeEmptyDialCode\",\n                value: function _removeEmptyDialCode() {\n                    if (this.telInput.value.charAt(0) === \"+\") {\n                        var numeric = this._getNumeric(this.telInput.value);\n                        // if just a plus, or if just a dial code\n                        if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                            this.telInput.value = \"\";\n                        }\n                    }\n                }\n            }, {\n                key: \"_getNumeric\",\n                value: function _getNumeric(s) {\n                    return s.replace(/\\D/g, \"\");\n                }\n            }, {\n                key: \"_trigger\",\n                value: function _trigger(name) {\n                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n                    var e = document.createEvent(\"Event\");\n                    e.initEvent(name, true, true);\n                    // can bubble, and is cancellable\n                    this.telInput.dispatchEvent(e);\n                }\n            }, {\n                key: \"_showDropdown\",\n                value: function _showDropdown() {\n                    this.countryList.classList.remove(\"iti__hide\");\n                    this.countryList.setAttribute(\"aria-expanded\", \"true\");\n                    this._setDropdownPosition();\n                    // update highlighting and scroll to active list item\n                    if (this.activeItem) {\n                        this._highlightListItem(this.activeItem, false);\n                        this._scrollTo(this.activeItem, true);\n                    }\n                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                    this._bindDropdownListeners();\n                    // update the arrow\n                    this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                    this._trigger(\"open:countrydropdown\");\n                }\n            }, {\n                key: \"_toggleClass\",\n                value: function _toggleClass(el, className, shouldHaveClass) {\n                    if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className); else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);\n                }\n            }, {\n                key: \"_setDropdownPosition\",\n                value: function _setDropdownPosition() {\n                    var _this8 = this;\n                    if (this.options.dropdownContainer) {\n                        this.options.dropdownContainer.appendChild(this.dropdown);\n                    }\n                    if (!this.isMobile) {\n                        var pos = this.telInput.getBoundingClientRect();\n                        // windowTop from https://stackoverflow.com/a/14384091/217866\n                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                        var inputTop = pos.top + windowTop;\n                        var dropdownHeight = this.countryList.offsetHeight;\n                        // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                        // by default, the dropdown will be below the input. If we want to position it above the\n                        // input, we add the dropup class.\n                        this._toggleClass(this.countryList, \"iti__country-list--dropup\", !dropdownFitsBelow && dropdownFitsAbove);\n                        // if dropdownContainer is enabled, calculate postion\n                        if (this.options.dropdownContainer) {\n                            // by default the dropdown will be directly over the input because it's not in the flow.\n                            // If we want to position it below, we need to add some extra top value.\n                            var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;\n                            // calculate placement\n                            this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n                            this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n                            // close menu on window scroll\n                            this._handleWindowScroll = function() {\n                                return _this8._closeDropdown();\n                            };\n                            window.addEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                    }\n                }\n            }, {\n                key: \"_getClosestListItem\",\n                value: function _getClosestListItem(target) {\n                    var el = target;\n                    while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n                        el = el.parentNode;\n                    }\n                    // if we reached the countryList element, then return null\n                    return el === this.countryList ? null : el;\n                }\n            }, {\n                key: \"_bindDropdownListeners\",\n                value: function _bindDropdownListeners() {\n                    var _this9 = this;\n                    // when mouse over a list item, just highlight that one\n                    // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                    this._handleMouseoverCountryList = function(e) {\n                        // handle event delegation, as we're listening for this event on the countryList\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._highlightListItem(listItem, false);\n                    };\n                    this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    // listen for country selection\n                    this._handleClickCountryList = function(e) {\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._selectListItem(listItem);\n                    };\n                    this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                    // click off to close\n                    // (except when this initial opening click is bubbling up)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    var isOpening = true;\n                    this._handleClickOffToClose = function() {\n                        if (!isOpening) _this9._closeDropdown();\n                        isOpening = false;\n                    };\n                    document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                    // listen for up/down scrolling, enter to select, or letters to jump to country name.\n                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                    // just hit down and hold it to scroll down (no keyup event).\n                    // listen on the document because that's where key events are triggered if no input has focus\n                    var query = \"\";\n                    var queryTimer = null;\n                    this._handleKeydownOnDropdown = function(e) {\n                        // prevent down key from scrolling the whole page,\n                        // and enter key from submitting a form etc\n                        e.preventDefault();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") _this9._handleUpDownKey(e.key); else if (e.key === \"Enter\") _this9._handleEnterKey(); else if (e.key === \"Escape\") _this9._closeDropdown(); else if (/^[a-zA-ZÀ-ÿ ]$/.test(e.key)) {\n                            // jump to countries that start with the query string\n                            if (queryTimer) clearTimeout(queryTimer);\n                            query += e.key.toLowerCase();\n                            _this9._searchForCountry(query);\n                            // if the timer hits 1 second, reset the query\n                            queryTimer = setTimeout(function() {\n                                query = \"\";\n                            }, 1e3);\n                        }\n                    };\n                    document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                }\n            }, {\n                key: \"_handleUpDownKey\",\n                value: function _handleUpDownKey(key) {\n                    var next = key === \"ArrowUp\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                    if (next) {\n                        // skip the divider\n                        if (next.classList.contains(\"iti__divider\")) {\n                            next = key === \"ArrowUp\" ? next.previousElementSibling : next.nextElementSibling;\n                        }\n                        this._highlightListItem(next, true);\n                    }\n                }\n            }, {\n                key: \"_handleEnterKey\",\n                value: function _handleEnterKey() {\n                    if (this.highlightedItem) this._selectListItem(this.highlightedItem);\n                }\n            }, {\n                key: \"_searchForCountry\",\n                value: function _searchForCountry(query) {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        if (this._startsWith(this.countries[i].name, query)) {\n                            var listItem = this.countryList.querySelector(\"#iti-item-\".concat(this.countries[i].iso2));\n                            // update highlighting and scroll\n                            this._highlightListItem(listItem, false);\n                            this._scrollTo(listItem, true);\n                            break;\n                        }\n                    }\n                }\n            }, {\n                key: \"_startsWith\",\n                value: function _startsWith(a, b) {\n                    return a.substr(0, b.length).toLowerCase() === b;\n                }\n            }, {\n                key: \"_updateValFromNumber\",\n                value: function _updateValFromNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                        var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== \"+\");\n                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n                        var format = useNational ? NATIONAL : INTERNATIONAL;\n                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                    }\n                    number = this._beforeSetNumber(number);\n                    this.telInput.value = number;\n                }\n            }, {\n                key: \"_updateFlagFromNumber\",\n                value: function _updateFlagFromNumber(originalNumber) {\n                    // if we're in nationalMode and we already have US/Canada selected, make sure the number starts\n                    // with a +1 so _getDialCode will be able to extract the area code\n                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                    // from the number), that means we're initialising the plugin with a number that already has a\n                    // dial code, so fine to ignore this bit\n                    var number = originalNumber;\n                    var selectedDialCode = this.selectedCountryData.dialCode;\n                    var isNanp = selectedDialCode === \"1\";\n                    if (number && this.options.nationalMode && isNanp && number.charAt(0) !== \"+\") {\n                        if (number.charAt(0) !== \"1\") number = \"1\".concat(number);\n                        number = \"+\".concat(number);\n                    }\n                    // update flag if user types area code for another country\n                    if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                        number = \"+\".concat(selectedDialCode).concat(number);\n                    }\n                    // try and extract valid dial code from input\n                    var dialCode = this._getDialCode(number);\n                    var numeric = this._getNumeric(number);\n                    var countryCode = null;\n                    if (dialCode) {\n                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n                        // check if the right country is already selected. this should be false if the number is\n                        // longer than the matched dial code because in this case we need to make sure that if\n                        // there are multiple country matches, that the first one is selected (note: we could\n                        // just check that here, but it requires the same loop that we already have later)\n                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                        var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                        // only update the flag if:\n                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                        // AND\n                        // B) the right country is not already selected\n                        if (!isRegionlessNanpNumber && !alreadySelected) {\n                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n                            // non-empty index\n                            for (var j = 0; j < countryCodes.length; j++) {\n                                if (countryCodes[j]) {\n                                    countryCode = countryCodes[j];\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (number.charAt(0) === \"+\" && numeric.length) {\n                        // invalid dial code, so empty\n                        // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                        // bad chars\n                        countryCode = \"\";\n                    } else if (!number || number === \"+\") {\n                        // empty, or just a plus, so default\n                        countryCode = this.defaultCountry;\n                    }\n                    if (countryCode !== null) {\n                        return this._setFlag(countryCode);\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_isRegionlessNanp\",\n                value: function _isRegionlessNanp(number) {\n                    var numeric = this._getNumeric(number);\n                    if (numeric.charAt(0) === \"1\") {\n                        var areaCode = numeric.substr(1, 3);\n                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_highlightListItem\",\n                value: function _highlightListItem(listItem, shouldFocus) {\n                    var prevItem = this.highlightedItem;\n                    if (prevItem) prevItem.classList.remove(\"iti__highlight\");\n                    this.highlightedItem = listItem;\n                    this.highlightedItem.classList.add(\"iti__highlight\");\n                    if (shouldFocus) this.highlightedItem.focus();\n                }\n            }, {\n                key: \"_getCountryData\",\n                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n                    for (var i = 0; i < countryList.length; i++) {\n                        if (countryList[i].iso2 === countryCode) {\n                            return countryList[i];\n                        }\n                    }\n                    if (allowFail) {\n                        return null;\n                    }\n                    throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n                }\n            }, {\n                key: \"_setFlag\",\n                value: function _setFlag(countryCode) {\n                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                    // do this first as it will throw an error and stop if countryCode is invalid\n                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n                    // update the defaultCountry - we only need the iso2 from now on, so just store that\n                    if (this.selectedCountryData.iso2) {\n                        this.defaultCountry = this.selectedCountryData.iso2;\n                    }\n                    this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode));\n                    // update the selected country's title attribute\n                    var title = countryCode ? \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode) : \"Unknown\";\n                    this.selectedFlag.setAttribute(\"title\", title);\n                    if (this.options.separateDialCode) {\n                        var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n                        this.selectedDialCode.innerHTML = dialCode;\n                        // offsetWidth is zero if input is in a hidden container during initialisation\n                        var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                        // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                        this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n                    }\n                    // and the input's placeholder\n                    this._updatePlaceholder();\n                    // update the active list item\n                    if (this.options.allowDropdown) {\n                        var prevItem = this.activeItem;\n                        if (prevItem) {\n                            prevItem.classList.remove(\"iti__active\");\n                            prevItem.setAttribute(\"aria-selected\", \"false\");\n                        }\n                        if (countryCode) {\n                            var nextItem = this.countryList.querySelector(\"#iti-item-\".concat(countryCode));\n                            nextItem.setAttribute(\"aria-selected\", \"true\");\n                            nextItem.classList.add(\"iti__active\");\n                            this.activeItem = nextItem;\n                            this.countryList.setAttribute(\"aria-activedescendant\", nextItem.getAttribute(\"id\"));\n                        }\n                    }\n                    // return if the flag has changed or not\n                    return prevCountry.iso2 !== countryCode;\n                }\n            }, {\n                key: \"_getHiddenSelectedFlagWidth\",\n                value: function _getHiddenSelectedFlagWidth() {\n                    // to get the right styling to apply, all we need is a shallow clone of the container,\n                    // and then to inject a deep clone of the selectedFlag element\n                    var containerClone = this.telInput.parentNode.cloneNode();\n                    containerClone.style.visibility = \"hidden\";\n                    document.body.appendChild(containerClone);\n                    var selectedFlagClone = this.selectedFlag.cloneNode(true);\n                    containerClone.appendChild(selectedFlagClone);\n                    var width = selectedFlagClone.offsetWidth;\n                    containerClone.parentNode.removeChild(containerClone);\n                    return width;\n                }\n            }, {\n                key: \"_updatePlaceholder\",\n                value: function _updatePlaceholder() {\n                    var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n                    if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n                        placeholder = this._beforeSetNumber(placeholder);\n                        if (typeof this.options.customPlaceholder === \"function\") {\n                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n                        }\n                        this.telInput.setAttribute(\"placeholder\", placeholder);\n                    }\n                }\n            }, {\n                key: \"_selectListItem\",\n                value: function _selectListItem(listItem) {\n                    // update selected flag and active list item\n                    var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n                    this._closeDropdown();\n                    this._updateDialCode(listItem.getAttribute(\"data-dial-code\"), true);\n                    // focus the input\n                    this.telInput.focus();\n                    // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto\n                    // inserting dial code), who try to put the cursor at the beginning the first time\n                    var len = this.telInput.value.length;\n                    this.telInput.setSelectionRange(len, len);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"_closeDropdown\",\n                value: function _closeDropdown() {\n                    this.countryList.classList.add(\"iti__hide\");\n                    this.countryList.setAttribute(\"aria-expanded\", \"false\");\n                    // update the arrow\n                    this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                    // unbind key events\n                    document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                    this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                    // remove menu from container\n                    if (this.options.dropdownContainer) {\n                        if (!this.isMobile) window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                        if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);\n                    }\n                    this._trigger(\"close:countrydropdown\");\n                }\n            }, {\n                key: \"_scrollTo\",\n                value: function _scrollTo(element, middle) {\n                    var container = this.countryList;\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                    var containerHeight = container.offsetHeight;\n                    var containerTop = container.getBoundingClientRect().top + windowTop;\n                    var containerBottom = containerTop + containerHeight;\n                    var elementHeight = element.offsetHeight;\n                    var elementTop = element.getBoundingClientRect().top + windowTop;\n                    var elementBottom = elementTop + elementHeight;\n                    var newScrollTop = elementTop - containerTop + container.scrollTop;\n                    var middleOffset = containerHeight / 2 - elementHeight / 2;\n                    if (elementTop < containerTop) {\n                        // scroll up\n                        if (middle) newScrollTop -= middleOffset;\n                        container.scrollTop = newScrollTop;\n                    } else if (elementBottom > containerBottom) {\n                        // scroll down\n                        if (middle) newScrollTop += middleOffset;\n                        var heightDifference = containerHeight - elementHeight;\n                        container.scrollTop = newScrollTop - heightDifference;\n                    }\n                }\n            }, {\n                key: \"_updateDialCode\",\n                value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {\n                    var inputVal = this.telInput.value;\n                    // save having to pass this every time\n                    var newDialCode = \"+\".concat(newDialCodeBare);\n                    var newNumber;\n                    if (inputVal.charAt(0) === \"+\") {\n                        // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)\n                        var prevDialCode = this._getDialCode(inputVal);\n                        if (prevDialCode) {\n                            // current number contains a valid dial code, so replace it\n                            newNumber = inputVal.replace(prevDialCode, newDialCode);\n                        } else {\n                            // current number contains an invalid dial code, so ditch it\n                            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                            newNumber = newDialCode;\n                        }\n                    } else if (this.options.nationalMode || this.options.separateDialCode) {\n                        // don't do anything\n                        return;\n                    } else {\n                        // nationalMode is disabled\n                        if (inputVal) {\n                            // there is an existing value with no dial code: prefix the new dial code\n                            newNumber = newDialCode + inputVal;\n                        } else if (hasSelectedListItem || !this.options.autoHideDialCode) {\n                            // no existing value and either they've just selected a list item, or autoHideDialCode is\n                            // disabled: insert new dial code\n                            newNumber = newDialCode;\n                        } else {\n                            return;\n                        }\n                    }\n                    this.telInput.value = newNumber;\n                }\n            }, {\n                key: \"_getDialCode\",\n                value: function _getDialCode(number) {\n                    var dialCode = \"\";\n                    // only interested in international numbers (starting with a plus)\n                    if (number.charAt(0) === \"+\") {\n                        var numericChars = \"\";\n                        // iterate over chars\n                        for (var i = 0; i < number.length; i++) {\n                            var c = number.charAt(i);\n                            // if char is number (https://stackoverflow.com/a/8935649/217866)\n                            if (!isNaN(parseInt(c, 10))) {\n                                numericChars += c;\n                                // if current numericChars make a valid dial code\n                                if (this.countryCodes[numericChars]) {\n                                    // store the actual raw string (useful for matching later)\n                                    dialCode = number.substr(0, i + 1);\n                                }\n                                if (numericChars.length === this.dialCodeMaxLen) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return dialCode;\n                }\n            }, {\n                key: \"_getFullNumber\",\n                value: function _getFullNumber() {\n                    var val = this.telInput.value.trim();\n                    var dialCode = this.selectedCountryData.dialCode;\n                    var prefix;\n                    var numericVal = this._getNumeric(val);\n                    if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                        // when using separateDialCode, it is visible so is effectively part of the typed number\n                        prefix = \"+\".concat(dialCode);\n                    } else {\n                        prefix = \"\";\n                    }\n                    return prefix + val;\n                }\n            }, {\n                key: \"_beforeSetNumber\",\n                value: function _beforeSetNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.separateDialCode) {\n                        var dialCode = this._getDialCode(number);\n                        // if there is a valid dial code\n                        if (dialCode) {\n                            // in case _getDialCode returned an area code as well\n                            dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n                            // a lot of numbers will have a space separating the dial code and the main number, and\n                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                            // rid of it\n                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                            var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                            number = number.substr(start);\n                        }\n                    }\n                    return this._cap(number);\n                }\n            }, {\n                key: \"_triggerCountryChange\",\n                value: function _triggerCountryChange() {\n                    this._trigger(\"countrychange\");\n                }\n            }, {\n                key: \"handleAutoCountry\",\n                value: function handleAutoCountry() {\n                    if (this.options.initialCountry === \"auto\") {\n                        // we must set this even if there is an initial val in the input: in case the initial val is\n                        // invalid and they delete it - they should see their auto country\n                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                        // if there's no initial value in the input, then update the flag\n                        if (!this.telInput.value) {\n                            this.setCountry(this.defaultCountry);\n                        }\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"handleUtils\",\n                value: function handleUtils() {\n                    // if the request was successful\n                    if (window.intlTelInputUtils) {\n                        // if there's an initial value in the input, then format it\n                        if (this.telInput.value) {\n                            this._updateValFromNumber(this.telInput.value);\n                        }\n                        this._updatePlaceholder();\n                    }\n                    this.resolveUtilsScriptPromise();\n                }\n            }, {\n                key: \"destroy\",\n                value: function destroy() {\n                    var form = this.telInput.form;\n                    if (this.options.allowDropdown) {\n                        // make sure the dropdown is closed (and unbind listeners)\n                        this._closeDropdown();\n                        this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                        this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                        // label click hack\n                        var label = this._getClosestLabel();\n                        if (label) label.removeEventListener(\"click\", this._handleLabelClick);\n                    }\n                    // unbind hiddenInput listeners\n                    if (this.hiddenInput && form) form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    // unbind autoHideDialCode listeners\n                    if (this.options.autoHideDialCode) {\n                        if (form) form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                        this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                    }\n                    // unbind key events, and cut/paste events\n                    this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n                    this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n                    // remove attribute of id instance: data-intl-tel-input-id\n                    this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                    // remove markup (but leave the original input)\n                    var wrapper = this.telInput.parentNode;\n                    wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                    delete window.intlTelInputGlobals.instances[this.id];\n                }\n            }, {\n                key: \"getExtension\",\n                value: function getExtension() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumber\",\n                value: function getNumber(format) {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumberType\",\n                value: function getNumberType() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"getSelectedCountryData\",\n                value: function getSelectedCountryData() {\n                    return this.selectedCountryData;\n                }\n            }, {\n                key: \"getValidationError\",\n                value: function getValidationError() {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"isValidNumber\",\n                value: function isValidNumber() {\n                    var val = this._getFullNumber().trim();\n                    var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\";\n                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;\n                }\n            }, {\n                key: \"setCountry\",\n                value: function setCountry(originalCountryCode) {\n                    var countryCode = originalCountryCode.toLowerCase();\n                    // check if already selected\n                    if (!this.selectedFlagInner.classList.contains(\"iti__\".concat(countryCode))) {\n                        this._setFlag(countryCode);\n                        this._updateDialCode(this.selectedCountryData.dialCode, false);\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setNumber\",\n                value: function setNumber(number) {\n                    // we must update the flag first, which updates this.selectedCountryData, which is used for\n                    // formatting the number before displaying it\n                    var flagChanged = this._updateFlagFromNumber(number);\n                    this._updateValFromNumber(number);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setPlaceholderNumberType\",\n                value: function setPlaceholderNumberType(type) {\n                    this.options.placeholderNumberType = type;\n                    this._updatePlaceholder();\n                }\n            } ]);\n            return Iti;\n        }();\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        window.intlTelInputGlobals.getCountryData = function() {\n            return allCountries;\n        };\n        // inject a <script> element to load utils.js\n        var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n            // inject a new script element into the page\n            var script = document.createElement(\"script\");\n            script.onload = function() {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) handleSuccess();\n            };\n            script.onerror = function() {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) handleFailure();\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        window.intlTelInputGlobals.loadUtils = function(path) {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                // if we have promises, then return a promise\n                if (typeof Promise !== \"undefined\") {\n                    return new Promise(function(resolve, reject) {\n                        return injectScript(path, resolve, reject);\n                    });\n                }\n                injectScript(path);\n            }\n            return null;\n        };\n        // default options\n        window.intlTelInputGlobals.defaults = defaults;\n        // version\n        window.intlTelInputGlobals.version = \"16.0.2\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});","/**\n * Exposing intl-tel-input as a component\n */\nmodule.exports = require(\"./build/js/intlTelInput\");\n","// Composited file - DO NOT EDIT\n//----------------------------------------------------------------------\n//\n// ECMAScript 5 Polyfills\n//\n//----------------------------------------------------------------------\n\n//----------------------------------------------------------------------\n// ES5 15.2 Object Objects\n//----------------------------------------------------------------------\n\n//\n// ES5 15.2.3 Properties of the Object Constructor\n//\n\n// ES5 15.2.3.2 Object.getPrototypeOf ( O )\n// From http://ejohn.org/blog/objectgetprototypeof/\n// NOTE: won't work for typical function T() {}; T.prototype = {}; new T; case\n// since the constructor property is destroyed.\nif (!Object.getPrototypeOf) {\n  Object.getPrototypeOf = function (o) {\n    if (o !== Object(o)) { throw TypeError(\"Object.getPrototypeOf called on non-object\"); }\n    return o.__proto__ || o.constructor.prototype || Object.prototype;\n  };\n}\n\n//    // ES5 15.2.3.3 Object.getOwnPropertyDescriptor ( O, P )\n//    if (typeof Object.getOwnPropertyDescriptor !== \"function\") {\n//        Object.getOwnPropertyDescriptor = function (o, name) {\n//            if (o !== Object(o)) { throw TypeError(); }\n//            if (o.hasOwnProperty(name)) {\n//                return {\n//                    value: o[name],\n//                    enumerable: true,\n//                    writable: true,\n//                    configurable: true\n//                };\n//            }\n//        };\n//    }\n\n// ES5 15.2.3.4 Object.getOwnPropertyNames ( O )\nif (typeof Object.getOwnPropertyNames !== \"function\") {\n  Object.getOwnPropertyNames = function (o) {\n    if (o !== Object(o)) { throw TypeError(\"Object.getOwnPropertyNames called on non-object\"); }\n    var props = [], p;\n    for (p in o) {\n      if (Object.prototype.hasOwnProperty.call(o, p)) {\n        props.push(p);\n      }\n    }\n    return props;\n  };\n}\n\n// ES5 15.2.3.5 Object.create ( O [, Properties] )\nif (typeof Object.create !== \"function\") {\n  Object.create = function (prototype, properties) {\n    if (typeof prototype !== \"object\") { throw TypeError(); }\n    function Ctor() {}\n    Ctor.prototype = prototype;\n    var o = new Ctor();\n    if (prototype) { o.constructor = Ctor; }\n    if (properties !== undefined) {\n      if (properties !== Object(properties)) { throw TypeError(); }\n      Object.defineProperties(o, properties);\n    }\n    return o;\n  };\n}\n\n// ES 15.2.3.6 Object.defineProperty ( O, P, Attributes )\n// Partial support for most common case - getters, setters, and values\n(function() {\n  if (!Object.defineProperty ||\n      !(function () { try { Object.defineProperty({}, 'x', {}); return true; } catch (e) { return false; } } ())) {\n    var orig = Object.defineProperty;\n    Object.defineProperty = function (o, prop, desc) {\n      // In IE8 try built-in implementation for defining properties on DOM prototypes.\n      if (orig) { try { return orig(o, prop, desc); } catch (e) {} }\n\n      if (o !== Object(o)) { throw TypeError(\"Object.defineProperty called on non-object\"); }\n      if (Object.prototype.__defineGetter__ && ('get' in desc)) {\n        Object.prototype.__defineGetter__.call(o, prop, desc.get);\n      }\n      if (Object.prototype.__defineSetter__ && ('set' in desc)) {\n        Object.prototype.__defineSetter__.call(o, prop, desc.set);\n      }\n      if ('value' in desc) {\n        o[prop] = desc.value;\n      }\n      return o;\n    };\n  }\n}());\n\n// ES 15.2.3.7 Object.defineProperties ( O, Properties )\nif (typeof Object.defineProperties !== \"function\") {\n  Object.defineProperties = function (o, properties) {\n    if (o !== Object(o)) { throw TypeError(\"Object.defineProperties called on non-object\"); }\n    var name;\n    for (name in properties) {\n      if (Object.prototype.hasOwnProperty.call(properties, name)) {\n        Object.defineProperty(o, name, properties[name]);\n      }\n    }\n    return o;\n  };\n}\n\n\n// ES5 15.2.3.14 Object.keys ( O )\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys\nif (!Object.keys) {\n  Object.keys = function (o) {\n    if (o !== Object(o)) { throw TypeError('Object.keys called on non-object'); }\n    var ret = [], p;\n    for (p in o) {\n      if (Object.prototype.hasOwnProperty.call(o, p)) {\n        ret.push(p);\n      }\n    }\n    return ret;\n  };\n}\n\n//----------------------------------------------------------------------\n// ES5 15.3 Function Objects\n//----------------------------------------------------------------------\n\n//\n// ES5 15.3.4 Properties of the Function Prototype Object\n//\n\n// ES5 15.3.4.5 Function.prototype.bind ( thisArg [, arg1 [, arg2, ... ]] )\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function (o) {\n    if (typeof this !== 'function') { throw TypeError(\"Bind must be called on a function\"); }\n\n    var args = Array.prototype.slice.call(arguments, 1),\n        self = this,\n        nop = function() {},\n        bound = function () {\n          return self.apply(this instanceof nop ? this : o,\n                            args.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    if (this.prototype)\n      nop.prototype = this.prototype;\n    bound.prototype = new nop();\n    return bound;\n  };\n}\n\n\n//----------------------------------------------------------------------\n// ES5 15.4 Array Objects\n//----------------------------------------------------------------------\n\n//\n// ES5 15.4.3 Properties of the Array Constructor\n//\n\n\n// ES5 15.4.3.2 Array.isArray ( arg )\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray\nArray.isArray = Array.isArray || function (o) { return Boolean(o && Object.prototype.toString.call(Object(o)) === '[object Array]'); };\n\n\n//\n// ES5 15.4.4 Properties of the Array Prototype Object\n//\n\n// ES5 15.4.4.14 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\nif (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function (searchElement /*, fromIndex */) {\n    if (this === void 0 || this === null) { throw TypeError(); }\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (len === 0) { return -1; }\n\n    var n = 0;\n    if (arguments.length > 0) {\n      n = Number(arguments[1]);\n      if (isNaN(n)) {\n        n = 0;\n      } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {\n        n = (n > 0 || -1) * Math.floor(Math.abs(n));\n      }\n    }\n\n    if (n >= len) { return -1; }\n\n    var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n\n    for (; k < len; k++) {\n      if (k in t && t[k] === searchElement) {\n        return k;\n      }\n    }\n    return -1;\n  };\n}\n\n// ES5 15.4.4.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf\nif (!Array.prototype.lastIndexOf) {\n  Array.prototype.lastIndexOf = function (searchElement /*, fromIndex*/) {\n    if (this === void 0 || this === null) { throw TypeError(); }\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (len === 0) { return -1; }\n\n    var n = len;\n    if (arguments.length > 1) {\n      n = Number(arguments[1]);\n      if (n !== n) {\n        n = 0;\n      } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {\n        n = (n > 0 || -1) * Math.floor(Math.abs(n));\n      }\n    }\n\n    var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);\n\n    for (; k >= 0; k--) {\n      if (k in t && t[k] === searchElement) {\n        return k;\n      }\n    }\n    return -1;\n  };\n}\n\n// ES5 15.4.4.16 Array.prototype.every ( callbackfn [ , thisArg ] )\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every\nif (!Array.prototype.every) {\n  Array.prototype.every = function (fun /*, thisp */) {\n    if (this === void 0 || this === null) { throw TypeError(); }\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== \"function\") { throw TypeError(); }\n\n    var thisp = arguments[1], i;\n    for (i = 0; i < len; i++) {\n      if (i in t && !fun.call(thisp, t[i], i, t)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n\n// ES5 15.4.4.17 Array.prototype.some ( callbackfn [ , thisArg ] )\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some\nif (!Array.prototype.some) {\n  Array.prototype.some = function (fun /*, thisp */) {\n    if (this === void 0 || this === null) { throw TypeError(); }\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== \"function\") { throw TypeError(); }\n\n    var thisp = arguments[1], i;\n    for (i = 0; i < len; i++) {\n      if (i in t && fun.call(thisp, t[i], i, t)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n}\n\n// ES5 15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach\nif (!Array.prototype.forEach) {\n  Array.prototype.forEach = function (fun /*, thisp */) {\n    if (this === void 0 || this === null) { throw TypeError(); }\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== \"function\") { throw TypeError(); }\n\n    var thisp = arguments[1], i;\n    for (i = 0; i < len; i++) {\n      if (i in t) {\n        fun.call(thisp, t[i], i, t);\n      }\n    }\n  };\n}\n\n\n// ES5 15.4.4.19 Array.prototype.map ( callbackfn [ , thisArg ] )\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Map\nif (!Array.prototype.map) {\n  Array.prototype.map = function (fun /*, thisp */) {\n    if (this === void 0 || this === null) { throw TypeError(); }\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== \"function\") { throw TypeError(); }\n\n    var res = []; res.length = len;\n    var thisp = arguments[1], i;\n    for (i = 0; i < len; i++) {\n      if (i in t) {\n        res[i] = fun.call(thisp, t[i], i, t);\n      }\n    }\n\n    return res;\n  };\n}\n\n// ES5 15.4.4.20 Array.prototype.filter ( callbackfn [ , thisArg ] )\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Filter\nif (!Array.prototype.filter) {\n  Array.prototype.filter = function (fun /*, thisp */) {\n    if (this === void 0 || this === null) { throw TypeError(); }\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== \"function\") { throw TypeError(); }\n\n    var res = [];\n    var thisp = arguments[1], i;\n    for (i = 0; i < len; i++) {\n      if (i in t) {\n        var val = t[i]; // in case fun mutates this\n        if (fun.call(thisp, val, i, t)) {\n          res.push(val);\n        }\n      }\n    }\n\n    return res;\n  };\n}\n\n\n// ES5 15.4.4.21 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Reduce\nif (!Array.prototype.reduce) {\n  Array.prototype.reduce = function (fun /*, initialValue */) {\n    if (this === void 0 || this === null) { throw TypeError(); }\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== \"function\") { throw TypeError(); }\n\n    // no value to return if no initial value and an empty array\n    if (len === 0 && arguments.length === 1) { throw TypeError(); }\n\n    var k = 0;\n    var accumulator;\n    if (arguments.length >= 2) {\n      accumulator = arguments[1];\n    } else {\n      do {\n        if (k in t) {\n          accumulator = t[k++];\n          break;\n        }\n\n        // if array contains no values, no initial value to return\n        if (++k >= len) { throw TypeError(); }\n      }\n      while (true);\n    }\n\n    while (k < len) {\n      if (k in t) {\n        accumulator = fun.call(undefined, accumulator, t[k], k, t);\n      }\n      k++;\n    }\n\n    return accumulator;\n  };\n}\n\n\n// ES5 15.4.4.22 Array.prototype.reduceRight ( callbackfn [, initialValue ] )\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/ReduceRight\nif (!Array.prototype.reduceRight) {\n  Array.prototype.reduceRight = function (callbackfn /*, initialValue */) {\n    if (this === void 0 || this === null) { throw TypeError(); }\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof callbackfn !== \"function\") { throw TypeError(); }\n\n    // no value to return if no initial value, empty array\n    if (len === 0 && arguments.length === 1) { throw TypeError(); }\n\n    var k = len - 1;\n    var accumulator;\n    if (arguments.length >= 2) {\n      accumulator = arguments[1];\n    } else {\n      do {\n        if (k in this) {\n          accumulator = this[k--];\n          break;\n        }\n\n        // if array contains no values, no initial value to return\n        if (--k < 0) { throw TypeError(); }\n      }\n      while (true);\n    }\n\n    while (k >= 0) {\n      if (k in t) {\n        accumulator = callbackfn.call(undefined, accumulator, t[k], k, t);\n      }\n      k--;\n    }\n\n    return accumulator;\n  };\n}\n\n\n//----------------------------------------------------------------------\n// ES5 15.5 String Objects\n//----------------------------------------------------------------------\n\n//\n// ES5 15.5.4 Properties of the String Prototype Object\n//\n\n\n// ES5 15.5.4.20 String.prototype.trim()\nif (!String.prototype.trim) {\n  String.prototype.trim = function () {\n    return String(this).replace(/^\\s+/, '').replace(/\\s+$/, '');\n  };\n}\n\n\n\n//----------------------------------------------------------------------\n// ES5 15.9 Date Objects\n//----------------------------------------------------------------------\n\n\n//\n// ES 15.9.4 Properties of the Date Constructor\n//\n\n// ES5 15.9.4.4 Date.now ( )\n// From https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date/now\nif (!Date.now) {\n  Date.now = function now() {\n    return Number(new Date());\n  };\n}\n\n\n//\n// ES5 15.9.5 Properties of the Date Prototype Object\n//\n\n// ES5 15.9.4.43 Date.prototype.toISOString ( )\n// Inspired by http://www.json.org/json2.js\nif (!Date.prototype.toISOString) {\n  Date.prototype.toISOString = function () {\n    function pad2(n) { return ('00' + n).slice(-2); }\n    function pad3(n) { return ('000' + n).slice(-3); }\n\n    return this.getUTCFullYear() + '-' +\n      pad2(this.getUTCMonth() + 1) + '-' +\n      pad2(this.getUTCDate()) + 'T' +\n      pad2(this.getUTCHours()) + ':' +\n      pad2(this.getUTCMinutes()) + ':' +\n      pad2(this.getUTCSeconds()) + '.' +\n      pad3(this.getUTCMilliseconds()) + 'Z';\n  };\n}\n//----------------------------------------------------------------------\n//\n// ECMAScript 2015 Polyfills\n//\n//----------------------------------------------------------------------\n\n(function (global) {\n  \"use strict\";\n\n  // Set this to always override native implementations, for testing\n  // the polyfill in browsers with partial/full ES2015 support.\n  var OVERRIDE_NATIVE_FOR_TESTING = false;\n\n  var undefined = (void 0); // Paranoia\n\n  // Helpers\n\n  function strict(o) {\n    return o === global ? undefined : o;\n  }\n\n  function isSymbol(s) {\n    return (typeof s === 'symbol') || ('Symbol' in global && s instanceof global.Symbol);\n  }\n\n  function getPropertyDescriptor(target, name) {\n    var desc = Object.getOwnPropertyDescriptor(target, name);\n    var proto = Object.getPrototypeOf(target);\n    while (!desc && proto) {\n      desc = Object.getOwnPropertyDescriptor(proto, name);\n      proto = Object.getPrototypeOf(proto);\n    }\n    return desc;\n  }\n\n  var enqueue = (function(nativePromise, nativeSetImmediate) {\n    if (nativePromise)\n      return function(job) { nativePromise.resolve().then(function() { job(); }); };\n    if (nativeSetImmediate)\n      return function(job) { nativeSetImmediate(job); };\n    return function(job) { setTimeout(job, 0); };\n  }(global['Promise'], global['setImmediate']));\n\n  function define(o, p, v, override) {\n    if (p in o && !override && !OVERRIDE_NATIVE_FOR_TESTING)\n      return;\n\n    if (typeof v === 'function') {\n      // Sanity check that functions are appropriately named (where possible)\n      console.assert(isSymbol(p) || !('name' in v) || v.name === p || v.name === p + '_', 'Expected function name \"' + p.toString() + '\", was \"' + v.name + '\"');\n      Object.defineProperty(o, p, {\n        value: v,\n        configurable: true,\n        enumerable: false,\n        writable: true\n      });\n    } else {\n      Object.defineProperty(o, p, {\n        value: v,\n        configurable: false,\n        enumerable: false,\n        writable: false\n      });\n    }\n  }\n\n  function set_internal(o, p, v) {\n    Object.defineProperty(o, p, {\n      value: v,\n      configurable: false,\n      enumerable: false,\n      writable: true\n    });\n  }\n\n  // Snapshot intrinsic functions\n  var $isNaN = global.isNaN,\n      $parseInt = global.parseInt,\n      $parseFloat = global.parseFloat;\n\n  var E = Math.E,\n      LOG10E = Math.LOG10E,\n      LOG2E = Math.LOG2E,\n      abs = Math.abs,\n      ceil = Math.ceil,\n      exp = Math.exp,\n      floor = Math.floor,\n      log = Math.log,\n      max = Math.max,\n      min = Math.min,\n      pow = Math.pow,\n      random = Math.random,\n      sqrt = Math.sqrt;\n\n  var orig_match = String.prototype.match,\n      orig_replace = String.prototype.replace,\n      orig_search = String.prototype.search,\n      orig_split = String.prototype.split;\n\n  // These are used for implementing the polyfills, but not exported.\n\n  // Inspired by https://gist.github.com/1638059\n  /** @constructor */\n  function EphemeronTable() {\n    var secretKey = ObjectCreate(null);\n\n    function conceal(o) {\n      var oValueOf = o.valueOf, secrets = ObjectCreate(null);\n      Object.defineProperty(o, 'valueOf', {\n          value: (function(secretKey) {\n            return function (k) {\n              return (k === secretKey) ? secrets : oValueOf.apply(o, arguments);\n            };\n          }(secretKey)),\n        configurable: true,\n        writeable: true,\n        enumerable: false\n        });\n      return secrets;\n    }\n\n    function reveal(o) {\n      var v = typeof o.valueOf === 'function' && o.valueOf(secretKey);\n      return v === o ? null : v;\n    }\n\n    return {\n      clear: function() {\n        secretKey = ObjectCreate(null);\n      },\n      remove: function(key) {\n        var secrets = reveal(key);\n        if (secrets && HasOwnProperty(secrets, 'value')) {\n          delete secrets.value;\n          return true;\n        }\n        return false;\n      },\n      get: function(key, defaultValue) {\n        var secrets = reveal(key);\n        return (secrets && HasOwnProperty(secrets, 'value')) ? secrets.value : defaultValue;\n      },\n      has: function(key) {\n        var secrets = reveal(key);\n        return Boolean(secrets && HasOwnProperty(secrets, 'value'));\n      },\n      set: function(key, value) {\n        var secrets = reveal(key) || conceal(key);\n        secrets.value = value;\n      }\n    };\n  }\n\n  var empty = Object.create(null);\n\n  //----------------------------------------------------------------------\n  //\n  // ECMAScript 2015\n  // http://www.ecma-international.org/ecma-262/6.0/\n  //\n  //----------------------------------------------------------------------\n\n  // ---------------------------------------\n  // 19.4 Symbol Objects\n  // ---------------------------------------\n\n  // NOTE: Symbols are defined here - out of spec order - since we need the\n  // properties and prototype to be populated for other polyfills.\n\n  // NOTE: Not secure, nor is obj[$$symbol] hidden from Object.keys()\n\n  var symbolForKey;\n  (function() {\n    var secret = Object.create(null);\n    var symbolMap = {};\n    symbolForKey = function(k) {\n      return symbolMap[k];\n    };\n\n    var GlobalSymbolRegistry = [];\n\n    function unique(bits) {\n      return Array(bits + 1).join('x').replace(/x/g, function() {\n        return random() < 0.5 ? '\\u200C' : '\\u200D'; // JWNJ / ZWJ\n      });\n    }\n\n    // 19.4.1 The Symbol Constructor\n    // 19.4.1.1 Symbol ( description=undefined )\n    function Symbol(description) {\n      if (!(this instanceof Symbol)) return new Symbol(description, secret);\n      if (this instanceof Symbol && arguments[1] !== secret) throw TypeError();\n\n      var descString = description === undefined ? undefined : String(description);\n\n      set_internal(this, '[[SymbolData]]', unique(128));\n      set_internal(this, '[[Description]]', descString);\n\n      symbolMap[this] = this;\n      return this;\n    }\n\n    if (!('Symbol' in global) || OVERRIDE_NATIVE_FOR_TESTING)\n      global.Symbol = Symbol;\n\n    // 19.4.2 Properties of the Symbol Constructor\n\n    // 19.4.2.1 Symbol.for (key)\n    define(Symbol, 'for', function for_(key) {\n      var stringKey = String(key);\n      for (var i = 0; i < GlobalSymbolRegistry.length; ++i) {\n        var e = GlobalSymbolRegistry[i];\n        if (SameValue(e['[[key]]'], stringKey)) return e['[[symbol]]'];\n      }\n      var newSymbol = Symbol(key);\n      GlobalSymbolRegistry.push({'[[key]]': stringKey, '[[symbol]]': newSymbol});\n      return newSymbol;\n    });\n\n    // 19.4.2.2 Symbol.hasInstance\n    // 19.4.2.3 Symbol.isConcatSpreadable\n\n    // 19.4.2.4 Symbol.iterator\n    define(global.Symbol, 'iterator', global.Symbol('Symbol.iterator'));\n\n    // 19.4.2.5 Symbol.keyFor (sym)\n    define(Symbol, 'keyFor', function keyFor(sym) {\n      if (!(sym instanceof Symbol)) throw TypeError();\n      for (var i = 0; i < GlobalSymbolRegistry.length; ++i) {\n        var e = GlobalSymbolRegistry[i];\n        if (SameValue(e['[[symbol]]'], sym)) return e['[[key]]'];\n      }\n      return undefined;\n    });\n\n    // 19.4.2.6 Symbol.match\n    define(global.Symbol, 'match', global.Symbol('Symbol.match'));\n\n    // 19.4.2.7 Symbol.prototype\n\n    // 19.4.2.8 Symbol.replace\n    define(global.Symbol, 'replace', global.Symbol('Symbol.replace'));\n\n    // 19.4.2.9 Symbol.search\n    define(global.Symbol, 'search', global.Symbol('Symbol.search'));\n\n    // 19.4.2.10 Symbol.species\n\n    // 19.4.2.11 Symbol.search\n    define(global.Symbol, 'split', global.Symbol('Symbol.split'));\n\n    // 19.4.2.12 Symbol.toPrimitive\n\n    // 19.4.2.13 Symbol.toStringTag\n    define(global.Symbol, 'toStringTag', global.Symbol('Symbol.toStringTag'));\n\n    // 19.4.2.14 Symbol.unscopables\n\n    // 19.4.3 Properties of the Symbol Prototype Object\n    // 19.4.3.1 Symbol.prototype.constructor\n\n    // 19.4.3.2 Symbol.prototype.toString ( )\n    Object.defineProperty(Symbol.prototype, 'toString', {\n      value: function toString() {\n        var s = strict(this);\n        var desc = s['[[Description]]'];\n        return 'Symbol(' + (desc === undefined ? '' : desc) + s['[[SymbolData]]'] + ')';\n      },\n      configurable: true, writeable: true, enumerable: false });\n\n    // 19.4.3.3 Symbol.prototype.valueOf ( )\n    Object.defineProperty(Symbol.prototype, 'valueOf', {\n      value: function valueOf() {\n        // To prevent automatic string conversion:\n        throw TypeError();\n\n        // Spec has approximately the following:\n        //var s = strict(this);\n        //if (Type(s) === 'symbol') return s;\n        //if (Type(s) !== 'object') throw TypeError();\n        //if (!('[[SymbolData]]' in s)) throw TypeError();\n        //return s['[[SymbolData]]'];\n      },\n      configurable: true, writeable: true, enumerable: false });\n\n    // 19.4.3.4 Symbol.prototype [ @@toStringTag ]\n    // (Done later to polyfill partial implementations)\n\n    // 19.4.4 Properties of Symbol Instances\n  }());\n\n  console.assert(typeof global.Symbol() === 'symbol' || symbolForKey(String(global.Symbol('x'))) !== undefined);\n\n  // Defined here so that other prototypes can reference it\n  // 25.1.2 The %IteratorPrototype% Object\n  var $IteratorPrototype$ = {};\n\n  //----------------------------------------\n  // 6 ECMAScript Data Types and Values\n  //----------------------------------------\n\n  // 6.1 ECMAScript Language Types\n\n  // \"Type(x)\" is used as shorthand for \"the type of x\"...\n  function Type(v) {\n    switch (typeof v) {\n    case 'undefined': return 'undefined';\n    case 'boolean': return 'boolean';\n    case 'number': return 'number';\n    case 'string': return 'string';\n    case 'symbol': return 'symbol';\n    default:\n      if (v === null) return 'null';\n      if (v instanceof global.Symbol) return 'symbol';\n      return 'object';\n    }\n  }\n\n  // 6.1.5.1 Well-Known Symbols\n  var $$iterator = global.Symbol.iterator,\n      $$match = global.Symbol.match,\n      $$replace = global.Symbol.replace,\n      $$search = global.Symbol.search,\n      $$split = global.Symbol.split,\n      $$toStringTag = global.Symbol.toStringTag;\n\n  //----------------------------------------\n  // 7 Abstract Operations\n  //----------------------------------------\n\n  //----------------------------------------\n  // 7.1 Type Conversion\n  //----------------------------------------\n\n  // 7.1.1 ToPrimitive ( input [, PreferredType] )\n  // just use valueOf()\n\n  // 7.1.2 ToBoolean ( argument )\n  // just use Boolean()\n\n  // 7.1.3 ToNumber ( argument )\n  // just use Number()\n\n  // 7.1.4 ToInteger ( argument )\n  function ToInteger(n) {\n    n = Number(n);\n    if ($isNaN(n)) return 0;\n    if (n === 0 || n === Infinity || n === -Infinity) return n;\n    return ((n < 0) ? -1 : 1) * floor(abs(n));\n  }\n\n  // 7.1.5 ToInt32 ( argument )\n  function ToInt32(v) { return v >> 0; }\n\n  // 7.1.6 ToUint32 ( argument )\n  function ToUint32(v) { return v >>> 0; }\n\n  // 7.1.7 ToInt16 ( argument )\n  function ToInt16(v) { return (v << 16) >> 16; }\n\n  // 7.1.8 ToUint16 ( argument )\n  function ToUint16(v) { return v & 0xFFFF; }\n\n  // 7.1.9 ToInt8 ( argument )\n  function ToInt8(v) { return (v << 24) >> 24; }\n\n  // 7.1.10 ToUint8 ( argument )\n  function ToUint8(v) { return v & 0xFF; }\n\n  // 7.1.11 ToUint8Clamp ( argument )\n  function ToUint8Clamp(argument) {\n    var number = Number(argument);\n    if ($isNaN(number)) return 0;\n    if (number <= 0) return 0;\n    if (number >= 255) return 255;\n    var f = floor(number);\n    if ((f + 0.5) < number) return f + 1;\n    if (number < (f + 0.5)) return f;\n    if (f % 2) return f + 1;\n    return f;\n  }\n\n  // 7.1.12 ToString ( argument )\n  // just use String()\n\n  // 7.1.13 ToObject ( argument )\n  function ToObject(v) {\n    if (v === null || v === undefined) throw TypeError();\n    return Object(v);\n  }\n\n  // 7.1.14 ToPropertyKey ( argument )\n  function ToPropertyKey(v) {\n    return String(v);\n  }\n\n  // 7.1.15 ToLength ( argument )\n  function ToLength(v) {\n    var len = ToInteger(v);\n    if (len <= 0) return 0;\n    if (len === Infinity) return 0x20000000000000 - 1; // 2^53-1\n    return min(len, 0x20000000000000 - 1); // 2^53-1\n  }\n\n  // 7.1.16 CanonicalNumericIndexString ( argument )\n\n  //----------------------------------------\n  // 7.2 Testing and Comparison Operations\n  //----------------------------------------\n\n  // 7.2.1 RequireObjectCoercible ( argument )\n  // 7.2.2 IsArray ( argument )\n\n  // 7.2.3 IsCallable ( argument )\n  function IsCallable(o) { return typeof o === 'function'; }\n\n  // 7.2.4 IsConstructor ( argument )\n  function IsConstructor(o) {\n    // Hacks for Safari 7 TypedArray XXXConstructor objects\n    if (/Constructor/.test(Object.prototype.toString.call(o))) return true;\n    if (/Function/.test(Object.prototype.toString.call(o))) return true;\n    // TODO: Can this be improved on?\n    return typeof o === 'function';\n  }\n\n  // 7.2.5 IsExtensible (O)\n  // 7.2.6 IsInteger ( argument )\n\n  // 7.2.7 IsPropertyKey ( argument )\n  function IsPropertyKey(argument) {\n    if (Type(argument) === 'string') return true;\n    if (Type(argument) === 'symbol') return true;\n    return false;\n  }\n\n  // 7.2.8 IsRegExp ( argument )\n\n  // 7.2.9 SameValue(x, y)\n  function SameValue(x, y) {\n    if (typeof x !== typeof y) return false;\n    switch (typeof x) {\n    case 'undefined':\n      return true;\n    case 'number':\n      if (x !== x && y !== y) return true;\n      if (x === 0 && y === 0) return 1/x === 1/y;\n      return x === y;\n    case 'boolean':\n    case 'string':\n    case 'object':\n    default:\n      return x === y;\n    }\n  }\n\n  // 7.2.10 SameValueZero(x, y)\n  function SameValueZero(x, y) {\n    if (typeof x !== typeof y) return false;\n    switch (typeof x) {\n    case 'undefined':\n      return true;\n    case 'number':\n      if (x !== x && y !== y) return true;\n      return x === y;\n    case 'boolean':\n    case 'string':\n    case 'object':\n    default:\n      return x === y;\n    }\n  }\n\n  //----------------------------------------\n  // 7.3 Operations on Objects\n  //----------------------------------------\n\n  // 7.3.1 Get (O, P)\n  // - just use o.p or o[p]\n\n  // 7.3.2 GetV (V, P)\n  function GetV(v, p) {\n    var o = ToObject(v);\n    return o[p];\n  }\n\n  // 7.3.3 Set (O, P, V, Throw)\n  // - just use o.p = v or o[p] = v\n\n\n\n\n  // 7.3.9 GetMethod (O, P)\n  function GetMethod(o, p) {\n    var func = GetV(o, p);\n    if (func === undefined || func === null) return undefined;\n    if (!IsCallable(func)) throw TypeError();\n    return func;\n  }\n\n  // 7.3.10 HasProperty (O, P)\n  function HasProperty(o, p) {\n    while (o) {\n      if (Object.prototype.hasOwnProperty.call(o, p)) return true;\n      if (Type(o) !== 'object') return false;\n      var op = Object.getPrototypeOf(o);\n      if (op === o) return false; // IE8 has self-referential prototypes\n      o = op;\n    }\n    return false;\n  }\n\n  // 7.3.11 HasOwnProperty (O, P)\n  function HasOwnProperty(o, p) {\n    return Object.prototype.hasOwnProperty.call(o, p);\n  }\n\n  //----------------------------------------\n  // 7.4 Operations on Iterator Objects\n  //----------------------------------------\n\n  // 7.4.1 GetIterator ( obj, method )\n  function GetIterator(obj, method) {\n    if (arguments.length < 2)\n      method = GetMethod(obj, $$iterator);\n    var iterator = method.call(obj);\n    if (Type(iterator) !== 'object') throw TypeError();\n    return iterator;\n  }\n\n  // 7.4.2 IteratorNext ( iterator, value )\n  function IteratorNext(iterator, value) {\n    if (arguments.length < 2)\n      var result = iterator.next();\n    else\n      result = iterator.next(value);\n    if (Type(result) !== 'object') throw TypeError();\n    return result;\n  }\n\n  // 7.4.3 IteratorComplete ( iterResult )\n  function IteratorComplete(iterResult) {\n    console.assert(Type(iterResult) === 'object');\n    return Boolean(iterResult.done);\n  }\n\n  // 7.4.4 IteratorValue ( iterResult )\n  function IteratorValue(iterResult) {\n    console.assert(Type(iterResult) === 'object');\n    return iterResult.value;\n  }\n\n  // 7.4.5 IteratorStep ( iterator )\n  function IteratorStep( iterator, value ) {\n    var result = IteratorNext(iterator, value);\n    var done = result['done'];\n    if (Boolean(done) === true) return false;\n    return result;\n  }\n\n  // 7.4.6 IteratorClose( iterator, completion )\n  function IteratorClose( iterator, completion ) {\n    console.assert(Type(iterator) === 'object');\n    var _return = GetMethod(iterator, 'return');\n    if (_return === undefined) return completion;\n    try {\n      var innerResult = _return[iterator]();\n    } catch (result) {\n      // TODO: If completion.[[type]] is throw, return completion\n      return result;\n    }\n    if (Type(innerResult) !== 'object') throw TypeError();\n    return completion;\n  }\n\n  // 7.4.7 CreateIterResultObject (value, done)\n  function CreateIterResultObject(value, done) {\n    console.assert(Type(done) === 'boolean');\n    var obj = {};\n    obj[\"value\"] = value;\n    obj[\"done\"] = done;\n    return obj;\n  }\n\n  // 7.4.8 CreateListIterator (list)\n  // 7.4.8.1 ListIterator next( )\n\n  //----------------------------------------\n  // 8 Executable Code and Execution Contexts\n  //----------------------------------------\n\n  //----------------------------------------\n  // 8.4 Jobs and Job Queues\n  //----------------------------------------\n\n  // 8.4.1 EnqueueJob ( queueName, job, arguments)\n  function EnqueueJob(queueName, job, args) {\n    var fn = function() { job.apply(undefined, args); };\n    enqueue(fn);\n  }\n\n  // 8.4.2 NextJob result\n  function NextJob(result) {\n    // no-op\n  }\n\n  //----------------------------------------\n  // 9 Ordinary and Exotic Objects Behaviors\n  //----------------------------------------\n\n  // 9.1.11 [[Enumerate]] ()\n  function Enumerate(obj) {\n    var e = [];\n    if (Object(obj) !== obj) return e;\n    var visited = new Set;\n    while (obj !== null) {\n      Object.getOwnPropertyNames(obj).forEach(function(name) {\n        if (!visited.has(name)) {\n          var desc = Object.getOwnPropertyDescriptor(obj, name);\n          if (desc) {\n            visited.add(name);\n            if (desc.enumerable) e.push(name);\n          }\n        }\n      });\n      obj = Object.getPrototypeOf(obj);\n    }\n    return e[$$iterator]();\n  }\n\n  // 9.1.12 [[OwnPropertyKeys]] ( )\n  function OwnPropertyKeys(o) {\n    return Object.getOwnPropertyNames(o);\n  }\n\n  // 9.1.13 ObjectCreate(proto, internalSlotsList)\n  function ObjectCreate(proto, internalSlotsList) {\n    return Object.create(proto, internalSlotsList);\n  }\n\n  // ---------------------------------------\n  // 19 Fundamental Objects\n  // ---------------------------------------\n\n  // ---------------------------------------\n  // 19.1 Object Objects\n  // ---------------------------------------\n\n  // 19.1.1 The Object Constructor\n  // 19.1.1.1 Object ( [ value ] )\n  // 19.1.2 Properties of the Object Constructor\n  // 19.1.2.1 Object.assign ( target, ...sources )\n  define(\n    Object, 'assign',\n    function assign(target, /*...*/sources) {\n      var to = ToObject(target);\n      if (arguments.length < 2) return to;\n\n      var sourcesIndex = 1;\n      while (sourcesIndex < arguments.length) {\n        var nextSource = arguments[sourcesIndex++];\n        if (nextSource === undefined || nextSource === null) {\n          var keys = [];\n        } else {\n          var from = ToObject(nextSource);\n          keys = OwnPropertyKeys(from);\n        }\n        for (var keysIndex = 0; keysIndex < keys.length; ++keysIndex) {\n          var nextKey = keys[keysIndex];\n          var desc = Object.getOwnPropertyDescriptor(from, nextKey);\n          if (desc !== undefined && desc.enumerable) {\n            var propValue = from[nextKey];\n            to[nextKey] = propValue;\n          }\n        }\n      }\n      return to;\n    });\n\n  // 19.1.2.2 Object.create ( O [ , Properties ] )\n  // 19.1.2.3 Object.defineProperties ( O, Properties )\n  // 19.1.2.4 Object.defineProperty ( O, P, Attributes )\n  // 19.1.2.5 Object.freeze ( O )\n  // 19.1.2.6 Object.getOwnPropertyDescriptor ( O, P )\n\n  (function() {\n    var nativeSymbols = (typeof global.Symbol() === 'symbol'),\n        $getOwnPropertyNames = Object.getOwnPropertyNames,\n        $keys = Object.keys,\n        $window_names = (typeof window === 'object' ? $getOwnPropertyNames(window) : []);\n\n    function isStringKey(k) { return !symbolForKey(k); }\n\n    // 19.1.2.7 Object.getOwnPropertyNames ( O )\n    define(\n      Object, 'getOwnPropertyNames',\n      function getOwnPropertyNames(o) {\n        if (Object.prototype.toString.call(o) === '[object Window]') {\n          // Workaround for cross-realm calling by IE itself.\n          // https://github.com/inexorabletash/polyfill/issues/96\n          try {\n            return $getOwnPropertyNames(o).filter(isStringKey);\n          } catch (_) {\n            return $window_names.slice();\n          }\n        }\n        return $getOwnPropertyNames(o).filter(isStringKey);\n      }, !nativeSymbols);\n\n    // 19.1.2.8 Object.getOwnPropertySymbols ( O )\n    define(\n      Object, 'getOwnPropertySymbols',\n      function getOwnPropertySymbols(o) {\n        return $getOwnPropertyNames(o).filter(symbolForKey).map(symbolForKey);\n      }, !nativeSymbols);\n\n    // 19.1.2.14 Object.keys ( O )\n    define(\n      Object, 'keys',\n      function keys(o) {\n        return $keys(o).filter(isStringKey);\n      }, !nativeSymbols);\n  }());\n\n  // 19.1.2.9 Object.getPrototypeOf ( O )\n  // 19.1.2.10 Object.is ( value1, value2 )\n  define(\n    Object, 'is',\n    function is(value1, value2) {\n      return SameValue(value1, value2);\n    });\n\n  // 19.1.2.11 Object.isExtensible ( O )\n  // 19.1.2.12 Object.isFrozen ( O )\n  // 19.1.2.13 Object.isSealed ( O )\n\n  // 19.1.2.14 Object.keys ( O )\n  // see above\n\n  // 19.1.2.15 Object.preventExtensions ( O )\n  // 19.1.2.16 Object.prototype\n  // 19.1.2.17 Object.seal ( O )\n\n  // 19.1.2.18 Object.setPrototypeOf ( O, proto )\n  define(\n    Object, 'setPrototypeOf',\n    function setPrototypeOf(o, proto) {\n      if (Type(o) !== 'object') throw TypeError();\n      if (Type(proto) !== 'object' && Type(proto) !== 'null') throw TypeError();\n      o.__proto__ = proto;\n      return o;\n    }\n  );\n\n  // 19.1.3 Properties of the Object Prototype Object\n  // 19.1.3.1 Object.prototype.constructor\n  // 19.1.3.2 Object.prototype.hasOwnProperty ( V )\n  // 19.1.3.3 Object.prototype.isPrototypeOf ( V )\n  // 19.1.3.4 Object.prototype.propertyIsEnumerable ( V )\n  // 19.1.3.5 Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n  // 19.1.3.6 Object.prototype.toString ( )\n  var o_p_ts = Object.prototype.toString;\n  define(Object.prototype, 'toString',\n       function() {\n         var o = strict(this);\n         if (o === Object(o) && $$toStringTag in o) {\n           return '[object ' + o[$$toStringTag] + ']';\n         }\n         return o_p_ts.apply(o, arguments);\n       });\n\n  // 19.1.3.7 Object.prototype.valueOf ( )\n  // 19.1.4 Properties of Object Instances\n\n  // ---------------------------------------\n  // 19.2 Function Objects\n  // ---------------------------------------\n\n  // 19.2.1 The Function Constructor\n  // 19.2.1.1 Function ( p1, p2, … , pn, body )\n  // 19.2.2 Properties of the Function Constructor\n  // 19.2.2.1 Function.length\n  // 19.2.2.2 Function.prototype\n  // 19.2.3 Properties of the Function Prototype Object\n  // 19.2.3.1 Function.prototype.apply ( thisArg, argArray )\n  // 19.2.3.2 Function.prototype.bind ( thisArg , ...args)\n  // 19.2.3.3 Function.prototype.call (thisArg , ...args)\n  // 19.2.3.4 Function.prototype.constructor\n  // 19.2.3.5 Function.prototype.toString ( )\n  // 19.2.3.6 Function.prototype[@@hasInstance] ( V )\n  // 19.2.4 Function Instances\n  // 19.2.4.1 length\n  // 19.2.4.2 name\n  // 19.2.4.3 prototype\n\n  // (No polyfillable changes from ES5)\n\n  // ---------------------------------------\n  // 19.3 Boolean Objects\n  // ---------------------------------------\n\n  // 19.3.1 The Boolean Constructor\n  // 19.3.1.1 Boolean ( value )\n  // 19.3.2 Properties of the Boolean Constructor\n  // 19.3.2.1 Boolean.prototype\n  // 19.3.3 Properties of the Boolean Prototype Object\n  // 19.3.3.1 Boolean.prototype.constructor\n  // 19.3.3.2 Boolean.prototype.toString ( )\n  // 19.3.3.3 Boolean.prototype.valueOf ( )\n  // 19.3.4 Properties of Boolean Instances\n\n  // (No polyfillable changes from ES5)\n\n  // ---------------------------------------\n  // 19.4 Symbol Objects\n  // ---------------------------------------\n\n  // Moved earlier in this script, so that other polyfills can depend on them.\n\n  // 19.4.3.4 Symbol.prototype [ @@toStringTag ]\n  define(global.Symbol.prototype, global.Symbol.toStringTag, 'Symbol');\n\n  // ---------------------------------------\n  // 19.5 Error Objects\n  // ---------------------------------------\n\n  // 19.5.1 The Error Constructor\n  // 19.5.1.1 Error ( message )\n  // 19.5.1.2 new Error( ...argumentsList )\n  // 19.5.2 Properties of the Error Constructor\n  // 19.5.2.1 Error.prototype\n  // 19.5.3 Properties of the Error Prototype Object\n  // 19.5.3.1 Error.prototype.constructor\n  // 19.5.3.2 Error.prototype.message\n  // 19.5.3.3 Error.prototype.name\n  // 19.5.3.4 Error.prototype.toString ( )\n  // 19.5.4 Properties of Error Instances\n  // 19.5.5 Native Error Types Used in This Standard\n  // 19.5.5.1 EvalError\n  // 19.5.5.2 RangeError\n  // 19.5.5.3 ReferenceError\n  // 19.5.5.4 SyntaxError\n  // 19.5.5.5 TypeError\n  // 19.5.5.6 URIError\n  // 19.5.6 NativeError Object Structure\n  // 19.5.6.1 NativeError Constructors\n  // 19.5.6.1.1 NativeError ( message )\n  // 19.5.6.1.2 new NativeError ( ...argumentsList )\n  // 19.5.6.2 Properties of the NativeError Constructors\n  // 19.5.6.2.1 NativeError.prototype\n  // 19.5.6.3 Properties of the NativeError Prototype Objects\n  // 19.5.6.4 Properties of NativeError Instances\n\n  // (No polyfillable changes from ES5)\n\n  // ---------------------------------------\n  // 20 Numbers and Dates\n  // ---------------------------------------\n\n  // ---------------------------------------\n  // 20.1 Number Objects\n  // ---------------------------------------\n\n  // 20.1.1 The Number Constructor\n  // 20.1.1.1 Number ( [ value ] )\n  // 20.1.1.2 new Number ( ...argumentsList )\n  // 20.1.2 Properties of the Number Constructor\n\n  // 20.1.2.1 Number.EPSILON\n  define(\n    Number, 'EPSILON',\n    (function () {\n      var next, result;\n      for (next = 1; 1 + next !== 1; next = next / 2)\n        result = next;\n      return result;\n    }()));\n\n  // 20.1.2.2 Number.isFinite ( number )\n  define(\n    Number, 'isFinite',\n    function isFinite(number) {\n      if (Type(number) !== 'number') return false;\n      if (number !== number || number === +Infinity || number === -Infinity) return false;\n      return true;\n    });\n\n  // 20.1.2.3 Number.isInteger ( number )\n  define(\n    Number, 'isInteger',\n    function isInteger(number) {\n      if (Type(number) !== 'number') return false;\n      if (number !== number || number === +Infinity || number === -Infinity) return false;\n      var integer = ToInteger(number);\n      if (integer !== number) return false;\n      return true;\n    });\n\n  // 20.1.2.4 Number.isNaN ( number )\n  define(\n    Number, 'isNaN',\n    function isNaN(number) {\n      if (Type(number) !== 'number') return false;\n      if (number !== number) return true;\n      return false;\n    });\n\n  // 20.1.2.5 Number.isSafeInteger ( number )\n  define(\n    Number, 'isSafeInteger',\n    function isSafeInteger(number) {\n      if (Type(number) !== 'number') return false;\n      if (number !== number || number === +Infinity || number === -Infinity) return false;\n      var integer = ToInteger(number);\n      if (integer !== number) return false;\n      if (abs(integer) <= (0x20000000000000 - 1)) // 2^53-1\n        return true;\n      return false;\n    });\n\n  // 20.1.2.6 Number.MAX_SAFE_INTEGER\n  define(\n    Number, 'MAX_SAFE_INTEGER',\n    9007199254740991); // 2^53-1\n\n  // 20.1.2.7 Number.MAX_VALUE\n\n  // 20.1.2.8 Number.MIN_SAFE_INTEGER\n  define(\n    Number, 'MIN_SAFE_INTEGER',\n    -9007199254740991); // -2^53+1\n\n  // 20.1.2.9 Number.MIN_VALUE\n  // 20.1.2.10 Number.NaN\n  // 20.1.2.11 Number.NEGATIVE_INFINITY\n\n  // 20.1.2.12 Number.parseFloat ( string )\n  define(Number, 'parseFloat', $parseFloat);\n\n  // 20.1.2.13 Number.parseInt ( string, radix )\n  define(Number, 'parseInt', $parseInt);\n\n  // 20.1.2.14 Number.POSITIVE_INFINITY\n  // 20.1.2.15 Number.prototype\n\n  // 20.1.3 Properties of the Number Prototype Object\n  // 20.1.3.1 Number.prototype.constructor\n  // 20.1.3.2 Number.prototype.toExponential ( fractionDigits )\n  // 20.1.3.3 Number.prototype.toFixed ( fractionDigits )\n  // 20.1.3.4 Number.prototype.toLocaleString( [ reserved1 [ , reserved2 ] ])\n  // 20.1.3.5 Number.prototype.toPrecision ( precision )\n  // 20.1.3.6 Number.prototype.toString ( [ radix ] )\n  // 20.1.3.7 Number.prototype.valueOf ( )\n  // 20.1.4 Properties of Number Instances\n\n  // ---------------------------------------\n  // 20.2 The Math Object\n  // ---------------------------------------\n\n  // 20.2.1 Value Properties of the Math Object\n  // 20.2.1.1 Math.E\n  // 20.2.1.2 Math.LN10\n  // 20.2.1.3 Math.LN2\n  // 20.2.1.4 Math.LOG10E\n  // 20.2.1.5 Math.LOG2E\n  // 20.2.1.6 Math.PI\n  // 20.2.1.7 Math.SQRT1_2\n  // 20.2.1.8 Math.SQRT2\n\n  // 20.2.1.9 Math [ @@toStringTag ]\n  define(Math, $$toStringTag, 'Math');\n\n  // 20.2.2 Function Properties of the Math Object\n  // 20.2.2.1 Math.abs ( x )\n  // 20.2.2.2 Math.acos ( x )\n\n  // 20.2.2.3 Math.acosh(x)\n  define(\n    Math, 'acosh',\n    function acosh(x) {\n      x = Number(x);\n      return log(x + sqrt(x * x - 1));\n    });\n\n  // 20.2.2.4 Math.asin ( x )\n\n  // 20.2.2.5 Math.asinh( x )\n  define(\n    Math, 'asinh',\n    function asinh(x) {\n      x = Number(x);\n      if (SameValue(x, -0)) {\n        return x;\n      }\n      var s = sqrt(x * x + 1);\n      return (s === -x) ? log(0) : log(x + s);\n    });\n\n  // 20.2.2.6 Math.atan ( x )\n\n  // 20.2.2.7 Math.atanh( x )\n  define(\n    Math, 'atanh',\n    function atanh(x) {\n      x = Number(x);\n      return (x === 0) ? x : log((1 + x) / (1 - x)) / 2;\n    });\n\n  // 20.2.2.8 Math.atan2 ( y, x )\n\n  // 20.2.2.9 Math.cbrt ( x )\n  define(\n    Math, 'cbrt',\n    function cbrt(x) {\n      x = Number(x);\n      if ($isNaN(x/x)) {\n        return x;\n      }\n      var r = pow(abs(x), 1/3);\n      var t = x/r/r;\n      return r + (r * (t-r) / (2*r + t));\n    });\n\n  // 20.2.2.10 Math.ceil ( x )\n\n  // 20.2.2.11 Math.clz32 ( x )\n  define(\n    Math, 'clz32',\n    function clz32(x) {\n      function clz8(x) {\n        return (x & 0xf0) ? (x & 0x80 ? 0 : x & 0x40 ? 1 : x & 0x20 ? 2 : 3) :\n        (x & 0x08 ? 4 : x & 0x04 ? 5 : x & 0x02 ? 6 : x & 0x01 ? 7 : 8);\n      }\n      x = ToUint32(x);\n      return x & 0xff000000 ? clz8(x >> 24) :\n        x & 0xff0000 ? clz8(x >> 16) + 8 :\n        x & 0xff00 ? clz8(x >> 8) + 16 : clz8(x) + 24;\n    });\n\n\n\n  // 20.2.2.12 Math.cos ( x )\n\n  // 20.2.2.13 Math.cosh ( x )\n  define(\n    Math, 'cosh',\n    function cosh(x) {\n      x = Number(x);\n      return (pow(E, x) + pow(E, -x)) / 2;\n    });\n\n  // 20.2.2.14 Math.exp ( x )\n\n  // 20.2.2.15 Math.expm1 ( x )\n  define(\n    Math, 'expm1',\n    function expm1(x) {\n      x = Number(x);\n      // from: http://www.johndcook.com/cpp_log1p.html\n      if (SameValue(x, -0)) {\n        return -0;\n      } else if (abs(x) < 1e-5) {\n        return x + 0.5 * x * x; // two terms of Taylor expansion\n      } else {\n        return exp(x) - 1;\n      }\n    });\n\n  // 20.2.2.16 Math.floor ( x )\n\n  // 20.2.2.17 Math.fround ( x )\n  define(\n    Math, 'fround',\n    function fround(x) {\n      if ($isNaN(x)) {\n        return NaN;\n      }\n      if (1/x === +Infinity || 1/x === -Infinity || x === +Infinity || x === -Infinity) {\n        return x;\n      }\n      return (new Float32Array([x]))[0];\n    });\n\n  // 20.2.2.18 Math.hypot ( value1 [, value2 [ ... ] ] )\n  define(\n    Math, 'hypot',\n    function hypot() {\n      var values = [];\n      var m = 0, sawNaN = false;\n      for (var i = 0; i < arguments.length; ++i) {\n        var n = abs(Number(arguments[i]));\n        if (n === Infinity) return n;\n        if (n !== n) sawNaN = true;\n        if (n > m) m = n;\n        values[i] = n;\n      }\n      if (sawNaN) return NaN;\n      if (m === 0) return +0;\n      var sum = +0;\n      for (i = 0; i < values.length; ++i) {\n        var r = values[i] / m;\n        sum = sum + r * r;\n      }\n      return m * sqrt(sum);\n    });\n\n  // 20.2.2.19 Math.imul ( x, y )\n  define(\n    Math, 'imul',\n    function imul(x, y) {\n      var a = ToUint32(x);\n      var b = ToUint32(y);\n      // (slow but accurate)\n      var ah  = (a >>> 16) & 0xffff;\n      var al = a & 0xffff;\n      var bh  = (b >>> 16) & 0xffff;\n      var bl = b & 0xffff;\n      return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);\n    }, ('imul' in Math && Math.imul(1, 0x80000000) === 0) // Safari 7 bug\n  );\n\n  // 20.2.2.20 Math.log ( x )\n\n  // 20.2.2.21 Math.log1p ( x )\n  define(\n    Math, 'log1p',\n    function log1p(x) {\n      x = Number(x);\n      // from: http://www.johndcook.com/cpp_expm1.html\n      if (x < -1) {\n        return NaN;\n      } else if (SameValue(x, -0)) {\n        return -0;\n      } else if (abs(x) > 1e-4) {\n        return log(1 + x);\n      } else {\n        return (-0.5 * x + 1) * x;\n      }\n    });\n\n  // 20.2.2.22 Math.log10 ( x )\n  define(\n    Math, 'log10',\n    function log10(x) {\n      x = Number(x);\n      return log(x) * LOG10E;\n    });\n\n  // 20.2.2.23 Math.log2 ( x )\n  define(\n    Math, 'log2',\n    function log2(x) {\n      x = Number(x);\n      return log(x) * LOG2E;\n    });\n\n  // 20.2.2.24 Math.max ( value1, value2 , ...values )\n  // 20.2.2.25 Math.min ( value1, value2 , ...values )\n  // 20.2.2.26 Math.pow ( x, y )\n  // 20.2.2.27 Math.random ( )\n  // 20.2.2.28 Math.round ( x )\n\n  // 20.2.2.29 Math.sign(x)\n  define(\n    Math, 'sign',\n    function sign(x) {\n      x = Number(x);\n      return x < 0 ? -1 : x > 0 ? 1 : x;\n    });\n\n  // 20.2.2.30 Math.sin ( x )\n\n  // 20.2.2.31 Math.sinh( x )\n  define(\n    Math, 'sinh',\n    function sinh(x) {\n      x = Number(x);\n      return SameValue(x, -0) ? x : (pow(E, x) - pow(E, -x)) / 2;\n    });\n\n  // 20.2.2.32 Math.sqrt ( x )\n  // 20.2.2.33 Math.tan ( x )\n\n  // 20.2.2.34 Math.tanh ( x )\n  define(\n    Math, 'tanh',\n    function tanh(x) {\n      x = Number(x);\n      var n = pow(E, 2 * x) - 1,\n          d = pow(E, 2 * x) + 1;\n      if (SameValue(x, -0))\n        return x;\n      return (n === d) ? 1 : n / d; // Handle Infinity/Infinity\n    });\n\n  // 20.2.2.35 Math.trunc ( x )\n  define(\n    Math, 'trunc',\n    function trunc(x) {\n      x = Number(x);\n      return $isNaN(x) ? NaN :\n        x < 0 ? ceil(x) : floor(x);\n    });\n\n  // ---------------------------------------\n  // 20.3 Date Objects\n  // ---------------------------------------\n\n  // 20.3.1 Overview of Date Objects and Definitions of Abstract Operations\n  // 20.3.1.1 Time Values and Time Range\n  // 20.3.1.2 Day Number and Time within Day\n  // 20.3.1.3 Year Number\n  // 20.3.1.4 Month Number\n  // 20.3.1.5 Date Number\n  // 20.3.1.6 Week Day\n  // 20.3.1.7 Local Time Zone Adjustment\n  // 20.3.1.8 Daylight Saving Time Adjustment\n  // 20.3.1.9 Local Time\n  // 20.3.1.10 Hours, Minutes, Second, and Milliseconds\n  // 20.3.1.11 MakeTime (hour, min, sec, ms)\n  // 20.3.1.12 MakeDay (year, month, date)\n  // 20.3.1.13 MakeDate (day, time)\n  // 20.3.1.14 TimeClip (time)\n  // 20.3.1.15 Date Time String Format\n  // 20.3.1.15.1 Extended years\n  // 20.3.2 The Date Constructor\n  // 20.3.2.1 Date ( year, month [, date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )\n  // 20.3.2.2 Date ( value )\n  // 20.3.2.3 Date ( )\n  // 20.3.3 Properties of the Date Constructor\n  // 20.3.3.1 Date.now ( )\n  // 20.3.3.2 Date.parse (string)\n  // 20.3.3.3 Date.prototype\n  // 20.3.3.4 Date.UTC ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )\n  // 20.3.4 Properties of the Date Prototype Object\n  // 20.3.4.1 Date.prototype.constructor\n  // 20.3.4.2 Date.prototype.getDate ( )\n  // 20.3.4.3 Date.prototype.getDay ( )\n  // 20.3.4.4 Date.prototype.getFullYear ( )\n  // 20.3.4.5 Date.prototype.getHours ( )\n  // 20.3.4.6 Date.prototype.getMilliseconds ( )\n  // 20.3.4.7 Date.prototype.getMinutes ( )\n  // 20.3.4.8 Date.prototype.getMonth ( )\n  // 20.3.4.9 Date.prototype.getSeconds ( )\n  // 20.3.4.10 Date.prototype.getTime ( )\n  // 20.3.4.11 Date.prototype.getTimezoneOffset ( )\n  // 20.3.4.12 Date.prototype.getUTCDate ( )\n  // 20.3.4.13 Date.prototype.getUTCDay ( )\n  // 20.3.4.14 Date.prototype.getUTCFullYear ( )\n  // 20.3.4.15 Date.prototype.getUTCHours ( )\n  // 20.3.4.16 Date.prototype.getUTCMilliseconds ( )\n  // 20.3.4.17 Date.prototype.getUTCMinutes ( )\n  // 20.3.4.18 Date.prototype.getUTCMonth ( )\n  // 20.3.4.19 Date.prototype.getUTCSeconds ( )\n  // 20.3.4.20 Date.prototype.setDate ( date )\n  // 20.3.4.21 Date.prototype.setFullYear ( year [ , month [ , date ] ] )\n  // 20.3.4.22 Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )\n  // 20.3.4.23 Date.prototype.setMilliseconds ( ms )\n  // 20.3.4.24 Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )\n  // 20.3.4.25 Date.prototype.setMonth ( month [ , date ] )\n  // 20.3.4.26 Date.prototype.setSeconds ( sec [ , ms ] )\n  // 20.3.4.27 Date.prototype.setTime ( time )\n  // 20.3.4.28 Date.prototype.setUTCDate ( date )\n  // 20.3.4.29 Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )\n  // 20.3.4.30 Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )\n  // 20.3.4.31 Date.prototype.setUTCMilliseconds ( ms )\n  // 20.3.4.32 Date.prototype.setUTCMinutes ( min [ , sec [, ms ] ] )\n  // 20.3.4.33 Date.prototype.setUTCMonth ( month [ , date ] )\n  // 20.3.4.34 Date.prototype.setUTCSeconds ( sec [ , ms ] )\n  // 20.3.4.35 Date.prototype.toDateString ( )\n  // 20.3.4.36 Date.prototype.toISOString ( )\n  // 20.3.4.37 Date.prototype.toJSON ( key )\n  // 20.3.4.38 Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )\n  // 20.3.4.39 Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n  // 20.3.4.40 Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )\n  // 20.3.4.41 Date.prototype.toString ( )\n  // 20.3.4.42 Date.prototype.toTimeString ( )\n  // 20.3.4.43 Date.prototype.toUTCString ( )\n  // 20.3.4.44 Date.prototype.valueOf ( )\n  // 20.3.4.45 Date.prototype [ @@toPrimitive ] ( hint )\n  // 20.3.5 Properties of Date Instances\n\n  // (No polyfillable changes from ES5)\n\n  // ---------------------------------------\n  // 21 Text Processing\n  // ---------------------------------------\n\n  var string_regexp_dispatch = (function() {\n    var faux = {}, secret = Symbol();\n    faux[Symbol.match] = function() { return secret; };\n    return (\"\").match(faux) === secret;\n  }());\n\n  // 21.1 String Objects\n  // 21.1.1 The String Constructor\n  // 21.1.1.1 String ( value )\n  // 21.1.2 Properties of the String Constructor\n  // 21.1.2.1 String.fromCharCode ( ...codeUnits )\n\n  // 21.1.2.2 String.fromCodePoint ( ...codePoints )\n  define(\n    String, 'fromCodePoint',\n    function fromCodePoint(/*...codePoints*/) {\n      var codePoints = arguments,\n          length = codePoints.length,\n          elements = [],\n          nextIndex = 0;\n      while (nextIndex < length) {\n        var next = codePoints[nextIndex];\n        var nextCP = Number(next);\n        if (!SameValue(nextCP, ToInteger(nextCP)) ||\n            nextCP < 0 || nextCP > 0x10FFFF) {\n          throw RangeError('Invalid code point ' + nextCP);\n        }\n        if (nextCP < 0x10000) {\n          elements.push(String.fromCharCode(nextCP));\n        } else {\n          nextCP -= 0x10000;\n          elements.push(String.fromCharCode((nextCP >> 10) + 0xD800));\n          elements.push(String.fromCharCode((nextCP % 0x400) + 0xDC00));\n        }\n        nextIndex += 1;\n      }\n      return elements.join('');\n    });\n\n  // 21.1.2.3 String.prototype\n\n  // 21.1.2.4 String.raw ( template , ...substitutions )\n  define(\n    String, 'raw',\n    function raw(template /*, ...substitutions*/) {\n      var substitutions = [].slice.call(arguments, 1);\n\n      var cooked = Object(template);\n      var rawValue = cooked['raw'];\n      var raw = Object(rawValue);\n      var len = raw['length'];\n      var literalSegments = ToLength(len);\n      if (literalSegments <= 0) return '';\n      var stringElements = [];\n      var nextIndex = 0;\n      while (true) {\n        var next = raw[nextIndex];\n        var nextSeg = String(next);\n        stringElements.push(nextSeg);\n        if (nextIndex + 1 === literalSegments)\n          return stringElements.join('');\n        next = substitutions[nextIndex];\n        var nextSub = String(next);\n        stringElements.push(nextSub);\n        nextIndex = nextIndex + 1;\n      }\n    });\n\n  // See https://githib.com/inexorabletash/uate for a more useful version.\n\n  // 21.1.3 Properties of the String Prototype Object\n  // 21.1.3.1 String.prototype.charAt ( pos )\n  // 21.1.3.2 String.prototype.charCodeAt ( pos )\n\n  // 21.1.3.3 String.prototype.codePointAt ( pos )\n  define(\n    String.prototype, 'codePointAt',\n    function codePointAt(pos) {\n      var o = strict(this);\n      var s = String(o);\n      var position = ToInteger(pos);\n      var size = s.length;\n      if (position < 0 || position >= size) return undefined;\n      var first = s.charCodeAt(position);\n      if (first < 0xD800 || first > 0xDBFF || position + 1 === size) return first;\n      var second = s.charCodeAt(position + 1);\n      if (second < 0xDC00 || second > 0xDFFF) return first;\n      return ((first - 0xD800) * 1024) + (second - 0xDC00) + 0x10000;\n    });\n\n  // 21.1.3.4 String.prototype.concat ( ...args )\n  // 21.1.3.5 String.prototype.constructor\n\n  // 21.1.3.6 String.prototype.endsWith ( searchString [ , endPosition] )\n  define(\n    String.prototype, 'endsWith',\n    function endsWith(searchString) {\n      var endPosition = arguments[1];\n\n      var o = strict(this);\n      var s = String(o);\n      var searchStr = String(searchString);\n      var len = s.length;\n      var pos = (endPosition === undefined) ? len : ToInteger(endPosition);\n      var end = min(max(pos, 0), len);\n      var searchLength = searchStr.length;\n      var start = end - searchLength;\n      if (start < 0) return false;\n      if (s.substring(start, start + searchLength) === searchStr) return true;\n      return false;\n    });\n\n  // 21.1.3.7 String.prototype.includes ( searchString [ , position ] )\n  define(\n    String.prototype, 'includes',\n    function includes(searchString) {\n      var position = arguments[1];\n\n      var o = strict(this);\n      var s = String(o);\n      var searchStr = String(searchString);\n      var pos = ToInteger(position);\n      var len = s.length;\n      var start = min(max(pos, 0), len);\n      return s.indexOf(searchStr, start) !== -1;\n    });\n\n  // 21.1.3.8 String.prototype.indexOf ( searchString [ , position ] )\n  // 21.1.3.9 String.prototype.lastIndexOf ( searchString [ , position ] )\n  // 21.1.3.10 String.prototype.localeCompare ( that [, reserved1 [ , reserved2 ] ] )\n  // 21.1.3.11 String.prototype.match ( regexp )\n  define(\n    String.prototype, 'match',\n    function match(regexp) {\n      var o = strict(this);\n      var s = String(o);\n      if (HasProperty(regexp, $$match)) var rx = regexp;\n      else rx = new RegExp(regexp);\n      return rx[$$match](s);\n    }, !string_regexp_dispatch);\n\n  // 21.1.3.12 String.prototype.normalize ( [ form ] )\n\n  // Not practical due to table sizes; if needed, pull in:\n  // https://github.com/walling/unorm/\n\n  // 21.1.3.13 String.prototype.repeat ( count )\n  define(\n    String.prototype, 'repeat',\n    function repeat(count) {\n      var o = strict(this);\n      var s = String(o);\n      var n = ToInteger(count);\n      if (n < 0) throw RangeError();\n      if (n === Infinity) throw RangeError();\n      var t = new Array(n + 1).join(s);\n      return t;\n    });\n\n  // 21.1.3.14 String.prototype.replace (searchValue, replaceValue )\n  define(\n    String.prototype, 'replace',\n    function replace(searchValue, replaceValue) {\n      var o = strict(this);\n      if (HasProperty(searchValue, $$replace))\n        return searchValue[$$replace](o, replaceValue);\n      return orig_replace.call(o, searchValue, replaceValue);\n    }, !string_regexp_dispatch);\n\n  // 21.1.3.15 String.prototype.search ( regexp )\n  define(\n    String.prototype, 'search',\n    function search(regexp) {\n      var o = strict(this);\n      var string = String(o);\n      if (HasProperty(regexp, $$search)) var rx = regexp;\n      else rx = new RegExp(regexp);\n      return rx[$$search](string);\n    }, !string_regexp_dispatch);\n\n  // 21.1.3.16 String.prototype.slice ( start, end )\n  // 21.1.3.17 String.prototype.split ( separator, limit )\n  define(\n    String.prototype, 'split',\n    function split(separator, limit) {\n      var o = strict(this);\n      if (HasProperty(separator, $$split))\n        return separator[$$split](o, limit);\n      return orig_split.call(o, separator, limit);\n    }, !string_regexp_dispatch);\n\n  // 21.1.3.18 String.prototype.startsWith ( searchString [, position ] )\n  define(\n    String.prototype, 'startsWith',\n    function startsWith(searchString) {\n      var position = arguments[1];\n\n      var o = strict(this);\n      var s = String(o);\n      var searchStr = String(searchString);\n      var pos = ToInteger(position);\n      var len = s.length;\n      var start = min(max(pos, 0), len);\n      var searchLength = searchStr.length;\n      if (searchLength + start > len) return false;\n      if (s.substring(start, start + searchLength) === searchStr) return true;\n      return false;\n    });\n\n  // 21.1.3.19 String.prototype.substring ( start, end )\n  // 21.1.3.20 String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )\n  // 21.1.3.21 String.prototype.toLocaleUpperCase ([ reserved1 [ , reserved2 ] ] )\n  // 21.1.3.22 String.prototype.toLowerCase ( )\n  // 21.1.3.23 String.prototype.toString ( )\n  // 21.1.3.24 String.prototype.toUpperCase ( )\n  // 21.1.3.25 String.prototype.trim ( )\n  // 21.1.3.26 String.prototype.valueOf ( )\n\n  // 21.1.3.27 String.prototype [ @@iterator ]( )\n  define(\n    String.prototype, $$iterator,\n    function entries() {\n      return CreateStringIterator(this, 'value');\n    });\n\n  // 21.1.4 Properties of String Instances\n  // 21.1.4.1 length\n\n  // 21.1.5 String Iterator Objects\n  /** @constructor */\n  function StringIterator() {}\n\n  // 21.1.5.1 CreateStringIterator Abstract Operation\n  function CreateStringIterator(string, kind) {\n    var s = String(string);\n    var iterator = new StringIterator;\n    set_internal(iterator, '[[IteratedString]]', s);\n    set_internal(iterator, '[[StringIteratorNextIndex]]', 0);\n    set_internal(iterator, '[[StringIterationKind]]', kind);\n    return iterator;\n  }\n\n  // 21.1.5.2 The %StringIteratorPrototype% Object\n  var $StringIteratorPrototype$ = Object.create($IteratorPrototype$);\n  StringIterator.prototype = $StringIteratorPrototype$;\n\n  // 21.1.5.2.1 %StringIteratorPrototype%.next ( )\n  define(\n    $StringIteratorPrototype$, 'next',\n    function next() {\n      var o = ToObject(this);\n      var s = String(o['[[IteratedString]]']),\n          index = o['[[StringIteratorNextIndex]]'],\n          len = s.length;\n      if (index >= len) {\n        set_internal(o, '[[StringIteratorNextIndex]]', Infinity);\n        return CreateIterResultObject(undefined, true);\n      }\n      var cp = s.codePointAt(index);\n      set_internal(o, '[[StringIteratorNextIndex]]', index + (cp > 0xFFFF ? 2 : 1));\n      return CreateIterResultObject(String.fromCodePoint(cp), false);\n    });\n\n  // 21.1.5.2.2 %StringIteratorPrototype% [ @@toStringTag ]\n  define($StringIteratorPrototype$, $$toStringTag, 'String Iterator');\n\n  // 21.1.5.3 Properties of String Iterator Instances\n\n  // ---------------------------------------\n  // 21.2 RegExp (Regular Expression) Objects\n  // ---------------------------------------\n\n  // 21.2.1 Patterns\n  // 21.2.2 Pattern Semantics\n  // 21.2.2.1 Notation\n  // 21.2.2.2 Pattern\n  // 21.2.2.3 Disjunction\n  // 21.2.2.4 Alternative\n  // 21.2.2.5 Term\n  // 21.2.2.6 Assertion\n  // 21.2.2.7 Quantifier\n  // 21.2.2.8 Atom\n  // 21.2.2.9 AtomEscape\n  // 21.2.2.10 CharacterEscape\n  // 21.2.2.11 DecimalEscape\n  // 21.2.2.12 CharacterClassEscape\n  // 21.2.2.13 CharacterClass\n  // 21.2.2.14 ClassRanges\n  // 21.2.2.15 NonemptyClassRanges\n  // 21.2.2.16 NonemptyClassRangesNoDash\n  // 21.2.2.17 ClassAtom\n  // 21.2.2.18 ClassAtomNoDash\n  // 21.2.2.19 ClassEscape\n  // 21.2.3 The RegExp Constructor\n  // 21.2.3.1 RegExp ( pattern, flags )\n  // 21.2.3.2 new RegExp( ...argumentsList )\n  // 21.2.3.3 Abstract Operations for the RegExp Constructor\n  // 21.2.4 Properties of the RegExp Constructor\n  // 21.2.4.1 RegExp.prototype\n  // 21.2.5 Properties of the RegExp Prototype Object\n  // 21.2.5.1 RegExp.prototype.constructor\n  // 21.2.5.2 RegExp.prototype.exec ( string )\n\n  // 21.2.5.3 get RegExp.prototype.flags\n  if (!('flags' in RegExp.prototype)) {\n    Object.defineProperty(\n      RegExp.prototype, 'flags', {\n        get: function() {\n          var s = String(this);\n          return s.substring(s.lastIndexOf('/') + 1);\n        }\n      });\n  }\n\n  // 21.2.5.4 get RegExp.prototype.global\n  // 21.2.5.5 get RegExp.prototype.ignoreCase\n\n  // 21.2.5.6 RegExp.prototype [ @@match ] ( string )\n  define(RegExp.prototype, $$match, function(string) {\n    var o = strict(this);\n    return orig_match.call(string, o);\n  });\n\n  // 21.2.5.7 get RegExp.prototype.multiline\n\n  // 21.2.5.8 RegExp.prototype [ @@replace ] ( string, replaceValue )\n  define(RegExp.prototype, $$replace, function(string, replaceValue) {\n    var o = strict(this);\n    return orig_replace.call(string, o, replaceValue);\n  });\n\n  // 21.2.5.9 RegExp.prototype [ @@search ] ( string )\n  define(RegExp.prototype, $$search, function(string) {\n    var o = strict(this);\n    return orig_search.call(string, o);\n  });\n\n  // 21.2.5.10 get RegExp.prototype.source\n\n  // 21.2.5.11 RegExp.prototype [ @@split ] ( string, limit )\n  define(RegExp.prototype, $$split, function(string, limit) {\n    var o = strict(this);\n    return orig_split.call(string, o, limit);\n  });\n\n  // 21.2.5.12 get RegExp.prototype.sticky\n  // 21.2.5.13 RegExp.prototype.test( S )\n  // 21.2.5.14 RegExp.prototype.toString ( )\n  // 21.2.5.15 get RegExp.prototype.unicode\n\n  // 21.2.6 Properties of RegExp Instances\n  // 21.2.6.1 lastIndex\n\n  // (No polyfillable changes from ES5)\n\n  // ---------------------------------------\n  // 22 Indexed Collections\n  // ---------------------------------------\n\n  // ---------------------------------------\n  // 22.1 Array Objects\n  // ---------------------------------------\n\n  // 22.1.1 The Array Constructor\n  // 22.1.1.1 Array ( )\n  // 22.1.1.2 Array (len)\n  // 22.1.1.3 Array (...items )\n\n  // 22.1.2 Properties of the Array Constructor\n\n  // 22.1.2.1 Array.from ( items [ , mapfn [ , thisArg ] ] )\n  define(\n    Array, 'from',\n    function from(items) {\n      var mapfn = arguments[1];\n      var thisArg = arguments[2];\n\n      var c = strict(this);\n      if (mapfn === undefined) {\n        var mapping = false;\n      } else {\n        if (!IsCallable(mapfn)) throw TypeError();\n        var t = thisArg;\n        mapping = true;\n      }\n      var usingIterator = GetMethod(items, $$iterator);\n      if (usingIterator !== undefined) {\n         if (IsConstructor(c)) {\n          var a = new c();\n        } else {\n          a = new Array(0);\n        }\n        var iterator = GetIterator(items, usingIterator);\n        var k = 0;\n        while (true) {\n          var next = IteratorStep(iterator);\n          if (next === false) {\n            a.length = k;\n            return a;\n          }\n          var nextValue = IteratorValue(next);\n          if (mapping)\n            var mappedValue = mapfn.call(t, nextValue);\n          else\n            mappedValue = nextValue;\n          a[k] = mappedValue;\n          k += 1;\n        }\n      }\n      var arrayLike = ToObject(items);\n      var lenValue = arrayLike.length;\n      var len = ToLength(lenValue);\n      if (IsConstructor(c)) {\n        a = new c(len);\n      } else {\n        a = new Array(len);\n      }\n      k = 0;\n      while (k < len) {\n        var kValue = arrayLike[k];\n        if (mapping)\n          mappedValue = mapfn.call(t, kValue, k);\n        else\n          mappedValue = kValue;\n        a[k] = mappedValue;\n        k += 1;\n      }\n      a.length = len;\n      return a;\n    });\n\n  // 22.1.2.2 Array.isArray ( arg )\n\n  // 22.1.2.3 Array.of ( ...items )\n  define(\n    Array, 'of',\n    function of() {\n      var items = arguments;\n\n      var lenValue = items.length;\n      var len = ToUint32(lenValue);\n      var c = strict(this), a;\n      if (IsConstructor(c)) {\n        a = new c(len);\n        a = ToObject(a);\n      } else {\n        a = new Array(len);\n      }\n      var k = 0;\n      while (k < len) {\n        a[k] = items[k];\n        k += 1;\n      }\n      a.length = len;\n      return a;\n    });\n\n  // 22.1.2.4 Array.prototype\n  // 22.1.2.5 get Array [ @@species ]\n  // 22.1.3 Properties of the Array Prototype Object\n  // 22.1.3.1 Array.prototype.concat ( ...arguments )\n  // 22.1.3.1.1 Runtime Semantics: IsConcatSpreadable ( O )\n  // 22.1.3.2 Array.prototype.constructor\n  // 22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n  define(\n    Array.prototype, 'copyWithin',\n    function copyWithin(target, start/*, end*/) {\n      var end = arguments[2];\n\n      var o = ToObject(this);\n      var lenVal = o.length;\n      var len = ToLength(lenVal);\n      len = max(len, 0);\n      var relativeTarget = ToInteger(target);\n      var to;\n      if (relativeTarget < 0)\n        to = max(len + relativeTarget, 0);\n      else\n        to = min(relativeTarget, len);\n      var relativeStart = ToInteger(start);\n      var from;\n      if (relativeStart < 0)\n        from = max(len + relativeStart, 0);\n      else\n        from = min(relativeStart, len);\n      var relativeEnd;\n      if (end === undefined)\n        relativeEnd = len;\n      else\n        relativeEnd = ToInteger(end);\n      var final;\n      if (relativeEnd < 0)\n        final = max(len + relativeEnd, 0);\n      else\n        final = min(relativeEnd, len);\n      var count = min(final - from, len - to);\n      var direction;\n      if (from < to && to < from + count) {\n        direction = -1;\n        from = from + count - 1;\n        to = to + count - 1;\n      } else {\n        direction = 1;\n      }\n      while (count > 0) {\n        var fromKey = String(from);\n        var toKey = String(to);\n        var fromPresent = HasProperty(o, fromKey);\n        if (fromPresent) {\n          var fromVal = o[fromKey];\n          o[toKey] = fromVal;\n        } else {\n          delete o[toKey];\n        }\n        from = from + direction;\n        to = to + direction;\n        count = count - 1;\n      }\n      return o;\n    });\n\n  // 22.1.3.4 Array.prototype.entries ( )\n  var nativeArrayIteratorMethods =\n        ('entries' in Array.prototype && 'next' in [].entries());\n\n  define(\n    Array.prototype, 'entries',\n    function entries() {\n      return CreateArrayIterator(this, 'key+value');\n    }, !nativeArrayIteratorMethods);\n\n  // 22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg] )\n\n  // 22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n  define(\n    Array.prototype, 'fill',\n    function fill(value/*, start, end*/) {\n      var start = arguments[1],\n          end = arguments[2];\n\n      var o = ToObject(this);\n      var lenVal = o.length;\n      var len = ToLength(lenVal);\n      len = max(len, 0);\n      var relativeStart = ToInteger(start);\n      var k;\n      if (relativeStart < 0)\n        k = max((len + relativeStart), 0);\n      else\n        k = min(relativeStart, len);\n      var relativeEnd;\n      if (end === undefined)\n        relativeEnd = len;\n      else\n        relativeEnd = ToInteger(end);\n      var final;\n      if (relativeEnd < 0)\n        final = max((len + relativeEnd), 0);\n      else\n        final = min(relativeEnd, len);\n      while (k < final) {\n        var pk = String(k);\n        o[pk] = value;\n        k += 1;\n      }\n      return o;\n    });\n\n  // 22.1.3.7 Array.prototype.filter ( callbackfn [ , thisArg ] )\n\n  // 22.1.3.8 Array.prototype.find ( predicate [ , thisArg ] )\n  define(\n    Array.prototype, 'find',\n    function find(predicate) {\n      var o = ToObject(this);\n      var lenValue = o.length;\n      var len = ToInteger(lenValue);\n      if (!IsCallable(predicate)) throw TypeError();\n      var t = arguments.length > 1 ? arguments[1] : undefined;\n      var k = 0;\n      while (k < len) {\n        var pk = String(k);\n        var kPresent = HasProperty(o, pk);\n        if (kPresent) {\n          var kValue = o[pk];\n          var testResult = predicate.call(t, kValue, k, o);\n          if (Boolean(testResult)) {\n            return kValue;\n          }\n        }\n        ++k;\n      }\n      return undefined;\n    });\n\n  // 22.1.3.9 Array.prototype.findIndex ( predicate [ , thisArg ] )\n  define(\n    Array.prototype, 'findIndex',\n    function findIndex(predicate) {\n      var o = ToObject(this);\n      var lenValue = o.length;\n      var len = ToLength(lenValue);\n      if (!IsCallable(predicate)) throw TypeError();\n      var t = arguments.length > 1 ? arguments[1] : undefined;\n      var k = 0;\n      while (k < len) {\n        var pk = String(k);\n        var kPresent = HasProperty(o, pk);\n        if (kPresent) {\n          var kValue = o[pk];\n          var testResult = predicate.call(t, kValue, k, o);\n          if (Boolean(testResult)) {\n            return k;\n          }\n        }\n        ++k;\n      }\n      return -1;\n    });\n\n  // 22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n  // 22.1.3.11 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n  // 22.1.3.12 Array.prototype.join (separator)\n\n  // 22.1.3.13 Array.prototype.keys ( )\n  define(\n    Array.prototype, 'keys',\n    function keys() {\n      return CreateArrayIterator(this, 'key');\n    }, !nativeArrayIteratorMethods);\n\n  // 22.1.3.14 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n  // 22.1.3.15 Array.prototype.map ( callbackfn [ , thisArg ] )\n  // 22.1.3.16 Array.prototype.pop ( )\n  // 22.1.3.17 Array.prototype.push ( ...items )\n  // 22.1.3.18 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n  // 22.1.3.19 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n  // 22.1.3.20 Array.prototype.reverse ( )\n  // 22.1.3.21 Array.prototype.shift ( )\n  // 22.1.3.22 Array.prototype.slice (start, end)\n  // 22.1.3.23 Array.prototype.some ( callbackfn [ , thisArg ] )\n  // 22.1.3.24 Array.prototype.sort (comparefn)\n  // 22.1.3.25 Array.prototype.splice (start, deleteCount , ...items )\n  // 22.1.3.26 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n  // 22.1.3.27 Array.prototype.toString ( )\n  // 22.1.3.28 Array.prototype.unshift ( ...items )\n\n  // 22.1.3.29 Array.prototype.values ( )\n  define(\n    Array.prototype, 'values',\n    function values() {\n      return CreateArrayIterator(this, 'value');\n    }, !nativeArrayIteratorMethods);\n\n  // 22.1.3.30 Array.prototype [ @@iterator ] ( )\n  define(\n    Array.prototype, $$iterator,\n    Array.prototype.values\n    );\n\n  // 22.1.3.31 Array.prototype [ @@unscopables ]\n  // 22.1.4 Properties of Array Instances\n  // 22.1.4.1 length\n\n  // 22.1.5 Array Iterator Objects\n  function ArrayIterator() {}\n\n  // 22.1.5.1 CreateArrayIterator Abstract Operation\n  function CreateArrayIterator(array, kind) {\n    var o = ToObject(array);\n    var iterator = new ArrayIterator;\n    set_internal(iterator, '[[IteratedObject]]', o);\n    set_internal(iterator, '[[ArrayIteratorNextIndex]]', 0);\n    set_internal(iterator, '[[ArrayIterationKind]]', kind);\n    return iterator;\n  }\n\n  // 22.1.5.2 The %ArrayIteratorPrototype% Object\n  var $ArrayIteratorPrototype$ = Object.create($IteratorPrototype$);\n  ArrayIterator.prototype = $ArrayIteratorPrototype$;\n\n  // 22.1.5.2.1 %ArrayIteratorPrototype%. next( )\n  define(\n    $ArrayIteratorPrototype$, 'next',\n    function next() {\n      var o = strict(this);\n      if (Type(o) !== 'object') throw TypeError();\n      var a = o['[[IteratedObject]]'],\n          index = o['[[ArrayIteratorNextIndex]]'],\n          itemKind = o['[[ArrayIterationKind]]'],\n          lenValue = a.length,\n          len = ToUint32(lenValue),\n          elementKey,\n          elementValue;\n      if (itemKind.indexOf('sparse') !== -1) {\n        var found = false;\n        while (!found && index < len) {\n          elementKey = String(index);\n          found = HasProperty(a, elementKey);\n          if (!found) {\n            index += 1;\n          }\n        }\n      }\n      if (index >= len) {\n        set_internal(o, '[[ArrayIteratorNextIndex]]', Infinity);\n        return CreateIterResultObject(undefined, true);\n      }\n      elementKey = index;\n      set_internal(o, '[[ArrayIteratorNextIndex]]', index + 1);\n      if (itemKind.indexOf('value') !== -1)\n        elementValue = a[elementKey];\n      if (itemKind.indexOf('key+value') !== -1)\n        return CreateIterResultObject([elementKey, elementValue], false);\n      if (itemKind.indexOf('key') !== -1)\n        return CreateIterResultObject(elementKey, false);\n      if (itemKind === 'value')\n        return CreateIterResultObject(elementValue, false);\n      throw Error('Internal error');\n    });\n\n  // 22.1.5.2.2 %ArrayIteratorPrototype% [ @@toStringTag ]\n  define($ArrayIteratorPrototype$, $$toStringTag, 'Array Iterator');\n\n  // 22.1.5.3 Properties of Array Iterator Instances\n\n\n  // ---------------------------------------\n  // 22.2 TypedArray Objects\n  // ---------------------------------------\n\n  // See typedarray.js for TypedArray polyfill\n\n  ['Int8Array', 'Uint8Array', 'Uint8ClampedArray',\n   'Int16Array', 'Uint16Array',\n   'Int32Array', 'Uint32Array',\n   'Float32Array', 'Float64Array'].forEach(function ($TypedArrayName$) {\n     if (!($TypedArrayName$ in global))\n       return;\n     var $TypedArray$ = global[$TypedArrayName$];\n\n     // 22.2.1 The %TypedArray% Intrinsic Object\n     // 22.2.1.1 %TypedArray% ( length )\n     // 22.2.1.2 %TypedArray% ( typedArray )\n     // 22.2.1.3 %TypedArray% ( object )\n     // 22.2.1.4 %TypedArray% ( buffer [ , byteOffset [ , length ] ] )\n     // 22.2.1.5 %TypedArray% ( all other argument combinations )\n     // 22.2.2 Properties of the %TypedArray% Intrinsic Object\n\n     // 22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n     define(\n       $TypedArray$, 'from',\n       function from(source) {\n         var mapfn = arguments[1];\n         var thisArg = arguments[2];\n\n         var c = strict(this);\n         if (!IsConstructor(c)) throw TypeError();\n         if (mapfn === undefined) {\n           var mapping = false;\n         } else {\n           if (IsCallable(mapfn)) throw TypeError();\n           var t = thisArg;\n           mapping = true;\n         }\n         var usingIterator = GetMethod(source, $$iterator);\n         if (usingIterator !== undefined) {\n           var iterator = GetIterator(source, usingIterator);\n           var values = [];\n           var next = true;\n           while (next !== false) {\n             next = IteratorStep(iterator);\n             if (next !== false) {\n               var nextValue = IteratorValue(next);\n               values.push(nextValue);\n             }\n           }\n           var len = values.length;\n           var newObj = new c(len);\n           var k = 0;\n           while (k < len) {\n             var kValue = values.shift();\n             if (mapping) {\n               var mappedValue = mapfn.call(t, kValue);\n             } else {\n               mappedValue = kValue;\n             }\n             newObj[k] = mappedValue;\n             ++k;\n           }\n           console.assert(values.length === 0);\n           return newObj;\n         }\n         var arrayLike = ToObject(source);\n         var lenValue = arrayLike.length;\n         len = ToLength(lenValue);\n         newObj = new c(len);\n         k = 0;\n         while (k < len) {\n           kValue = arrayLike[k];\n           if (mapping) {\n             mappedValue = mapfn.call(t, kValue, k);\n           } else {\n             mappedValue = kValue;\n           }\n           newObj[k] = mappedValue;\n           ++k;\n         }\n         return newObj;\n       });\n\n     // 22.2.2.2 %TypedArray%.of ( ...items )\n     define(\n       $TypedArray$, 'of',\n       function of() {\n         var items = arguments;\n\n         var len = items.length;\n         var c = strict(this);\n         var newObj = new c(len);\n         var k = 0;\n         while (k < len) {\n           newObj[k] = items[k];\n           ++k;\n         }\n         return newObj;\n       });\n\n     // 22.2.2.3 %TypedArray%.prototype\n     // 22.2.2.4 get %TypedArray% [ @@species ]\n     // 22.2.3 Properties of the %TypedArrayPrototype% Object\n     // 22.2.3.1 get %TypedArray%.prototype.buffer\n     // 22.2.3.2 get %TypedArray%.prototype.byteLength\n     // 22.2.3.3 get %TypedArray%.prototype.byteOffset\n     // 22.2.3.4 %TypedArray%.prototype.constructor\n\n     // 22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [, end ] )\n     define($TypedArray$.prototype, 'copyWithin', Array.prototype.copyWithin);\n\n     // 22.2.3.6 %TypedArray%.prototype.entries ( )\n     define($TypedArray$.prototype, 'entries', Array.prototype.entries);\n\n     // 22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n     define($TypedArray$.prototype, 'every', Array.prototype.every);\n\n     // 22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n     define(\n       $TypedArray$.prototype, 'fill',\n       //Array.prototype.fill // Doesn't work in Safari 7\n       function fill(value/*, start, end*/) {\n         var start = arguments[1],\n             end = arguments[2];\n\n         var o = ToObject(this);\n         var lenVal = o.length;\n         var len = ToLength(lenVal);\n         len = max(len, 0);\n         var relativeStart = ToInteger(start);\n         var k;\n         if (relativeStart < 0) k = max((len + relativeStart), 0);\n         else k = min(relativeStart, len);\n         var relativeEnd;\n         if (end === undefined) relativeEnd = len;\n         else relativeEnd = ToInteger(end);\n         var final;\n         if (relativeEnd < 0) final = max((len + relativeEnd), 0);\n         else final = min(relativeEnd, len);\n         while (k < final) {\n           var pk = String(k);\n           o[pk] = value;\n           k += 1;\n         }\n         return o;\n       });\n\n     // 22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n     define(\n       $TypedArray$.prototype, 'filter',\n       function filter(callbackfn) {\n         var thisArg = arguments[1];\n\n         var o = ToObject(this);\n         var lenVal = o.length;\n         var len = ToLength(lenVal);\n         if (!IsCallable(callbackfn)) throw TypeError();\n         var t = thisArg;\n         var c = o.constructor;\n         var kept = [];\n         var k = 0;\n         var captured = 0;\n         while (k < len) {\n           var kValue = o[k];\n           var selected = callbackfn.call(t, kValue, k, o);\n           if (selected) {\n             kept.push(kValue);\n             ++captured;\n           }\n           ++k;\n         }\n         var a = new c(captured);\n         var n = 0;\n         for (var i = 0; i < kept.length; ++i) {\n           var e = kept[i];\n           a[n] = e;\n           ++n;\n         }\n         return a;\n       });\n\n     // 22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n     define($TypedArray$.prototype, 'find', Array.prototype.find);\n\n     // 22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n     define($TypedArray$.prototype, 'findIndex', Array.prototype.findIndex);\n\n     // 22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n     define($TypedArray$.prototype, 'forEach', Array.prototype.forEach);\n\n     // 22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n     define($TypedArray$.prototype, 'indexOf', Array.prototype.indexOf);\n\n     // 22.2.3.14 %TypedArray%.prototype.join ( separator )\n     define($TypedArray$.prototype, 'join', Array.prototype.join);\n\n     // 22.2.3.15 %TypedArray%.prototype.keys ( )\n     define($TypedArray$.prototype, 'keys', Array.prototype.keys);\n\n     // 22.2.3.16 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n     define($TypedArray$.prototype, 'lastIndexOf', Array.prototype.lastIndexOf);\n\n     // 22.2.3.17 get %TypedArray%.prototype.length\n\n     // 22.2.3.18 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n     define(\n       $TypedArray$.prototype, 'map',\n       function map(callbackfn) {\n         var thisArg = arguments[1];\n\n         var o = ToObject(this);\n         var lenValue = o.length;\n         var len = ToLength(lenValue);\n         if (!IsCallable(callbackfn)) throw TypeError();\n         var t = thisArg;\n         var a = undefined;\n         var c = o.constructor;\n         if (IsConstructor(c))\n           a = new c(len);\n         if (a === undefined)\n           a = new Array(len);\n         var k = 0;\n         while (k < len) {\n           var kPresent = HasProperty(o, k);\n           if (kPresent) {\n             var kValue = o[k];\n             var mappedValue = callbackfn.call(t, kValue, k, o);\n             a[k] = mappedValue;\n           }\n           ++k;\n         }\n         return a;\n       });\n\n     // 22.2.3.19 %TypedArray%.prototype.reduce ( callbackfn [, initialValue] )\n     define($TypedArray$.prototype, 'reduce', Array.prototype.reduce);\n\n     // 22.2.3.20 %TypedArray%.prototype.reduceRight ( callbackfn [, initialValue] )\n     define($TypedArray$.prototype, 'reduceRight', Array.prototype.reduceRight);\n\n     // 22.2.3.21 %TypedArray%.prototype.reverse ( )\n     define($TypedArray$.prototype, 'reverse', Array.prototype.reverse);\n\n     // 22.2.3.22 %TypedArray%.prototype.set ( overloaded [ , offset ])\n     // 22.2.3.22.1 %TypedArray%.prototype.set (array [ , offset ] )\n     // 22.2.3.22.2 %TypedArray%.prototype.set(typedArray [, offset ] )\n\n     // 22.2.3.23 %TypedArray%.prototype.slice ( start, end )\n     define(\n       $TypedArray$.prototype, 'slice',\n       function slice(start, end) {\n         var o = ToObject(this);\n         var lenVal = o.length;\n         var len = ToLength(lenVal);\n         var relativeStart = ToInteger(start);\n         var k = (relativeStart < 0) ? max(len + relativeStart, 0) : min(relativeStart, len);\n         var relativeEnd = (end === undefined) ? len : ToInteger(end);\n         var final = (relativeEnd < 0) ? max(len + relativeEnd, 0) : min(relativeEnd, len);\n         var count = final - k;\n         var c = o.constructor;\n         if (IsConstructor(c)) {\n           var a = new c(count);\n         } else {\n           throw TypeError();\n         }\n         var n = 0;\n         while (k < final) {\n           var kValue = o[k];\n           a[n] = kValue;\n           ++k;\n           ++n;\n         }\n         return a;\n       });\n\n     // 22.2.3.24 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n     define($TypedArray$.prototype, 'some', Array.prototype.some);\n\n     // 22.2.3.25 %TypedArray%.prototype.sort ( comparefn )\n     define(\n       $TypedArray$.prototype, 'sort',\n       function sort() {\n         var comparefn = arguments[0];\n\n         function sortCompare(x, y) {\n           console.assert(Type(x) === 'number' && Type(y) === 'number');\n           if (x !== x && y !== y) return +0;\n           if (x !== x) return 1;\n           if (y !== y) return -1;\n           if (comparefn !== undefined) {\n             return comparefn(x, y);\n           }\n           if (x < y) return -1;\n           if (x > y) return 1;\n           return +0;\n         }\n         return Array.prototype.sort.call(this, sortCompare);\n       });\n\n     // 22.2.3.26 %TypedArray%.prototype.subarray( [ begin [ , end ] ] )\n     // 22.2.3.27 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n     // 22.2.3.28 %TypedArray%.prototype.toString ( )\n\n     // 22.2.3.29 %TypedArray%.prototype.values ( )\n     define($TypedArray$.prototype, 'values', Array.prototype.values);\n\n     // 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( )\n     define(\n       $TypedArray$.prototype, $$iterator,\n       $TypedArray$.prototype.values\n     );\n\n     // 22.2.3.31 get %TypedArray%.prototype [ @@toStringTag ]\n     define($TypedArray$.prototype, $$toStringTag, $TypedArrayName$);\n\n     // 22.2.4 The TypedArray Constructors\n     // 22.2.4.1TypedArray( ... argumentsList)\n     // 22.2.5 Properties of the TypedArray Constructors\n     // 22.2.5.1 TypedArray.BYTES_PER_ELEMENT\n     // 22.2.5.2 TypedArray.prototype\n     // 22.2.6 Properties of TypedArray Prototype Objects\n     // 22.2.6.1 TypedArray.prototype.BYTES_PER_ELEMENT\n     // 22.2.6.2 TypedArray.prototype.constructor\n     // 22.2.7 Properties of TypedArray Instances\n   });\n\n  // ---------------------------------------\n  // 23 Keyed Collection\n  // ---------------------------------------\n\n  // ---------------------------------------\n  // 23.1 Map Objects\n  // ---------------------------------------\n\n  (function() {\n    // 23.1.1 The Map Constructor\n\n    // 23.1.1.1 Map ( [ iterable ] )\n    /** @constructor */\n    function Map(/*iterable*/) {\n      var map = strict(this);\n      var iterable = arguments[0];\n\n      if (Type(map) !== 'object') throw TypeError();\n      if ('[[MapData]]' in map) throw TypeError();\n\n      if (iterable !== undefined) {\n        var adder = map['set'];\n        if (!IsCallable(adder)) throw TypeError();\n        var iter = GetIterator(ToObject(iterable));\n      }\n      set_internal(map, '[[MapData]]', { keys: [], values: [] });\n      if (iter === undefined) return map;\n      while (true) {\n        var next = IteratorStep(iter);\n        if (next === false)\n          return map;\n        var nextItem = IteratorValue(next);\n        if (Type(nextItem) !== 'object') throw TypeError();\n        var k = nextItem[0];\n        var v = nextItem[1];\n        adder.call(map, k, v);\n      }\n\n      return map;\n    }\n\n    if (!('Map' in global) || OVERRIDE_NATIVE_FOR_TESTING ||\n        (function() { try { new global.Map([]); return false; } catch (_) { return true; } }()) ||\n        (function() { try { return !new global.Map().entries().next; } catch (_) { return true; } }()) ||\n        (new global.Map([['a', 1]]).size !== 1))\n      global.Map = Map;\n\n\n    function MapDataIndexOf(mapData, key) {\n      var i;\n      if (key === key) return mapData.keys.indexOf(key);\n      // Slow case for NaN\n      for (i = 0; i < mapData.keys.length; i += 1)\n        if (SameValueZero(mapData.keys[i], key)) return i;\n      return -1;\n    }\n\n    // 23.1.1.2 new Map ( ... argumentsList )\n    // 23.1.2 Properties of the Map Constructor\n    // 23.1.2.1 Map.prototype\n    var $MapPrototype$ = {};\n    Map.prototype = $MapPrototype$;\n\n    // 23.1.2.2 get Map [ @@species ]\n\n    // 23.1.3 Properties of the Map Prototype Object\n    // 23.1.3.1 Map.prototype.clear ()\n    define(\n      Map.prototype, 'clear',\n      function clear() {\n        var m = strict(this);\n        if (Type(m) !== 'object') throw TypeError();\n        if (!('[[MapData]]' in m)) throw TypeError();\n        if (m['[[MapData]]'] === undefined) throw TypeError();\n        var entries = m['[[MapData]]'];\n        entries.keys.length = 0;\n        entries.values.length = 0;\n        return undefined;\n      });\n\n    // 23.1.3.2 Map.prototype.constructor\n\n    // 23.1.3.3 Map.prototype.delete ( key )\n    define(\n      Map.prototype, 'delete',\n      function delete_(key) {\n        var m = strict(this);\n        if (Type(m) !== 'object') throw TypeError();\n        if (!('[[MapData]]' in m)) throw TypeError();\n        if (m['[[MapData]]'] === undefined) throw TypeError();\n        var entries = m['[[MapData]]'];\n        var i = MapDataIndexOf(entries, key);\n        if (i < 0) return false;\n        entries.keys[i] = empty;\n        entries.values[i] = empty;\n        return true;\n      });\n\n    // 23.1.3.4 Map.prototype.entries ( )\n    define(\n      Map.prototype, 'entries',\n      function entries() {\n        var m = strict(this);\n        if (Type(m) !== 'object') throw TypeError();\n        return CreateMapIterator(m, 'key+value');\n      });\n\n    // 23.1.3.5 Map.prototype.forEach ( callbackfn [ , thisArg ] )\n    define(\n      Map.prototype, 'forEach',\n      function forEach(callbackfn /*, thisArg*/) {\n        var thisArg = arguments[1];\n\n        var m = strict(this);\n        if (Type(m) !== 'object') throw TypeError();\n        if (!('[[MapData]]' in m)) throw TypeError();\n        if (m['[[MapData]]'] === undefined) throw TypeError();\n        var entries = m['[[MapData]]'];\n\n        if (!IsCallable(callbackfn)) {\n          throw TypeError('First argument to forEach is not callable.');\n        }\n        for (var i = 0; i < entries.keys.length; ++i) {\n          if (entries.keys[i] !== empty) {\n            callbackfn.call(thisArg, entries.values[i], entries.keys[i], m);\n          }\n        }\n        return undefined;\n      });\n\n    // 23.1.3.6 Map.prototype.get ( key )\n    define(\n      Map.prototype, 'get',\n      function get(key) {\n        var m = strict(this);\n        if (Type(m) !== 'object') throw TypeError();\n        if (!('[[MapData]]' in m)) throw TypeError();\n        if (m['[[MapData]]'] === undefined) throw TypeError();\n        var entries = m['[[MapData]]'];\n        var i = MapDataIndexOf(entries, key);\n        if (i >= 0) return entries.values[i];\n        return undefined;\n      });\n\n    // 23.1.3.7 Map.prototype.has ( key )\n    define(\n      Map.prototype, 'has',\n      function has(key) {\n        var m = strict(this);\n        if (Type(m) !== 'object') throw TypeError();\n        if (!('[[MapData]]' in m)) throw TypeError();\n        if (m['[[MapData]]'] === undefined) throw TypeError();\n        var entries = m['[[MapData]]'];\n        if (MapDataIndexOf(entries, key) >= 0) return true;\n        return false;\n      });\n\n    // 23.1.3.8 Map.prototype.keys ( )\n    define(\n      Map.prototype, 'keys',\n      function keys() {\n        var m = strict(this);\n        if (Type(m) !== 'object') throw TypeError();\n        return CreateMapIterator(m, 'key');\n      });\n\n    // 23.1.3.9 Map.prototype.set ( key , value )\n    define(\n      Map.prototype, 'set',\n      function set(key, value) {\n        var m = strict(this);\n        if (Type(m) !== 'object') throw TypeError();\n        if (!('[[MapData]]' in m)) throw TypeError();\n        if (m['[[MapData]]'] === undefined) throw TypeError();\n        var entries = m['[[MapData]]'];\n        var i = MapDataIndexOf(entries, key);\n        if (i < 0) i = entries.keys.length;\n        if (SameValue(key, -0)) key = 0;\n        entries.keys[i] = key;\n        entries.values[i] = value;\n        return m;\n      });\n\n    // 23.1.3.10 get Map.prototype.size\n    Object.defineProperty(\n      Map.prototype, 'size', {\n        get: function() {\n          var m = strict(this);\n          if (Type(m) !== 'object') throw TypeError();\n          if (!('[[MapData]]' in m)) throw TypeError();\n          if (m['[[MapData]]'] === undefined) throw TypeError();\n          var entries = m['[[MapData]]'];\n          var count = 0;\n          for (var i = 0; i < entries.keys.length; ++i) {\n            if (entries.keys[i] !== empty)\n              count = count + 1;\n          }\n          return count;\n        }\n      });\n\n    // 23.1.3.11 Map.prototype.values ( )\n    define(\n      Map.prototype, 'values',\n      function values() {\n        var m = strict(this);\n        if (Type(m) !== 'object') throw TypeError();\n        return CreateMapIterator(m, 'value');\n      });\n\n    // 23.1.3.12 Map.prototype [ @@iterator ]( )\n    define(\n      Map.prototype, $$iterator,\n      function() {\n        var m = strict(this);\n        if (Type(m) !== 'object') throw TypeError();\n        return CreateMapIterator(m, 'key+value');\n      });\n\n    // 23.1.3.13 Map.prototype [ @@toStringTag ]\n    define(global.Map.prototype, $$toStringTag, 'Map');\n\n    // 23.1.4 Properties of Map Instances\n    // 23.1.5 Map Iterator Objects\n\n    /** @constructor */\n    function MapIterator() {}\n\n    // 23.1.5.1 CreateMapIterator Abstract Operation\n    function CreateMapIterator(map, kind) {\n      if (Type(map) !== 'object') throw TypeError();\n      if (!('[[MapData]]' in map)) throw TypeError();\n      if (map['[[MapData]]'] === undefined) throw TypeError();\n      var iterator = new MapIterator;\n      set_internal(iterator, '[[Map]]', map);\n      set_internal(iterator, '[[MapNextIndex]]', 0);\n      set_internal(iterator, '[[MapIterationKind]]', kind);\n      return iterator;\n    }\n\n    // 23.1.5.2 The %MapIteratorPrototype% Object\n    var $MapIteratorPrototype$ = Object.create($IteratorPrototype$);\n    MapIterator.prototype = $MapIteratorPrototype$;\n\n    // 23.1.5.2.1 %MapIteratorPrototype%.next ( )\n    define(\n      $MapIteratorPrototype$, 'next',\n      function next() {\n        var o = strict(this);\n        if (Type(o) !== 'object') throw TypeError();\n        var m = o['[[Map]]'],\n            index = o['[[MapNextIndex]]'],\n            itemKind = o['[[MapIterationKind]]'],\n            entries = m['[[MapData]]'];\n        while (index < entries.keys.length) {\n          var e = {key: entries.keys[index], value: entries.values[index]};\n          index = index += 1;\n          set_internal(o, '[[MapNextIndex]]', index);\n          if (e.key !== empty) {\n            if (itemKind === 'key') {\n              return CreateIterResultObject(e.key, false);\n            } else if (itemKind === 'value') {\n              return CreateIterResultObject(e.value, false);\n            } else {\n              return CreateIterResultObject([e.key, e.value], false);\n            }\n          }\n        }\n        return CreateIterResultObject(undefined, true);\n      });\n\n    // 23.1.5.2.2 %MapIteratorPrototype% [ @@toStringTag ]\n    define($MapIteratorPrototype$, $$toStringTag, 'Map Iterator');\n\n    // 23.1.5.3 Properties of Map Iterator Instances\n  }());\n\n  // ---------------------------------------\n  // 23.2 Set Objects\n  // ---------------------------------------\n\n  (function() {\n    // 23.2.1 The Set Constructor\n    // 23.2.1.1 Set ( [ iterable ] )\n\n    /** @constructor */\n    function Set(/*iterable*/) {\n      var set = strict(this);\n      var iterable = arguments[0];\n\n      if (Type(set) !== 'object') throw TypeError();\n      if ('[[SetData]]' in set) throw TypeError();\n\n      if (iterable !== undefined) {\n        var adder = set['add'];\n        if (!IsCallable(adder)) throw TypeError();\n        var iter = GetIterator(ToObject(iterable));\n      }\n      set_internal(set, '[[SetData]]', []);\n      if (iter === undefined) return set;\n      while (true) {\n        var next = IteratorStep(iter);\n        if (next === false)\n          return set;\n        var nextValue = IteratorValue(next);\n        adder.call(set, nextValue);\n      }\n\n      return set;\n    }\n\n    if (!('Set' in global) || OVERRIDE_NATIVE_FOR_TESTING ||\n        (function() { try { return !new global.Set().entries().next; } catch (_) { return true; } }()) ||\n        (new global.Set([1]).size !== 1))\n      global.Set = Set;\n\n    function SetDataIndexOf(setData, key) {\n      var i;\n      if (key === key)\n        return setData.indexOf(key);\n      // Slow case for NaN\n      for (i = 0; i < setData.length; i += 1)\n        if (SameValueZero(setData[i], key)) return i;\n      return -1;\n    }\n\n    // 23.2.1.2 new Set ( ...argumentsList )\n    // 23.2.2 Properties of the Set Constructor\n\n    // 23.2.2.1 Set.prototype\n    var $SetPrototype$ =  {};\n    Set.prototype = $SetPrototype$;\n\n    // 23.2.2.2 get Set [ @@species ]\n    // 23.2.3 Properties of the Set Prototype Object\n\n    // 23.2.3.1 Set.prototype.add (value )\n    define(\n      Set.prototype, 'add',\n      function add(value) {\n        var s = strict(this);\n        if (Type(s) !== 'object') throw TypeError();\n        if (!('[[SetData]]' in s)) throw TypeError();\n        if (s['[[SetData]]'] === undefined) throw TypeError();\n        if (SameValue(value, -0)) value = 0;\n        var entries = s['[[SetData]]'];\n        var i = SetDataIndexOf(entries, value);\n        if (i < 0) i = s['[[SetData]]'].length;\n        s['[[SetData]]'][i] = value;\n\n        return s;\n      });\n\n    // 23.2.3.2 Set.prototype.clear ()\n    define(\n      Set.prototype, 'clear',\n      function clear() {\n        var s = strict(this);\n        if (Type(s) !== 'object') throw TypeError();\n        if (!('[[SetData]]' in s)) throw TypeError();\n        if (s['[[SetData]]'] === undefined) throw TypeError();\n        var entries = s['[[SetData]]'];\n        entries.length = 0;\n        return undefined;\n      });\n\n    // 23.2.3.3 Set.prototype.constructor\n    // 23.2.3.4 Set.prototype.delete ( value )\n    define(\n      Set.prototype, 'delete',\n      function delete_(value) {\n        var s = strict(this);\n        if (Type(s) !== 'object') throw TypeError();\n        if (!('[[SetData]]' in s)) throw TypeError();\n        if (s['[[SetData]]'] === undefined) throw TypeError();\n        var entries = s['[[SetData]]'];\n        var i = SetDataIndexOf(entries, value);\n        if (i < 0) return false;\n        entries[i] = empty;\n        return true;\n      });\n\n    // 23.2.3.5 Set.prototype.entries ( )\n    define(\n      Set.prototype, 'entries',\n      function entries() {\n        var s = strict(this);\n        if (Type(s) !== 'object') throw TypeError();\n        return CreateSetIterator(s, 'key+value');\n      });\n\n    // 23.2.3.6 Set.prototype.forEach ( callbackfn [ , thisArg ] )\n    define(\n      Set.prototype, 'forEach',\n      function forEach(callbackfn/*, thisArg*/) {\n        var thisArg = arguments[1];\n\n        var s = strict(this);\n        if (Type(s) !== 'object') throw TypeError();\n        if (!('[[SetData]]' in s)) throw TypeError();\n        if (s['[[SetData]]'] === undefined) throw TypeError();\n        var entries = s['[[SetData]]'];\n\n        if (!IsCallable(callbackfn)) {\n          throw TypeError('First argument to forEach is not callable.');\n        }\n        for (var i = 0; i < entries.length; ++i) {\n          if (entries[i] !== empty) {\n            callbackfn.call(thisArg, entries[i], entries[i], s);\n          }\n        }\n      });\n\n    // 23.2.3.7 Set.prototype.has ( value )\n    define(\n      Set.prototype, 'has',\n      function has(key) {\n        var s = strict(this);\n        if (Type(s) !== 'object') throw TypeError();\n        if (!('[[SetData]]' in s)) throw TypeError();\n        if (s['[[SetData]]'] === undefined) throw TypeError();\n        var entries = s['[[SetData]]'];\n        return SetDataIndexOf(entries, key) !== -1;\n      });\n\n    // 23.2.3.8 Set.prototype.keys ( )\n    // See Set.prototype.values\n\n    // 23.2.3.9 get Set.prototype.size\n    Object.defineProperty(\n      Set.prototype, 'size', {\n        get: function() {\n          var s = strict(this);\n          if (Type(s) !== 'object') throw TypeError();\n          if (!('[[SetData]]' in s)) throw TypeError();\n          if (s['[[SetData]]'] === undefined) throw TypeError();\n          var entries = s['[[SetData]]'];\n          var count = 0;\n          for (var i = 0; i < entries.length; ++i) {\n            if (entries[i] !== empty)\n              count = count + 1;\n          }\n          return count;\n        }\n      });\n\n    // 23.2.3.10 Set.prototype.values ( )\n    define(\n      Set.prototype, 'values',\n      function values() {\n        var s = strict(this);\n        if (Type(s) !== 'object') throw TypeError();\n        return CreateSetIterator(s, 'value');\n      });\n    // NOTE: function name is still 'values':\n    Set.prototype.keys = Set.prototype.values;\n\n    // 23.2.3.11 Set.prototype [@@iterator ] ( )\n    define(\n      Set.prototype, $$iterator,\n      function() {\n        var s = strict(this);\n        if (Type(s) !== 'object') throw TypeError();\n        return CreateSetIterator(s);\n      });\n\n    // 23.2.3.12 Set.prototype [ @@toStringTag ]\n    define(global.Set.prototype, $$toStringTag, 'Set');\n\n    // 23.2.4 Properties of Set Instances\n    // 23.2.5 Set Iterator Objects\n    /** @constructor */\n    function SetIterator() {}\n\n    // 23.2.5.1 CreateSetIterator Abstract Operation\n    function CreateSetIterator(set, kind) {\n      if (Type(set) !== 'object') throw TypeError();\n      if (!('[[SetData]]' in set)) throw TypeError();\n      if (set['[[SetData]]'] === undefined) throw TypeError();\n      var iterator = new SetIterator;\n      set_internal(iterator, '[[IteratedSet]]', set);\n      set_internal(iterator, '[[SetNextIndex]]', 0);\n      set_internal(iterator, '[[SetIterationKind]]', kind);\n      return iterator;\n    }\n\n    // 23.2.5.2 The %SetIteratorPrototype% Object\n    var $SetIteratorPrototype$ = Object.create($IteratorPrototype$);\n    SetIterator.prototype = $SetIteratorPrototype$;\n\n    // 23.2.5.2.1 %SetIteratorPrototype%.next( )\n    define(\n      $SetIteratorPrototype$, 'next',\n      function next() {\n        var o = strict(this);\n        if (Type(o) !== 'object') throw TypeError();\n        var s = o['[[IteratedSet]]'],\n            index = o['[[SetNextIndex]]'],\n            itemKind = o['[[SetIterationKind]]'],\n            entries = s['[[SetData]]'];\n        while (index < entries.length) {\n          var e = entries[index];\n          index = index += 1;\n          set_internal(o, '[[SetNextIndex]]', index);\n          if (e !== empty) {\n            if (itemKind === 'key+value')\n              return CreateIterResultObject([e, e], false);\n            return CreateIterResultObject(e, false);\n          }\n        }\n        return CreateIterResultObject(undefined, true);\n      });\n\n    // 23.2.5.2.2 %SetIteratorPrototype% [ @@toStringTag ]\n    define($SetIteratorPrototype$, $$toStringTag, 'Set Iterator');\n\n    // 23.2.5.3 Properties of Set Iterator Instances\n\n  }());\n\n  // ---------------------------------------\n  // 23.3 WeakMap Objects\n  // ---------------------------------------\n\n  (function() {\n    // 23.3.1 The WeakMap Constructor\n    // 23.3.1.1 WeakMap ( [ iterable ] )\n    /** @constructor */\n    function WeakMap(/*iterable*/) {\n      var map = strict(this);\n      var iterable = arguments[0];\n\n      if (Type(map) !== 'object') throw TypeError();\n      if ('[[WeakMapData]]' in map) throw TypeError();\n\n      if (iterable !== undefined) {\n        var adder = map['set'];\n        if (!IsCallable(adder)) throw TypeError();\n        var iter = GetIterator(ToObject(iterable));\n      }\n      set_internal(map, '[[WeakMapData]]', new EphemeronTable);\n      if (iter === undefined) return map;\n      while (true) {\n        var next = IteratorStep(iter);\n        if (next === false)\n          return map;\n        var nextValue = IteratorValue(next);\n        if (Type(nextValue) !== 'object') throw TypeError();\n        var k = nextValue[0];\n        var v = nextValue[1];\n        adder.call(map, k, v);\n      }\n\n      return map;\n    }\n\n    if (!('WeakMap' in global) || OVERRIDE_NATIVE_FOR_TESTING)\n      global.WeakMap = WeakMap;\n\n    // 23.3.2 Properties of the WeakMap Constructor\n    // 23.3.2.1 WeakMap.prototype\n    var $WeakMapPrototype$ = {};\n    WeakMap.prototype = $WeakMapPrototype$;\n\n\n\n   // 23.3.2.2 WeakMap[ @@create ] ( )\n    // 23.3.3 Properties of the WeakMap Prototype Object\n\n    // 23.3.3.1 WeakMap.prototype.constructor\n\n    // 23.3.3.2 WeakMap.prototype.delete ( key )\n    define(\n      WeakMap.prototype, 'delete',\n      function delete_(key) {\n        var M = strict(this);\n        if (Type(M) !== 'object') throw TypeError();\n        if (M['[[WeakMapData]]'] === undefined) throw TypeError();\n        if (Type(key) !== 'object') throw TypeError('Expected object');\n        return M['[[WeakMapData]]'].remove(key);\n      });\n\n    // 23.3.3.3 WeakMap.prototype.get ( key )\n    define(\n      WeakMap.prototype, 'get',\n      function get(key, defaultValue) {\n        var M = strict(this);\n        if (Type(M) !== 'object') throw TypeError();\n        if (M['[[WeakMapData]]'] === undefined) throw TypeError();\n        if (Type(key) !== 'object') throw TypeError('Expected object');\n        return M['[[WeakMapData]]'].get(key, defaultValue);\n      });\n\n    // 23.3.3.4 WeakMap.prototype.has ( key )\n    define(\n      WeakMap.prototype, 'has',\n      function has(key) {\n        var M = strict(this);\n        if (Type(M) !== 'object') throw TypeError();\n        if (M['[[WeakMapData]]'] === undefined) throw TypeError();\n        if (Type(key) !== 'object') throw TypeError('Expected object');\n        return M['[[WeakMapData]]'].has(key);\n      });\n\n    // 23.3.3.5 WeakMap.prototype.set ( key , value )\n    define(\n      WeakMap.prototype, 'set',\n      function set(key, value) {\n        var M = strict(this);\n        if (Type(M) !== 'object') throw TypeError();\n        if (M['[[WeakMapData]]'] === undefined) throw TypeError();\n        if (Type(key) !== 'object') throw TypeError('Expected object');\n        M['[[WeakMapData]]'].set(key, value);\n        return M;\n      });\n\n    // 23.3.3.6 WeakMap.prototype [ @@toStringTag ]\n    define(global.WeakMap.prototype, $$toStringTag, 'WeakMap');\n\n    // 23.3.4 Properties of WeakMap Instances\n\n    // Polyfills for incomplete native implementations:\n    (function() {\n      var wm = new global.WeakMap();\n      var orig = global.WeakMap.prototype.set;\n      define(global.WeakMap.prototype, 'set', function set() {\n        orig.apply(this, arguments);\n        return this;\n      }, wm.set({}, 0) !== wm);\n    }());\n  }());\n\n  // ---------------------------------------\n  // 23.4 WeakSet Objects\n  // ---------------------------------------\n\n  (function() {\n    // 23.4.1 The WeakSet Constructor\n    // 23.4.1.1 WeakSet ( [ iterable ] )\n    /** @constructor */\n    function WeakSet(/*iterable*/) {\n      var set = strict(this);\n      var iterable = arguments[0];\n\n      if (Type(set) !== 'object') throw TypeError();\n      if ('[[WeakSetData]]' in set) throw TypeError();\n\n      if (iterable !== undefined) {\n        var adder = set['add'];\n        if (!IsCallable(adder)) throw TypeError();\n        var iter = GetIterator(ToObject(iterable));\n      }\n      set_internal(set, '[[WeakSetData]]', new EphemeronTable);\n      if (iter === undefined) return set;\n      while (true) {\n        var next = IteratorStep(iter);\n        if (next === false)\n          return set;\n        var nextValue = IteratorValue(next);\n        adder.call(set, nextValue);\n      }\n\n      return set;\n    }\n\n    if (!('WeakSet' in global) || OVERRIDE_NATIVE_FOR_TESTING)\n      global.WeakSet = WeakSet;\n\n    // 23.4.2 Properties of the WeakSet Constructor\n    // 23.4.2.1 WeakSet.prototype\n    var $WeakSetPrototype$ = {};\n    WeakSet.prototype = $WeakSetPrototype$;\n\n    // 23.4.3 Properties of the WeakSet Prototype Object\n    // 23.4.3.1 WeakSet.prototype.add (value )\n    define(\n      WeakSet.prototype, 'add',\n      function add(value) {\n        var S = strict(this);\n        if (Type(S) !== 'object') throw TypeError();\n        if (S['[[WeakSetData]]'] === undefined) throw TypeError();\n        if (Type(value) !== 'object') throw TypeError('Expected object');\n        S['[[WeakSetData]]'].set(value, true);\n        return S;\n      });\n\n    // 23.4.3.2 WeakSet.prototype.constructor\n    // 23.4.3.3 WeakSet.prototype.delete ( value )\n    define(\n      WeakSet.prototype, 'delete',\n      function delete_(value) {\n        var S = strict(this);\n        if (Type(S) !== 'object') throw TypeError();\n        if (S['[[WeakSetData]]'] === undefined) throw TypeError();\n        if (Type(value) !== 'object') throw TypeError('Expected object');\n        return S['[[WeakSetData]]'].remove(value);\n      });\n\n    // 23.4.3.4 WeakSet.prototype.has ( value )\n    define(\n      WeakSet.prototype, 'has',\n      function has(key) {\n        var S = strict(this);\n        if (Type(S) !== 'object') throw TypeError();\n        if (S['[[WeakSetData]]'] === undefined) throw TypeError();\n        if (Type(key) !== 'object') throw TypeError('Expected object');\n        return S['[[WeakSetData]]'].has(key);\n      });\n\n    // 23.4.3.5 WeakSet.prototype [ @@toStringTag ]\n    define(global.WeakSet.prototype, $$toStringTag, 'WeakSet');\n\n    // 23.4.4 Properties of WeakSet Instances\n\n    // Polyfills for incomplete native implementations:\n    (function() {\n      var ws = new global.WeakSet();\n      var orig = global.WeakSet.prototype.add;\n      define(global.WeakSet.prototype, 'add', function add() {\n        orig.apply(this, arguments);\n        return this;\n      }, ws.add({}) !== ws);\n    }());\n  }());\n\n  // ---------------------------------------\n  // 24 Structured Data\n  // ---------------------------------------\n\n  // ---------------------------------------\n  // 24.1 ArrayBuffer Objects\n  // ---------------------------------------\n\n  // See typedarray.js for TypedArray polyfill\n\n  (function() {\n    if (!('ArrayBuffer' in global))\n      return;\n\n    // 24.1.1 Abstract Operations For ArrayBuffer Objects\n    // 24.1.1.1 AllocateArrayBuffer( constructor, byteLength )\n    // 24.1.1.2 IsDetachedBuffer( arrayBuffer )\n    // 24.1.1.3 DetachArrayBuffer( arrayBuffer )\n    // 24.1.1.4 CloneArrayBuffer( srcBuffer, srcByteOffset [, cloneConstructor] )\n    // 24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type, isLittleEndian )\n    // 24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isLittleEndian )\n    // 24.1.2 The ArrayBuffer Constructor\n    // 24.1.2.1 ArrayBuffer( length )\n    // 24.1.3 Properties of the ArrayBuffer Constructor\n\n    // 24.1.3.1 ArrayBuffer.isView ( arg )\n    define(\n      ArrayBuffer, 'isView',\n      function isView(arg) {\n        if (Type(arg) !== 'object') return false;\n        if ('buffer' in arg && arg.buffer instanceof ArrayBuffer) return true;\n        return false;\n      });\n\n    // 24.1.3.2 ArrayBuffer.prototype\n    // 24.1.3.3 get ArrayBuffer [ @@species ]\n    // 24.1.4 Properties of the ArrayBuffer Prototype Object\n    // 24.1.4.1 get ArrayBuffer.prototype.byteLength\n    // 24.1.4.2 ArrayBuffer.prototype.constructor\n    // 24.1.4.3 ArrayBuffer.prototype.slice ( start , end)\n\n    // 24.1.4.4 ArrayBuffer.prototype [ @@toStringTag ]\n    define(ArrayBuffer.prototype, $$toStringTag, 'ArrayBuffer');\n\n    // 24.1.5 Properties of the ArrayBuffer Instances\n  }());\n\n  // ---------------------------------------\n  // 24.2 DataView Objects\n  // ---------------------------------------\n\n  // See typedarray.js for TypedArray polyfill\n\n  (function() {\n    if (!('DataView' in global))\n      return;\n\n    // 24.2.1 Abstract Operations For DataView Objects\n    // 24.2.1.1 GetViewValue(view, requestIndex, isLittleEndian, type)\n    // 24.2.1.2 SetViewValue(view, requestIndex, isLittleEndian, type, value)\n    // 24.2.2 The DataView Constructor\n    // 24.2.2.1 DataView (buffer [ , byteOffset [ , byteLength ] ] )\n    // 24.2.3 Properties of the DataView Constructor\n    // 24.2.3.1 DataView.prototype\n    // 24.2.4 Properties of the DataView Prototype Object\n    // 24.2.4.1 get DataView.prototype.buffer\n    // 24.2.4.2 get DataView.prototype.byteLength\n    // 24.2.4.3 get DataView.prototype.byteOffset\n    // 24.2.4.4 DataView.prototype.constructor\n    // 24.2.4.5 DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )\n    // 24.2.4.6 DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )\n    // 24.2.4.7 DataView.prototype.getInt8 ( byteOffset )\n    // 24.2.4.8 DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )\n    // 24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n    // 24.2.4.10 DataView.prototype.getUint8 ( byteOffset )\n    // 24.2.4.11 DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )\n    // 24.2.4.12 DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )\n    // 24.2.4.13 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )\n    // 24.2.4.14 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )\n    // 24.2.4.15 DataView.prototype.setInt8 ( byteOffset, value )\n    // 24.2.4.16 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )\n    // 24.2.4.17 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )\n    // 24.2.4.18 DataView.prototype.setUint8 ( byteOffset, value )\n    // 24.2.4.19 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )\n    // 24.2.4.20 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )\n\n    // 24.2.4.21 DataView.prototype[ @@toStringTag ]\n    define(DataView.prototype, $$toStringTag, 'DataView');\n\n    // 24.2.5 Properties of DataView Instances\n  }());\n\n  // ---------------------------------------\n  // 24.3 The JSON Object\n  // ---------------------------------------\n\n  // 24.3.1 JSON.parse ( text [ , reviver ] )\n  // 24.3.2 JSON.stringify ( value [ , replacer [ , space ] ] )\n  // 24.3.3 JSON [ @@toStringTag ]\n  define(JSON, $$toStringTag, 'JSON');\n\n  // ---------------------------------------\n  // 25.1 Iteration\n  // ---------------------------------------\n\n  // 25.1.1 Common Iteration Interfaces\n  // 25.1.1.1 The Iterable Interface\n  // 25.1.1.2 The Iterator Interface\n  // 25.1.1.3 The IteratorResult Interface\n\n  // 25.1.2 The %IteratorPrototype% Object\n  // Defined earlier, so other prototypes can reference it.\n  // 25.1.2.1 %IteratorPrototype% [ @@iterator ] ( )\n  define($IteratorPrototype$, $$iterator, function() {\n    return this;\n  });\n\n\n  // ---------------------------------------\n  // 25.4 Promise Objects\n  // ---------------------------------------\n\n  (function() {\n    // 25.4 Promise Objects\n\n    // 25.4.1 Promise Abstract Operations\n\n    // 25.4.1.1 PromiseCapability Records\n    // 25.4.1.1.1 IfAbruptRejectPromise ( value, capability )\n\n    function IfAbruptRejectPromise(value, capability) {\n      var rejectResult = capability['[[Reject]]'].call(undefined, value);\n      return capability['[[Promise]]'];\n    }\n\n    // 25.4.1.2 PromiseReaction Records\n\n    // 25.4.1.3 CreateResolvingFunctions ( promise )\n\n    function CreateResolvingFunctions(promise) {\n      var alreadyResolved = {'[[value]]': false};\n      var resolve = PromiseResolveFunction();\n      set_internal(resolve, '[[Promise]]',  promise);\n      set_internal(resolve, '[[AlreadyResolved]]', alreadyResolved);\n      var reject = PromiseRejectFunction();\n      set_internal(reject, '[[Promise]]', promise);\n      set_internal(reject, '[[AlreadyResolved]]', alreadyResolved);\n      return { '[[Resolve]]': resolve, '[[Reject]]': reject};\n    }\n\n    // 25.4.1.3.1 Promise Reject Functions\n\n    function PromiseRejectFunction() {\n      var F = function(reason) {\n        console.assert(Type(F['[[Promise]]']) === 'object');\n        var promise = F['[[Promise]]'];\n        var alreadyResolved = F['[[AlreadyResolved]]'];\n        if (alreadyResolved['[[value]]']) return undefined;\n        set_internal(alreadyResolved, '[[value]]', true);\n        return RejectPromise(promise, reason);\n      };\n      return F;\n    }\n\n    // 25.4.1.3.2 Promise Resolve Functions\n\n    function PromiseResolveFunction() {\n      var F = function(resolution) {\n        console.assert(Type(F['[[Promise]]']) === 'object');\n        var promise = F['[[Promise]]'];\n        var alreadyResolved = F['[[AlreadyResolved]]'];\n        if (alreadyResolved['[[value]]']) return undefined;\n        set_internal(alreadyResolved, '[[value]]', true);\n\n        if (SameValue(resolution, promise))  {\n          var selfResolutionError = TypeError();\n          return RejectPromise(promise, selfResolutionError);\n        }\n        if (Type(resolution) !== 'object')\n          return FulfillPromise(promise, resolution);\n        try {\n          var then = resolution['then'];\n        } catch(then) {\n          return RejectPromise(promise, then);\n        }\n        if (!IsCallable(then))\n          return FulfillPromise(promise, resolution);\n        EnqueueJob('PromiseJobs', PromiseResolveThenableJob, [promise, resolution, then]);\n        return undefined;\n      };\n      return F;\n    }\n\n    // 25.4.1.4 FulfillPromise ( promise, value )\n\n    function FulfillPromise(promise, value) {\n      console.assert(promise['[[PromiseState]]'] === 'pending');\n      var reactions = promise['[[PromiseFulfillReactions]]'];\n      set_internal(promise, '[[PromiseResult]]', value);\n      set_internal(promise, '[[PromiseFulfillReactions]]', undefined);\n      set_internal(promise, '[[PromiseRejectReactions]]', undefined);\n      set_internal(promise, '[[PromiseState]]', 'fulfilled');\n      return TriggerPromiseReactions(reactions, value);\n    }\n\n    // 25.4.1.5 NewPromiseCapability ( C )\n\n    function NewPromiseCapability(c) {\n      // To keep Promise hermetic, this doesn't look much like the spec.\n      return CreatePromiseCapabilityRecord(undefined, c);\n    }\n\n    // 25.4.1.5.1 CreatePromiseCapabilityRecord ( promise, constructor )\n\n    function CreatePromiseCapabilityRecord(promise, constructor) {\n      // To keep Promise hermetic, this doesn't look much like the spec.\n      console.assert(IsConstructor(constructor));\n      var promiseCapability = {};\n      set_internal(promiseCapability, '[[Promise]]', promise);\n      set_internal(promiseCapability, '[[Resolve]]', undefined);\n      set_internal(promiseCapability, '[[Reject]]', undefined);\n      var executor = GetCapabilitiesExecutor();\n      set_internal(executor, '[[Capability]]', promiseCapability);\n\n      // NOTE: Differs from spec; object is constructed here\n      var constructorResult = promise = new constructor(executor);\n      set_internal(promiseCapability, '[[Promise]]', promise);\n\n      if (!IsCallable(promiseCapability['[[Resolve]]'])) throw TypeError();\n      if (!IsCallable(promiseCapability['[[Reject]]'])) throw TypeError();\n      if (Type(constructorResult) === 'object' && !SameValue(promise, constructorResult)) throw TypeError();\n      return promiseCapability;\n    }\n\n    // 25.4.1.5.2 GetCapabilitiesExecutor Functions\n\n    function GetCapabilitiesExecutor() {\n      var F = function(resolve, reject) {\n        console.assert(F['[[Capability]]']);\n        var promiseCapability = F['[[Capability]]'];\n        if (promiseCapability['[[Resolve]]'] !== undefined) throw TypeError();\n        if (promiseCapability['[[Reject]]'] !== undefined) throw TypeError();\n        set_internal(promiseCapability, '[[Resolve]]', resolve);\n        set_internal(promiseCapability, '[[Reject]]', reject);\n        return undefined;\n      };\n      return F;\n    }\n\n    // 25.4.1.6 IsPromise ( x )\n\n    function IsPromise(x) {\n      if (Type(x) !== 'object') return false;\n      if (!('[[PromiseState]]' in x)) return false;\n      if (x['[[PromiseState]]'] === undefined) return false;\n      return true;\n    }\n\n    // 25.4.1.7 RejectPromise ( promise, reason )\n\n    function RejectPromise(promise, reason) {\n      console.assert(promise['[[PromiseState]]'] === 'pending');\n      var reactions = promise['[[PromiseRejectReactions]]'];\n      set_internal(promise, '[[PromiseResult]]', reason);\n      set_internal(promise, '[[PromiseFulfillReactions]]', undefined);\n      set_internal(promise, '[[PromiseRejectReactions]]', undefined);\n      set_internal(promise, '[[PromiseState]]', 'rejected');\n      return TriggerPromiseReactions(reactions, reason);\n    }\n\n    // 25.4.1.8 TriggerPromiseReactions ( reactions, argument )\n\n    function TriggerPromiseReactions(reactions, argument) {\n      for (var i = 0, len = reactions.length; i < len; ++i)\n        EnqueueJob('PromiseJobs', PromiseReactionJob, [reactions[i], argument]);\n      return undefined;\n    }\n\n    // 25.4.2 Promise Jobs\n\n    // 25.4.2.1 PromiseReactionJob ( reaction, argument )\n\n    function PromiseReactionJob(reaction, argument) {\n      var promiseCapability = reaction['[[Capabilities]]'];\n      var handler = reaction['[[Handler]]'];\n      var handlerResult, status;\n      try {\n        if (handler === 'Identity') handlerResult = argument;\n        else if (handler === 'Thrower') throw argument;\n        else handlerResult = handler.call(undefined, argument);\n      } catch (handlerResult) {\n        status = promiseCapability['[[Reject]]'].call(undefined, handlerResult);\n        NextJob(status); return;\n      }\n      status = promiseCapability['[[Resolve]]'].call(undefined, handlerResult);\n      NextJob(status);\n    }\n\n    // 25.4.2.2 PromiseResolveThenableJob ( promiseToResolve, thenable, then)\n\n    function PromiseResolveThenableJob(promiseToResolve, thenable, then) {\n      // SPEC BUG: promise vs. promiseToResolve\n      var resolvingFunctions = CreateResolvingFunctions(promiseToResolve);\n      try {\n        var thenCallResult = then.call(thenable, resolvingFunctions['[[Resolve]]'],\n                                       resolvingFunctions['[[Reject]]']);\n      } catch (thenCallResult) {\n        var status = resolvingFunctions['[[Reject]]'].call(undefined, thenCallResult);\n        NextJob(status); return;\n      }\n      NextJob(thenCallResult);\n    }\n\n    // 25.4.3 The Promise Constructor\n\n    // 25.4.3.1 Promise ( executor )\n\n    function Promise(executor) {\n      var config = { configurable: false, enumerable: false, writable: true, value: undefined };\n      Object.defineProperty(this, '[[PromiseState]]', config);\n      Object.defineProperty(this, '[[PromiseConstructor]]', config);\n      Object.defineProperty(this, '[[PromiseResult]]', config);\n      Object.defineProperty(this, '[[PromiseFulfillReactions]]', config);\n      Object.defineProperty(this, '[[PromiseRejectReactions]]', config);\n\n      var promise = this;\n      if (Type(promise) !== 'object') throw new TypeError();\n      if (!('[[PromiseState]]' in promise)) throw TypeError();\n      if (promise['[[PromiseState]]'] !== undefined) throw TypeError();\n      if (!IsCallable(executor)) throw TypeError();\n\n      set_internal(promise, '[[PromiseConstructor]]', Promise);\n\n      return InitializePromise(promise, executor);\n    }\n\n    // 25.4.3.1.1 InitializePromise ( promise, executor )\n\n    function InitializePromise(promise, executor) {\n      console.assert('[[PromiseState]]' in promise);\n      console.assert(IsCallable(executor));\n      set_internal(promise, '[[PromiseState]]', 'pending');\n      set_internal(promise, '[[PromiseFulfillReactions]]', []);\n      set_internal(promise, '[[PromiseRejectReactions]]', []);\n      var resolvingFunctions = CreateResolvingFunctions(promise);\n      try {\n        var completion = executor.call(undefined, resolvingFunctions['[[Resolve]]'],\n                                       resolvingFunctions['[[Reject]]']);\n      } catch (completion) {\n        var status = resolvingFunctions['[[Reject]]'].call(undefined, completion);\n      }\n      return promise;\n    }\n\n    // 25.4.4 Properties of the Promise Constructor\n    // 25.4.4.1 Promise.all ( iterable )\n\n    define(Promise, 'all', function all(iterable) {\n      var c = strict(this);\n      var promiseCapability = NewPromiseCapability(c);\n      try {\n        var iterator = GetIterator(iterable);\n      } catch (value) {\n        promiseCapability['[[Reject]]'].call(undefined, value);\n        return promiseCapability['[[Promise]]'];\n      }\n      var values = [];\n      var remainingElementsCount = { value: 1 };\n      var index = 0;\n      while (true) {\n        try {\n          var next = IteratorStep(iterator);\n        } catch (value) {\n          promiseCapability['[[Reject]]'].call(undefined, value);\n          return promiseCapability['[[Promise]]'];\n        }\n        if (!next) {\n          remainingElementsCount.value -= 1;\n          if (remainingElementsCount.value === 0) {\n            var resolveResult = promiseCapability['[[Resolve]]'].apply(undefined, values);\n\n\n          }\n          return promiseCapability['[[Promise]]'];\n        }\n        try {\n          var nextValue = IteratorValue(next);\n        } catch (value) {\n          promiseCapability['[[Reject]]'].call(undefined, value);\n          return promiseCapability['[[Promise]]'];\n        }\n        try {\n          var nextPromise = c.resolve(nextValue);\n        } catch (value) {\n          promiseCapability['[[Reject]]'].call(undefined, value);\n          return promiseCapability['[[Promise]]'];\n        }\n        var resolveElement = PromiseAllResolveElementFunction();\n        set_internal(resolveElement, '[[AlreadyCalled]]', { value: false });\n        set_internal(resolveElement, '[[Index]]', index);\n        set_internal(resolveElement, '[[Values]]', values);\n        set_internal(resolveElement, '[[Capabilities]]', promiseCapability);\n        set_internal(resolveElement, '[[RemainingElements]]', remainingElementsCount);\n        remainingElementsCount.value += 1;\n        try {\n          var result = nextPromise.then(resolveElement, promiseCapability['[[Reject]]']);\n        } catch (value) {\n          promiseCapability['[[Reject]]'].call(undefined, value);\n          return promiseCapability['[[Promise]]'];\n        }\n        index += 1;\n      }\n    });\n\n    // 25.4.4.1.1 Promise.all Resolve Element Functions\n\n    function PromiseAllResolveElementFunction() {\n      var F = function(x) {\n        var alreadyCalled = F['[[AlreadyCalled]]'];\n        if (alreadyCalled.value) return undefined;\n        alreadyCalled.value = true;\n        var index = F['[[Index]]'];\n        var values = F['[[Values]]'];\n        var promiseCapability = F['[[Capabilities]]'];\n        var remainingElementsCount = F['[[RemainingElements]]'];\n        try {\n          values[index] = x;\n        } catch (result) {\n          promiseCapability['[[Reject]]'].call(undefined, result);\n          return promiseCapability['[[Promise]]'];\n        }\n        remainingElementsCount.value -= 1;\n        if (remainingElementsCount.value === 0)\n          return promiseCapability['[[Resolve]]'].call(undefined, values);\n        return undefined;\n      };\n      return F;\n    }\n\n    // 25.4.4.2 Promise.prototype\n\n    Promise.prototype = {};\n\n    // 25.4.4.3 Promise.race ( iterable )\n\n    define(Promise, 'race', function race(iterable) {\n      var c = strict(this);\n      var promiseCapability = NewPromiseCapability(c);\n      try {\n        var iterator = GetIterator(iterable);\n      } catch (value) {\n        promiseCapability['[[Reject]]'].call(undefined, value);\n        return promiseCapability['[[Promise]]'];\n      }\n      while (true) {\n        try {\n          var next = IteratorStep(iterator);\n        } catch (value) {\n          promiseCapability['[[Reject]]'].call(undefined, value);\n          return promiseCapability['[[Promise]]'];\n        }\n        if (!next) return promiseCapability['[[Promise]]'];\n        try {\n          var nextValue = IteratorValue(next);\n        } catch (value) {\n          promiseCapability['[[Reject]]'].call(undefined, value);\n          return promiseCapability['[[Promise]]'];\n        }\n        try {\n          var nextPromise = c.resolve(nextValue);\n        } catch (value) {\n          promiseCapability['[[Reject]]'].call(undefined, value);\n          return promiseCapability['[[Promise]]'];\n        }\n        try {\n          nextPromise.then(promiseCapability['[[Resolve]]'], promiseCapability['[[Reject]]']);\n        } catch (value) {\n          promiseCapability['[[Reject]]'].call(undefined, value);\n          return promiseCapability['[[Promise]]'];\n        }\n      }\n    });\n\n    // 25.4.4.4 Promise.reject ( r )\n\n    define(Promise, 'reject', function reject(r) {\n      var c = strict(this);\n      var promiseCapability = NewPromiseCapability(c);\n      var rejectResult = promiseCapability['[[Reject]]'].call(undefined, r);\n      return promiseCapability['[[Promise]]'];\n    });\n\n    // 25.4.4.5 Promise.resolve ( x )\n\n    define(Promise, 'resolve', function resolve(x) {\n      var c = strict(this);\n      if (IsPromise(x)) {\n        var constructor = x['[[PromiseConstructor]]'];\n        if (SameValue(constructor, c)) return x;\n      }\n      var promiseCapability = NewPromiseCapability(c);\n      var resolveResult = promiseCapability['[[Resolve]]'].call(undefined, x);\n      return promiseCapability['[[Promise]]'];\n    });\n\n    // 25.4.4.6 Promise [ @@create ] ( )\n    // 25.4.4.6.1 AllocatePromise ( constructor )\n    // 25.4.5 Properties of the Promise Prototype Object\n    // 25.4.5.1 Promise.prototype.catch ( onRejected )\n\n    define(Promise.prototype, 'catch', function catch_(onRejected) {\n      var promise = this;\n      return promise.then(undefined, onRejected);\n    });\n\n    // 25.4.5.2 Promise.prototype.constructor\n\n    Promise.prototype.constructor = Promise;\n\n    // 25.4.5.3 Promise.prototype.then ( onFulfilled , onRejected )\n\n    define(Promise.prototype, 'then', function then(onFulfilled, onRejected) {\n      var promise = this;\n      if (!IsPromise(promise)) throw TypeError();\n      if (!IsCallable(onFulfilled)) onFulfilled = 'Identity';\n      if (!IsCallable(onRejected)) onRejected = 'Thrower';\n      var c = promise.constructor;\n      var promiseCapability = NewPromiseCapability(c);\n      var fulfillReaction = { '[[Capabilities]]': promiseCapability,\n                              '[[Handler]]': onFulfilled };\n      var rejectReaction = { '[[Capabilities]]': promiseCapability,\n                             '[[Handler]]': onRejected };\n      if (promise['[[PromiseState]]'] === 'pending') {\n        promise['[[PromiseFulfillReactions]]'].push(fulfillReaction);\n        promise['[[PromiseRejectReactions]]'].push(rejectReaction);\n      } else if (promise['[[PromiseState]]'] === 'fulfilled') {\n        var value = promise['[[PromiseResult]]'];\n        EnqueueJob('PromiseJobs', PromiseReactionJob, [fulfillReaction, value]);\n      } else if (promise['[[PromiseState]]'] === 'rejected') {\n        var reason = promise['[[PromiseResult]]'];\n        EnqueueJob('PromiseJobs', PromiseReactionJob, [rejectReaction, reason]);\n      }\n      return promiseCapability['[[Promise]]'];\n    });\n\n    // 25.4.6 Properties of Promise Instances\n\n    if (!('Promise' in global) || OVERRIDE_NATIVE_FOR_TESTING)\n      global.Promise = Promise;\n\n    // Patch early Promise.cast vs. Promise.resolve implementations\n    if ('cast' in global.Promise) global.Promise.resolve = global.Promise.cast;\n  }());\n\n  // 25.4.5.1 Promise.prototype [ @@toStringTag ]\n  define(Promise.prototype, $$toStringTag, 'Promise');\n\n  // ---------------------------------------\n  // 26 Reflection\n  // ---------------------------------------\n\n  (function() {\n    // 26.1 The Reflect Object\n    if (!('Reflect' in global) || OVERRIDE_NATIVE_FOR_TESTING)\n      global.Reflect = {};\n\n    // 26.1.1 Reflect.apply ( target, thisArgument, argumentsList )\n    define(\n      Reflect, 'apply',\n      function apply(target, thisArgument, argumentsList) {\n        if (!IsCallable(target)) throw TypeError();\n        return Function.prototype.apply.call(target, thisArgument, argumentsList);\n      });\n\n    // 26.1.2 Reflect.construct ( target, argumentsList [, newTarget] )\n    define(\n      Reflect, 'construct',\n      function construct(target, argumentsList) {\n        return __cons(target, argumentsList);\n      });\n\n    // 26.1.3 Reflect.defineProperty ( target, propertyKey, attributes )\n    define(\n      Reflect, 'defineProperty',\n      function defineProperty(target, propertyKey, attributes) {\n        try {\n          Object.defineProperty(target, propertyKey, attributes);\n          return true;\n        } catch (_) {\n          return false;\n        }\n      });\n\n    // 26.1.4 Reflect.deleteProperty ( target, propertyKey )\n    define(\n      Reflect, 'deleteProperty',\n      function deleteProperty(target,name) {\n        try {\n          delete target[name];\n          return !HasOwnProperty(target, name);\n        } catch (_) {\n          return false;\n        }\n      });\n\n    // 26.1.5 Reflect.enumerate ( target )\n    define(\n      Reflect, 'enumerate',\n      function enumerate(target) {\n        target = ToObject(target);\n        var iterator = Enumerate(target);\n        return iterator;\n      });\n\n    // 26.1.6 Reflect.get ( target, propertyKey [ , receiver ])\n    define(\n      Reflect, 'get',\n      function get(target, name, receiver) {\n        target = ToObject(target);\n        name = String(name);\n        receiver = (receiver === undefined) ? target : ToObject(receiver);\n        var desc = getPropertyDescriptor(target, name);\n        if (desc && 'get' in desc)\n          return Function.prototype.call.call(desc['get'], receiver);\n        return target[name];\n      });\n\n    // 26.1.7 Reflect.getOwnPropertyDescriptor ( target, propertyKey )\n    define(\n      Reflect, 'getOwnPropertyDescriptor',\n      Object.getOwnPropertyDescriptor);\n\n    // 26.1.8 Reflect.getPrototypeOf ( target )\n    define(\n      Reflect, 'getPrototypeOf',\n      Object.getPrototypeOf);\n\n    // 26.1.9 Reflect.has ( target, propertyKey )\n    define(\n      Reflect, 'has',\n      function has(target,name) {\n        return String(name) in ToObject(target);\n      });\n\n    // 26.1.10 Reflect.isExtensible (target)\n    define(\n      Reflect, 'isExtensible',\n      Object.isExtensible);\n\n    // 26.1.11 Reflect.ownKeys ( target )\n    define(\n      Reflect, 'ownKeys',\n      function ownKeys(target) {\n        var obj = ToObject(target);\n        return Object.getOwnPropertyNames(obj);\n      });\n\n    // 26.1.12 Reflect.preventExtensions ( target )\n    define(\n      Reflect, 'preventExtensions',\n      function preventExtensions(target) {\n        try { Object.preventExtensions(target); return true; } catch (_) { return false; }\n      });\n\n    // 26.1.13 Reflect.set ( target, propertyKey, V [ , receiver ] )\n    define(\n      Reflect, 'set',\n      function set(target, name, value, receiver) {\n        target = ToObject(target);\n        name = String(name);\n        receiver = (receiver === undefined) ? target : ToObject(receiver);\n        var desc = getPropertyDescriptor(target, name);\n        try {\n          if (desc && 'set' in desc)\n            Function.prototype.call.call(desc['set'], receiver, value);\n          else\n            target[name] = value;\n          return true;\n        } catch (_) {\n          return false;\n        }\n      });\n\n    // 26.1.14 Reflect.setPrototypeOf ( target, proto )\n    define(\n      Reflect, 'setPrototypeOf',\n      function setPrototypeOf(target, proto) {\n        try {\n          target.__proto__ = proto;\n          return Reflect.getPrototypeOf(target) === proto;\n        } catch(_) {\n          return false;\n        }\n      });\n\n  }());\n\n  // ---------------------------------------\n  // 26.2 Proxy Objects\n  // ---------------------------------------\n\n  // Not polyfillable.\n\n}(self));\n\n// This helper is defined outside the main scope so that the use of\n// 'eval' does not taint the scope for minifiers.\nfunction __cons(t, a) {\n  return eval('new t(' + a.map(function(_, i) { return 'a[' + i + ']'; }).join(',') + ')');\n}\n//----------------------------------------------------------------------\n//\n// ECMAScript 2016 Polyfills\n//\n//----------------------------------------------------------------------\n\n(function (global) {\n  \"use strict\";\n  var undefined = (void 0); // Paranoia\n\n  // Helpers\n\n  function isSymbol(s) {\n    return (typeof s === 'symbol') || ('Symbol' in global && s instanceof global.Symbol);\n  }\n\n  function define(o, p, v, override) {\n    if (p in o && !override)\n      return;\n\n    if (typeof v === 'function') {\n      // Sanity check that functions are appropriately named (where possible)\n      console.assert(isSymbol(p) || !('name' in v) || v.name === p || v.name === p + '_', 'Expected function name \"' + p.toString() + '\", was \"' + v.name + '\"');\n      Object.defineProperty(o, p, {\n        value: v,\n        configurable: true,\n        enumerable: false,\n        writable: true\n      });\n    } else {\n      Object.defineProperty(o, p, {\n        value: v,\n        configurable: false,\n        enumerable: false,\n        writable: false\n      });\n    }\n  }\n\n\n  // Snapshot intrinsic functions\n  var $isNaN = global.isNaN;\n\n  var abs = Math.abs,\n      floor = Math.floor,\n      max = Math.max,\n      min = Math.min;\n\n  //----------------------------------------\n  // 7 Abstract Operations\n  //----------------------------------------\n\n  // 7.1.4\n  function ToInteger(n) {\n    n = Number(n);\n    if ($isNaN(n)) return 0;\n    if (n === 0 || n === Infinity || n === -Infinity) return n;\n    return ((n < 0) ? -1 : 1) * floor(abs(n));\n  }\n\n  // 7.1.13 ToObject\n  function ToObject(v) {\n    if (v === null || v === undefined) throw TypeError();\n    return Object(v);\n  }\n\n  // 7.1.15 ToLength ( argument )\n  function ToLength(v) {\n    var len = ToInteger(v);\n    if (len <= 0) {\n      return 0;\n    }\n    return min(len, 0x20000000000000 - 1); // 2^53-1\n  }\n\n  //----------------------------------------\n  // 7.2 Testing and Comparison Operations\n  //----------------------------------------\n\n  // 7.2.10 SameValueZero(x, y)\n  function SameValueZero(x, y) {\n    if (typeof x !== typeof y) return false;\n    switch (typeof x) {\n    case 'undefined':\n      return true;\n    case 'number':\n      if (x !== x && y !== y) return true;\n      return x === y;\n    case 'boolean':\n    case 'string':\n    case 'object':\n    default:\n      return x === y;\n    }\n  }\n\n  //----------------------------------------------------------------------\n  //\n  // ECMAScript 2016\n  //\n  //----------------------------------------------------------------------\n\n  // https://github.com/tc39/Array.prototype.includes/\n  define(\n    Array.prototype, 'includes',\n    function includes(target) {\n      var fromIndex = arguments[1];\n\n      var o = ToObject(this);\n      var len = ToLength(o[\"length\"]);\n      if (len === 0) return false;\n      var n = ToInteger(fromIndex);\n      if (n >= 0) {\n        var k = n;\n      } else {\n        k = len + n;\n        if (k < 0) k = 0;\n      }\n      while (k < len) {\n        var elementK = o[k];\n        if (SameValueZero(o[k], target))\n          return true;\n        k += 1;\n      }\n      return false;\n    });\n\n}(this));\n//----------------------------------------------------------------------\n//\n// ECMAScript 2017 Polyfills\n//\n//----------------------------------------------------------------------\n\n(function (global) {\n  'use strict';\n  var undefined = (void 0); // Paranoia\n\n  // Helpers\n\n  function isSymbol(s) {\n    return (typeof s === 'symbol') || ('Symbol' in global && s instanceof global.Symbol);\n  }\n\n  function define(o, p, v, override) {\n    if (p in o && !override)\n      return;\n\n    if (typeof v === 'function') {\n      // Sanity check that functions are appropriately named (where possible)\n      console.assert(isSymbol(p) || !('name' in v) || v.name === p || v.name === p + '_', 'Expected function name \"' + p.toString() + '\", was \"' + v.name + '\"');\n      Object.defineProperty(o, p, {\n        value: v,\n        configurable: true,\n        enumerable: false,\n        writable: true\n      });\n    } else {\n      Object.defineProperty(o, p, {\n        value: v,\n        configurable: false,\n        enumerable: false,\n        writable: false\n      });\n    }\n  }\n\n  // Snapshot intrinsic functions\n  var $isNaN = global.isNaN;\n\n  var abs = Math.abs,\n      floor = Math.floor,\n      min = Math.min;\n\n  //----------------------------------------\n  // 7 Abstract Operations\n  //----------------------------------------\n\n  // 7.1.4\n  function ToInteger(n) {\n    n = Number(n);\n    if ($isNaN(n)) return 0;\n    if (n === 0 || n === Infinity || n === -Infinity) return n;\n    return ((n < 0) ? -1 : 1) * floor(abs(n));\n  }\n\n  // 7.1.13 ToObject\n  function ToObject(v) {\n    if (v === null || v === undefined) throw TypeError();\n    return Object(v);\n  }\n\n  // 7.1.15 ToLength ( argument )\n  function ToLength(v) {\n    var len = ToInteger(v);\n    if (len <= 0) {\n      return 0;\n    }\n    return min(len, 0x20000000000000 - 1); // 2^53-1\n  }\n\n  //----------------------------------------\n  // 7.3 Operations on Objects\n  //----------------------------------------\n\n  // 7.3.4\n  function CreateDataProperty(O, P, V) {\n    Object.defineProperty(O, P, {\n      value: V,\n      writable: true,\n      enumerable: true,\n      configurable: true\n    });\n  }\n\n  // 7.3.21\n  function EnumerableOwnProperties(o, kind) {\n    var ownKeys = Object.keys(o);\n    var properties = [];\n    ownKeys.forEach(function(key) {\n      var desc = Object.getOwnPropertyDescriptor(o, key);\n      if (desc && desc.enumerable) {\n        if (kind === 'key') properties.push(key);\n        else {\n          var value = o[key];\n          if (kind === 'value') properties.push(value);\n          else properties.push([key, value]);\n        }\n      }\n    });\n    return properties;\n  }\n\n\n  //----------------------------------------------------------------------\n  // 19 Fundamental Objects\n  //----------------------------------------------------------------------\n\n  // 19.1 Object Objects\n  // 19.1.2 Properties of the Object Constructor\n\n  // 19.1.2.5 Object.entries\n  define(\n    Object, 'entries',\n    function entries(o) {\n      var obj = ToObject(o);\n      return EnumerableOwnProperties(obj, 'key+value');\n    });\n\n  // 19.1.2.8 Object.getOwnPropertyDescriptors ( O )\n  define(\n    Object, 'getOwnPropertyDescriptors',\n    function getOwnPropertyDescriptors(o) {\n      var obj = ToObject(o);\n      // ReturnIfAbrupt(obj)\n      var keys = Object.getOwnPropertyNames(obj);\n      // ReturnIfAbrupt(keys)\n      var descriptors = {};\n      for (var i = 0; i < keys.length; ++i) {\n        var nextKey = keys[i];\n        var descriptor = Object.getOwnPropertyDescriptor(obj, nextKey);\n        // ReturnIfAbrupt(desc)\n        // ReturnIfAbrupt(descriptor)\n        CreateDataProperty(descriptors, nextKey, descriptor);\n      }\n      return descriptors;\n    });\n\n  // 19.1.2.21 Object.values\n  define(\n    Object, 'values',\n    function values(o) {\n      var obj = ToObject(o);\n      return EnumerableOwnProperties(obj, 'value');\n    });\n\n\n\n  //----------------------------------------------------------------------\n  // 21 Text Processing\n  //----------------------------------------------------------------------\n\n  // 21.1 String Objects\n  // 21.1.3 Properties of the String Prototype Object\n\n  // 21.1.3.13 String.prototype.padEnd( maxLength [ , fillString ] )\n  define(\n    String.prototype, 'padEnd',\n    function padEnd(maxLength) {\n      var fillString = arguments[1];\n\n      var o = this;\n      // ReturnIfAbrupt(o)\n      var s = String(this);\n      // ReturnIfAbrupt(s)\n      var stringLength = s.length;\n      if (fillString === undefined) var fillStr = '';\n      else fillStr = String(fillString);\n      // ReturnIfAbrupt(fillStr)\n      if (fillStr === '') fillStr = ' ';\n      var intMaxLength = ToLength(maxLength);\n      // ReturnIfAbrupt(intMaxLength)\n      if (intMaxLength <= stringLength) return s;\n      var fillLen = intMaxLength - stringLength;\n      var stringFiller = '';\n      while (stringFiller.length < fillLen)\n        stringFiller = stringFiller + fillStr;\n      return s + stringFiller.substring(0, fillLen);\n    });\n\n  // 21.1.3.14 String.prototype.padStart( maxLength [ , fillString ] )\n  define(\n    String.prototype, 'padStart',\n    function padStart(maxLength) {\n      var fillString = arguments[1];\n\n      var o = this;\n      // ReturnIfAbrupt(o)\n      var s = String(this);\n      // ReturnIfAbrupt(s)\n      var stringLength = s.length;\n      if (fillString === undefined) var fillStr = '';\n      else fillStr = String(fillString);\n      // ReturnIfAbrupt(fillStr)\n      if (fillStr === '') fillStr = ' ';\n      var intMaxLength = ToLength(maxLength);\n      // ReturnIfAbrupt(intMaxLength)\n      if (intMaxLength <= stringLength) return s;\n      var fillLen = intMaxLength - stringLength;\n      var stringFiller = '';\n      while (stringFiller.length < fillLen)\n        stringFiller = stringFiller + fillStr;\n      return stringFiller.substring(0, fillLen) + s;\n    });\n\n}(this));\n(function(global) {\n  'use strict';\n\n  if (!('window' in global && 'document' in global))\n    return;\n\n  //----------------------------------------------------------------------\n  //\n  // HTML\n  // https://html.spec.whatwg.org\n  //\n  //----------------------------------------------------------------------\n\n  // document.head attribute\n  // Needed for: IE8-\n  if (!('head' in document))\n    document.head = document.getElementsByTagName('head')[0];\n\n  // Ensure correct parsing of newish elements (\"shiv\")\n  // Needed for: IE8-\n  [\n    'abbr', 'article', 'aside', 'audio', 'bdi', 'canvas', 'data', 'datalist',\n    'details', 'dialog', 'figcaption', 'figure', 'footer', 'header', 'hgroup',\n    'main', 'mark', 'meter', 'nav', 'output', 'picture', 'progress', 'section',\n    'summary', 'template', 'time', 'video'].forEach(function(tag) {\n     document.createElement(tag);\n   });\n\n  // HTMLElement.dataset\n  // Needed for: IE10-\n  if (!('dataset' in document.createElement('span')) &&\n      'Element' in global && Element.prototype && Object.defineProperty) {\n    Object.defineProperty(Element.prototype, 'dataset', { get: function() {\n      var result = Object.create(null);\n      for (var i = 0; i < this.attributes.length; ++i) {\n        var attr = this.attributes[i];\n        if (attr.specified && attr.name.substring(0, 5) === 'data-') {\n          (function(element, name) {\n            var prop = name.replace(/-([a-z])/g, function(m, p) {\n              return p.toUpperCase();\n            });\n            result[prop] = element.getAttribute('data-' + name); // Read-only, for IE8-\n            Object.defineProperty(result, prop, {\n              get: function() {\n                return element.getAttribute('data-' + name);\n              },\n              set: function(value) {\n                element.setAttribute('data-' + name, value);\n              }});\n          }(this, attr.name.substring(5)));\n        }\n      }\n      return result;\n    }});\n  }\n\n  // Base64 utility methods\n  // Needed for: IE9-\n  (function() {\n    if ('atob' in global && 'btoa' in global)\n      return;\n\n    var B64_ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    function atob(input) {\n      input = String(input);\n      var position = 0,\n          output = [],\n          buffer = 0, bits = 0, n;\n\n      input = input.replace(/\\s/g, '');\n      if ((input.length % 4) === 0) { input = input.replace(/=+$/, ''); }\n      if ((input.length % 4) === 1) { throw Error(\"InvalidCharacterError\"); }\n      if (/[^+/0-9A-Za-z]/.test(input)) { throw Error(\"InvalidCharacterError\"); }\n\n      while (position < input.length) {\n        n = B64_ALPHABET.indexOf(input.charAt(position));\n        buffer = (buffer << 6) | n;\n        bits += 6;\n\n        if (bits === 24) {\n          output.push(String.fromCharCode((buffer >> 16) & 0xFF));\n          output.push(String.fromCharCode((buffer >>  8) & 0xFF));\n          output.push(String.fromCharCode(buffer & 0xFF));\n          bits = 0;\n          buffer = 0;\n        }\n        position += 1;\n      }\n\n      if (bits === 12) {\n        buffer = buffer >> 4;\n        output.push(String.fromCharCode(buffer & 0xFF));\n      } else if (bits === 18) {\n        buffer = buffer >> 2;\n        output.push(String.fromCharCode((buffer >> 8) & 0xFF));\n        output.push(String.fromCharCode(buffer & 0xFF));\n      }\n\n      return output.join('');\n    };\n\n    function btoa(input) {\n      input = String(input);\n      var position = 0,\n          out = [],\n          o1, o2, o3,\n          e1, e2, e3, e4;\n\n      if (/[^\\x00-\\xFF]/.test(input)) { throw Error(\"InvalidCharacterError\"); }\n\n      while (position < input.length) {\n        o1 = input.charCodeAt(position++);\n        o2 = input.charCodeAt(position++);\n        o3 = input.charCodeAt(position++);\n\n        // 111111 112222 222233 333333\n        e1 = o1 >> 2;\n        e2 = ((o1 & 0x3) << 4) | (o2 >> 4);\n        e3 = ((o2 & 0xf) << 2) | (o3 >> 6);\n        e4 = o3 & 0x3f;\n\n        if (position === input.length + 2) {\n          e3 = 64;\n          e4 = 64;\n        }\n        else if (position === input.length + 1) {\n          e4 = 64;\n        }\n\n        out.push(B64_ALPHABET.charAt(e1),\n                 B64_ALPHABET.charAt(e2),\n                 B64_ALPHABET.charAt(e3),\n                 B64_ALPHABET.charAt(e4));\n      }\n\n      return out.join('');\n    };\n\n    global.atob = atob;\n    global.btoa = btoa;\n  }());\n\n  // requestAnimationFrame - needed for IE9-\n  (function() {\n    if ('requestAnimationFrame' in global)\n      return;\n\n    var TARGET_FPS = 60,\n        requests = Object.create(null),\n        raf_handle = 0,\n        timeout_handle = -1;\n\n    function isVisible(element) {\n      return element.offsetWidth > 0 && element.offsetHeight > 0;\n    }\n\n    function onFrameTimer() {\n      var cur_requests = requests;\n      requests = Object.create(null);\n      timeout_handle = -1;\n      Object.keys(cur_requests).forEach(function(id) {\n        var request = cur_requests[id];\n        if (!request.element || isVisible(request.element))\n          request.callback(Date.now());\n      });\n    }\n\n    function requestAnimationFrame(callback, element) {\n      var cb_handle = ++raf_handle;\n      requests[cb_handle] = {callback: callback, element: element};\n      if (timeout_handle === -1)\n        timeout_handle = global.setTimeout(onFrameTimer, 1000 / TARGET_FPS);\n      return cb_handle;\n    }\n\n    function cancelAnimationFrame(handle) {\n      delete requests[handle];\n      if (Object.keys(requests).length === 0) {\n        global.clearTimeout(timeout_handle);\n        timeout_handle = -1;\n      }\n    }\n\n    global.requestAnimationFrame = requestAnimationFrame;\n    global.cancelAnimationFrame = cancelAnimationFrame;\n  }());\n\n}(self));\n(function(global) {\n  'use strict';\n  if (!('window' in global && 'document' in global))\n    return;\n\n  //----------------------------------------------------------------------\n  //\n  // DOM\n  // https://dom.spec.whatwg.org/\n  //\n  //----------------------------------------------------------------------\n\n  // Document.querySelectorAll method\n  // http://ajaxian.com/archives/creating-a-queryselector-for-ie-that-runs-at-native-speed\n  // Needed for: IE7-\n  if (!document.querySelectorAll) {\n    document.querySelectorAll = function(selectors) {\n      var style = document.createElement('style'), elements = [], element;\n      document.documentElement.firstChild.appendChild(style);\n      document._qsa = [];\n\n      style.styleSheet.cssText = selectors + '{x-qsa:expression(document._qsa && document._qsa.push(this))}';\n      window.scrollBy(0, 0);\n      style.parentNode.removeChild(style);\n\n      while (document._qsa.length) {\n        element = document._qsa.shift();\n        element.style.removeAttribute('x-qsa');\n        elements.push(element);\n      }\n      document._qsa = null;\n      return elements;\n    };\n  }\n\n  // Document.querySelector method\n  // Needed for: IE7-\n  if (!document.querySelector) {\n    document.querySelector = function(selectors) {\n      var elements = document.querySelectorAll(selectors);\n      return (elements.length) ? elements[0] : null;\n    };\n  }\n\n  // Document.getElementsByClassName method\n  // Needed for: IE8-\n  if (!document.getElementsByClassName) {\n    document.getElementsByClassName = function(classNames) {\n      classNames = String(classNames).replace(/^|\\s+/g, '.');\n      return document.querySelectorAll(classNames);\n    };\n  }\n\n  // Node interface constants\n  // Needed for: IE8-\n  global.Node = global.Node || function() { throw TypeError(\"Illegal constructor\"); };\n  [\n    ['ELEMENT_NODE', 1],\n    ['ATTRIBUTE_NODE', 2],\n    ['TEXT_NODE', 3],\n    ['CDATA_SECTION_NODE', 4],\n    ['ENTITY_REFERENCE_NODE', 5],\n    ['ENTITY_NODE', 6],\n    ['PROCESSING_INSTRUCTION_NODE', 7],\n    ['COMMENT_NODE', 8],\n    ['DOCUMENT_NODE', 9],\n    ['DOCUMENT_TYPE_NODE', 10],\n    ['DOCUMENT_FRAGMENT_NODE', 11],\n    ['NOTATION_NODE', 12]\n  ].forEach(function(p) { if (!(p[0] in global.Node)) global.Node[p[0]] = p[1]; });\n\n  // DOMException constants\n  // Needed for: IE8-\n  global.DOMException = global.DOMException || function() { throw TypeError(\"Illegal constructor\"); };\n  [\n    ['INDEX_SIZE_ERR', 1],\n    ['DOMSTRING_SIZE_ERR', 2],\n    ['HIERARCHY_REQUEST_ERR', 3],\n    ['WRONG_DOCUMENT_ERR', 4],\n    ['INVALID_CHARACTER_ERR', 5],\n    ['NO_DATA_ALLOWED_ERR', 6],\n    ['NO_MODIFICATION_ALLOWED_ERR', 7],\n    ['NOT_FOUND_ERR', 8],\n    ['NOT_SUPPORTED_ERR', 9],\n    ['INUSE_ATTRIBUTE_ERR', 10],\n    ['INVALID_STATE_ERR', 11],\n    ['SYNTAX_ERR', 12],\n    ['INVALID_MODIFICATION_ERR', 13],\n    ['NAMESPACE_ERR', 14],\n    ['INVALID_ACCESS_ERR', 15]\n  ].forEach(function(p) { if (!(p[0] in global.DOMException)) global.DOMException[p[0]] = p[1]; });\n\n  // Event and EventTargets interfaces\n  // Needed for: IE8\n  (function(){\n    if (!('Element' in global) || Element.prototype.addEventListener || !Object.defineProperty)\n      return;\n\n    // interface Event\n\n    // PhaseType (const unsigned short)\n    Event.CAPTURING_PHASE = 1;\n    Event.AT_TARGET       = 2;\n    Event.BUBBLING_PHASE  = 3;\n\n    Object.defineProperties(Event.prototype, {\n      CAPTURING_PHASE: { get: function() { return 1; } },\n      AT_TARGET:       { get: function() { return 2; } },\n      BUBBLING_PHASE:   { get: function() { return 3; } },\n      target: {\n        get: function() {\n          return this.srcElement;\n        }},\n      currentTarget: {\n        get: function() {\n          return this._currentTarget;\n        }},\n      eventPhase: {\n        get: function() {\n          return (this.srcElement === this.currentTarget) ? Event.AT_TARGET : Event.BUBBLING_PHASE;\n        }},\n      bubbles: {\n        get: function() {\n          switch (this.type) {\n            // Mouse\n          case 'click':\n          case 'dblclick':\n          case 'mousedown':\n          case 'mouseup':\n          case 'mouseover':\n          case 'mousemove':\n          case 'mouseout':\n          case 'mousewheel':\n            // Keyboard\n          case 'keydown':\n          case 'keypress':\n          case 'keyup':\n            // Frame/Object\n          case 'resize':\n          case 'scroll':\n            // Form\n          case 'select':\n          case 'change':\n          case 'submit':\n          case 'reset':\n            return true;\n          }\n          return false;\n        }},\n      cancelable: {\n        get: function() {\n          switch (this.type) {\n            // Mouse\n          case 'click':\n          case 'dblclick':\n          case 'mousedown':\n          case 'mouseup':\n          case 'mouseover':\n          case 'mouseout':\n          case 'mousewheel':\n            // Keyboard\n          case 'keydown':\n          case 'keypress':\n          case 'keyup':\n            // Form\n          case 'submit':\n            return true;\n          }\n          return false;\n        }},\n      timeStamp: {\n        get: function() {\n          return this._timeStamp;\n        }},\n      stopPropagation: {\n        value: function() {\n          this.cancelBubble = true;\n        }},\n      preventDefault: {\n        value: function() {\n          this.returnValue = false;\n        }},\n      defaultPrevented: {\n        get: function() {\n          return this.returnValue === false;\n        }}\n    });\n\n    // interface EventTarget\n\n    function addEventListener(type, listener, useCapture) {\n      if (typeof listener !== 'function') return;\n      if (type === 'DOMContentLoaded') type = 'load';\n      var target = this;\n      var f = function(e) {\n        e._timeStamp = Date.now();\n        e._currentTarget = target;\n        listener.call(this, e);\n        e._currentTarget = null;\n      };\n      this['_' + type + listener] = f;\n      this.attachEvent('on' + type, f);\n    }\n\n    function removeEventListener(type, listener, useCapture) {\n      if (typeof listener !== 'function') return;\n      if (type === 'DOMContentLoaded') type = 'load';\n      var f = this['_' + type + listener];\n      if (f) {\n        this.detachEvent('on' + type, f);\n        this['_' + type + listener] = null;\n      }\n    }\n\n    [Window, HTMLDocument, Element].forEach(function(o) {\n      o.prototype.addEventListener = addEventListener;\n      o.prototype.removeEventListener = removeEventListener;\n    });\n  }());\n\n  // CustomEvent\n  // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n  // Needed for: IE\n  (function () {\n    if ('CustomEvent' in global && typeof global.CustomEvent === \"function\")\n      return;\n    function CustomEvent ( event, params ) {\n      params = params || { bubbles: false, cancelable: false, detail: undefined };\n      var evt = document.createEvent( 'CustomEvent' );\n      evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n      return evt;\n    }\n    CustomEvent.prototype = global.Event.prototype;\n    global.CustomEvent = CustomEvent;\n  })();\n\n  // Shim for DOM Events for IE7-\n  // http://www.quirksmode.org/blog/archives/2005/10/_and_the_winner_1.html\n  // Use addEvent(object, event, handler) instead of object.addEventListener(event, handler)\n  window.addEvent = function(obj, type, fn) {\n    if (obj.addEventListener) {\n      obj.addEventListener(type, fn, false);\n    } else if (obj.attachEvent) {\n      obj[\"e\" + type + fn] = fn;\n      obj[type + fn] = function() {\n        var e = window.event;\n        e.currentTarget = obj;\n        e.preventDefault = function() { e.returnValue = false; };\n        e.stopPropagation = function() { e.cancelBubble = true; };\n        e.target = e.srcElement;\n        e.timeStamp = Date.now();\n        obj[\"e\" + type + fn].call(this, e);\n      };\n      obj.attachEvent(\"on\" + type, obj[type + fn]);\n    }\n  };\n\n  window.removeEvent = function(obj, type, fn) {\n    if (obj.removeEventListener) {\n      obj.removeEventListener(type, fn, false);\n    } else if (obj.detachEvent) {\n      obj.detachEvent(\"on\" + type, obj[type + fn]);\n      obj[type + fn] = null;\n      obj[\"e\" + type + fn] = null;\n    }\n  };\n\n  // DOMTokenList interface and Element.classList / Element.relList\n  // Needed for: IE9-\n  // Use getClassList(elem) instead of elem.classList() if IE7- support is needed\n  // Use getRelList(elem) instead of elem.relList() if IE7- support is needed\n  (function() {\n    function DOMTokenListShim(o, p) {\n      function split(s) { return s.length ? s.split(/\\s+/g) : []; }\n\n      // NOTE: This does not exactly match the spec.\n      function removeTokenFromString(token, string) {\n        var tokens = split(string),\n            index = tokens.indexOf(token);\n        if (index !== -1) {\n          tokens.splice(index, 1);\n        }\n        return tokens.join(' ');\n      }\n\n      Object.defineProperties(\n        this,\n        {\n          length: {\n            get: function() { return split(o[p]).length; }\n          },\n\n          item: {\n            value: function(idx) {\n              var tokens = split(o[p]);\n              return 0 <= idx && idx < tokens.length ? tokens[idx] : null;\n            }\n          },\n\n          contains: {\n            value: function(token) {\n              token = String(token);\n              if (token.length === 0) { throw SyntaxError(); }\n              if (/\\s/.test(token)) { throw Error(\"InvalidCharacterError\"); }\n              var tokens = split(o[p]);\n\n              return tokens.indexOf(token) !== -1;\n            }\n          },\n\n          add: {\n            value: function(/*tokens...*/) {\n              var tokens = Array.prototype.slice.call(arguments).map(String);\n              if (tokens.some(function(token) { return token.length === 0; })) {\n                throw SyntaxError();\n              }\n              if (tokens.some(function(token) { return (/\\s/).test(token); })) {\n                throw Error(\"InvalidCharacterError\");\n              }\n\n              try {\n                var underlying_string = o[p];\n                var token_list = split(underlying_string);\n                tokens = tokens.filter(function(token) { return token_list.indexOf(token) === -1; });\n                if (tokens.length === 0) {\n                  return;\n                }\n                if (underlying_string.length !== 0 && !(/\\s$/).test(underlying_string)) {\n                  underlying_string += ' ';\n                }\n                underlying_string += tokens.join(' ');\n                o[p] = underlying_string;\n              } finally {\n                var length = split(o[p]).length;\n                if (this.length !== length) { this.length = length; }\n              }\n            }\n          },\n\n          remove: {\n            value: function(/*tokens...*/) {\n              var tokens = Array.prototype.slice.call(arguments).map(String);\n              if (tokens.some(function(token) { return token.length === 0; })) {\n                throw SyntaxError();\n              }\n              if (tokens.some(function(token) { return (/\\s/).test(token); })) {\n                throw Error(\"InvalidCharacterError\");\n              }\n\n              try {\n                var underlying_string = o[p];\n                tokens.forEach(function(token) {\n                  underlying_string = removeTokenFromString(token, underlying_string);\n                });\n                o[p] = underlying_string;\n              } finally {\n                var length = split(o[p]).length;\n                if (this.length !== length) { this.length = length; }\n              }\n            }\n          },\n\n          toggle: {\n            value: function(token/*, force*/) {\n              var force = arguments[1];\n              try {\n                token = String(token);\n                if (token.length === 0) { throw SyntaxError(); }\n                if (/\\s/.test(token)) { throw Error(\"InvalidCharacterError\"); }\n                var tokens = split(o[p]),\n                    index = tokens.indexOf(token);\n\n                if (index !== -1 && (!force || force === (void 0))) {\n                  o[p] = removeTokenFromString(token, o[p]);\n                  return false;\n                }\n                if (index !== -1 && force) {\n                  return true;\n                }\n                var underlying_string = o[p];\n                if (underlying_string.length !== 0 && !/\\s$/.test(underlying_string)) {\n                  underlying_string += ' ';\n                }\n                underlying_string += token;\n                o[p] = underlying_string;\n                return true;\n              } finally {\n                var length = split(o[p]).length;\n                if (this.length !== length) { this.length = length; }\n              }\n            }\n          },\n\n          toString: {\n            value: function() {\n              return o[p];\n            }\n          }\n        });\n      if (!('length' in this)) {\n        // In case getters are not supported\n        this.length = split(o[p]).length;\n      } else {\n        // If they are, shim in index getters (up to 100)\n        for (var i = 0; i < 100; ++i) {\n          Object.defineProperty(this, String(i), {\n            get: (function(n) { return function() { return this.item(n); }; }(i))\n          });\n        }\n      }\n    }\n\n    function addToElementPrototype(p, f) {\n      if ('Element' in global && Element.prototype && Object.defineProperty) {\n        Object.defineProperty(Element.prototype, p, { get: f });\n      }\n    }\n\n    // HTML - https://html.spec.whatwg.org\n    // Element.classList\n    if ('classList' in document.createElement('span')) {\n      window.getClassList = function(elem) { return elem.classList; };\n    } else {\n      window.getClassList = function(elem) { return new DOMTokenListShim(elem, 'className'); };\n      addToElementPrototype('classList', function() { return new DOMTokenListShim(this, 'className'); } );\n    }\n\n    // HTML - https://html.spec.whatwg.org\n    // HTMLAnchorElement.relList\n    // HTMLLinkElement.relList\n    if ('relList' in document.createElement('link')) {\n      window.getRelList = function(elem) { return elem.relList; };\n    } else {\n      window.getRelList = function(elem) { return new DOMTokenListShim(elem, 'rel'); };\n      addToElementPrototype('relList', function() { return new DOMTokenListShim(this, 'rel'); } );\n    }\n\n    // Add second argument to native DOMTokenList.toggle() if necessary\n    (function() {\n      if (!('DOMTokenList' in global)) return;\n      var e = document.createElement('span');\n      if (!('classList' in e)) return;\n      e.classList.toggle('x', false);\n      if (!e.classList.contains('x')) return;\n      global.DOMTokenList.prototype.toggle = function toggle(token/*, force*/) {\n        var force = arguments[1];\n        if (force === undefined) {\n          var add = !this.contains(token);\n          this[add ? 'add' : 'remove'](token);\n          return add;\n        }\n        force = !!force;\n        this[force ? 'add' : 'remove'](token);\n        return force;\n      };\n    }());\n\n\n    // DOM - Interface NonDocumentTypeChildNode\n    // Interface NonDocumentTypeChildNode\n    // previousElementSibling / nextElementSibling - for IE8\n\n    if (!('previousElementSibling' in document.documentElement)) {\n      addToElementPrototype('previousElementSibling', function() {\n        var n = this.previousSibling;\n        while (n && n.nodeType !== Node.ELEMENT_NODE)\n          n = n.previousSibling;\n        return n;\n      });\n    }\n\n    if (!('nextElementSibling' in document.documentElement)) {\n      addToElementPrototype('nextElementSibling', function() {\n        var n = this.nextSibling;\n        while (n && n.nodeType !== Node.ELEMENT_NODE)\n          n = n.nextSibling;\n        return n;\n      });\n    }\n  }());\n\n  // Element.matches\n  // https://developer.mozilla.org/en/docs/Web/API/Element/matches\n  // Needed for: IE, Firefox 3.6, early Webkit and Opera 15.0\n  // Use msMatchesSelector(selector) for IE\n  // Use oMatchesSelector(selector) for Opera 15.0\n  // Use mozMatchesSelector(selector) for Firefox 3.6\n  // Use webkitMatchesSelector(selector) for early Webkit\n  // Use polyfill if no matches() support, but querySelectorAll() support\n  if ('Element' in global && !Element.prototype.matches) {\n    if (Element.prototype.msMatchesSelector) {\n      Element.prototype.matches = Element.prototype.msMatchesSelector;\n    } else if (Element.prototype.oMatchesSelector) {\n      Element.prototype.matches = Element.prototype.oMatchesSelector;\n    } else if (Element.prototype.mozMatchesSelector) {\n      Element.prototype.matches = Element.prototype.mozMatchesSelector;\n    } else if (Element.prototype.webkitMatchesSelector) {\n      Element.prototype.matches = Element.prototype.webkitMatchesSelector;\n    } else if (document.querySelectorAll) {\n      Element.prototype.matches = function matches(selector) {\n        var matches = (this.document || this.ownerDocument).querySelectorAll(selector),\n            i = matches.length;\n        while (--i >= 0 && matches.item(i) !== this) {}\n        return i > -1;\n      };\n    }\n  }\n\n  // Element.closest\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n  if (window.Element && !Element.prototype.closest) {\n    Element.prototype.closest = function(s) {\n      var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n          i,\n          el = this;\n      do {\n        i = matches.length;\n        while (--i >= 0 && matches.item(i) !== el) {};\n      } while ((i < 0) && (el = el.parentElement)); \n      return el;\n    };\n  }\n\n  function mixin(o, ps) {\n    if (!o) return;\n    Object.keys(ps).forEach(function(p) {\n      if ((p in o) || (p in o.prototype)) return;\n      try {\n        Object.defineProperty(\n          o.prototype,\n          p,\n          Object.getOwnPropertyDescriptor(ps, p)\n        );\n      } catch (ex) {\n        // Throws in IE8; just copy it\n        o[p] = ps[p];\n      }\n    });\n  }\n\n  // Mixin ParentNode\n  // https://dom.spec.whatwg.org/#interface-parentnode\n\n  function convertNodesIntoANode(nodes) {\n    var node = null;\n    nodes = nodes.map(function(node) {\n      return !(node instanceof Node) ? document.createTextNode(node) : node;\n    });\n    if (nodes.length === 1) {\n      node = nodes[0];\n    } else {\n      node = document.createDocumentFragment();\n      nodes.forEach(function(n) { node.appendChild(n); });\n    }\n    return node;\n  }\n\n  var ParentNode = {\n    prepend: function(/*...nodes*/) {\n      var nodes = [].slice.call(arguments);\n      nodes = convertNodesIntoANode(nodes);\n      this.insertBefore(nodes, this.firstChild);\n    },\n    append: function(/*...nodes*/) {\n      var nodes = [].slice.call(arguments);\n      nodes = convertNodesIntoANode(nodes);\n      this.appendChild(nodes);\n    }\n  };\n\n  mixin(global.Document || global.HTMLDocument, ParentNode); // HTMLDocument for IE8\n  mixin(global.DocumentFragment, ParentNode);\n  mixin(global.Element, ParentNode);\n\n  // Mixin ChildNode\n  // https://dom.spec.whatwg.org/#interface-childnode\n\n  var ChildNode = {\n    before: function(/*...nodes*/) {\n      var nodes = [].slice.call(arguments);\n      var parent = this.parentNode;\n      if (!parent) return;\n      var viablePreviousSibling = this.previousSibling;\n      while (nodes.indexOf(viablePreviousSibling) !== -1)\n        viablePreviousSibling = viablePreviousSibling.previousSibling;\n      var node = convertNodesIntoANode(nodes);\n      parent.insertBefore(node, viablePreviousSibling ?\n                          viablePreviousSibling.nextSibling : parent.firstChild);\n    },\n    after: function(/*...nodes*/) {\n      var nodes = [].slice.call(arguments);\n      var parent = this.parentNode;\n      if (!parent) return;\n      var viableNextSibling = this.nextSibling;\n      while (nodes.indexOf(viableNextSibling) !== -1)\n        viableNextSibling = viableNextSibling.nextSibling;\n      var node = convertNodesIntoANode(nodes);\n      parent.insertBefore(node, viableNextSibling);\n    },\n    replaceWith: function(/*...nodes*/) {\n      var nodes = [].slice.call(arguments);\n      var parent = this.parentNode;\n      if (!parent) return;\n      var viableNextSibling = this.nextSibling;\n      while (nodes.indexOf(viableNextSibling) !== -1)\n        viableNextSibling = viableNextSibling.nextSibling;\n      var node = convertNodesIntoANode(nodes);\n\n      if (this.parentNode === parent)\n        parent.replaceChild(node, this);\n      else\n        parent.insertBefore(node, viableNextSibling);\n    },\n    remove: function() {\n      if (!this.parentNode) return;\n      this.parentNode.removeChild(this);\n    }\n  };\n\n  mixin(global.DocumentType, ChildNode);\n  mixin(global.Element, ChildNode);\n  mixin(global.CharacterData, ChildNode);\n\n}(self));\n(function(global) {\n  'use strict';\n\n  if (!('window' in global && 'document' in global))\n    return;\n\n  //----------------------------------------------------------------------\n  //\n  // XMLHttpRequest\n  // https://xhr.spec.whatwg.org\n  //\n  //----------------------------------------------------------------------\n\n  // XMLHttpRequest interface\n  // Needed for: IE7-\n  global.XMLHttpRequest = global.XMLHttpRequest || function() {\n    try { return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\"); } catch (_) { }\n    try { return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\"); } catch (_) { }\n    try { return new ActiveXObject(\"Msxml2.XMLHTTP\"); } catch (_) { }\n    throw Error(\"This browser does not support XMLHttpRequest.\");\n  };\n\n  // XMLHttpRequest interface constants\n  // Needed for IE8-\n  [\n    ['UNSENT', 0],\n    ['OPENED', 1],\n    ['HEADERS_RECEIVED', 2],\n    ['LOADING', 3],\n    ['DONE', 4],\n  ].forEach(function(p) { if (!(p[0] in global.XMLHttpRequest)) global.XMLHttpRequest[p[0]] = p[1]; });\n\n  // FormData interface\n  // Needed for: IE9-\n  (function() {\n    if ('FormData' in global)\n      return;\n\n    function FormData(form) {\n      this._data = [];\n      if (!form) return;\n      for (var i = 0; i < form.elements.length; ++i) {\n        var element = form.elements[i];\n        if (element.name !== '')\n          this.append(element.name, element.value);\n      }\n    }\n\n    FormData.prototype = {\n      append: function(name, value /*, filename */) {\n        if ('Blob' in global && value instanceof global.Blob)\n          throw TypeError(\"Blob not supported\");\n        name = String(name);\n        this._data.push([name, value]);\n      },\n\n      toString: function() {\n        return this._data.map(function(pair) {\n          return encodeURIComponent(pair[0]) + '=' + encodeURIComponent(pair[1]);\n        }).join('&');\n      }\n    };\n\n    global.FormData = FormData;\n    var send = global.XMLHttpRequest.prototype.send;\n    global.XMLHttpRequest.prototype.send = function(body) {\n      if (body instanceof FormData) {\n        this.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        arguments[0] = body.toString();\n      }\n      return send.apply(this, arguments);\n    };\n  }());\n\n}(self));\n(function(global) {\n  'use strict';\n\n  if (!('window' in global && 'document' in global))\n    return;\n\n  //----------------------------------------------------------------------\n  //\n  // CSSOM View Module\n  // https://dev.w3.org/csswg/cssom-view/\n  //\n  //----------------------------------------------------------------------\n\n  // Fix for IE8-'s Element.getBoundingClientRect()\n  if ('TextRectangle' in global && !('width' in global.TextRectangle.prototype)) {\n    Object.defineProperties(global.TextRectangle.prototype, {\n      width: { get: function() { return this.right - this.left; } },\n      height: { get: function() { return this.bottom - this.top; } }\n    });\n  }\n}(self));\n// URL Polyfill\n// Draft specification: https://url.spec.whatwg.org\n\n// Notes:\n// - Primarily useful for parsing URLs and modifying query parameters\n// - Should work in IE8+ and everything more modern, with es5.js polyfills\n\n(function (global) {\n  'use strict';\n\n  function isSequence(o) {\n    if (!o) return false;\n    if ('Symbol' in global && 'iterator' in global.Symbol &&\n        typeof o[Symbol.iterator] === 'function') return true;\n    if (Array.isArray(o)) return true;\n    return false;\n  }\n\n  function toArray(iter) {\n    return ('from' in Array) ? Array.from(iter) : Array.prototype.slice.call(iter);\n  }\n\n  (function() {\n\n    // Browsers may have:\n    // * No global URL object\n    // * URL with static methods only - may have a dummy constructor\n    // * URL with members except searchParams\n    // * Full URL API support\n    var origURL = global.URL;\n    var nativeURL;\n    try {\n      if (origURL) {\n        nativeURL = new global.URL('http://example.com');\n        if ('searchParams' in nativeURL)\n          return;\n        if (!('href' in nativeURL))\n          nativeURL = undefined;\n      }\n    } catch (_) {}\n\n    // NOTE: Doesn't do the encoding/decoding dance\n    function urlencoded_serialize(pairs) {\n      var output = '', first = true;\n      pairs.forEach(function (pair) {\n        var name = encodeURIComponent(pair.name);\n        var value = encodeURIComponent(pair.value);\n        if (!first) output += '&';\n        output += name + '=' + value;\n        first = false;\n      });\n      return output.replace(/%20/g, '+');\n    }\n\n    // NOTE: Doesn't do the encoding/decoding dance\n    function urlencoded_parse(input, isindex) {\n      var sequences = input.split('&');\n      if (isindex && sequences[0].indexOf('=') === -1)\n        sequences[0] = '=' + sequences[0];\n      var pairs = [];\n      sequences.forEach(function (bytes) {\n        if (bytes.length === 0) return;\n        var index = bytes.indexOf('=');\n        if (index !== -1) {\n          var name = bytes.substring(0, index);\n          var value = bytes.substring(index + 1);\n        } else {\n          name = bytes;\n          value = '';\n        }\n        name = name.replace(/\\+/g, ' ');\n        value = value.replace(/\\+/g, ' ');\n        pairs.push({ name: name, value: value });\n      });\n      var output = [];\n      pairs.forEach(function (pair) {\n        output.push({\n          name: decodeURIComponent(pair.name),\n          value: decodeURIComponent(pair.value)\n        });\n      });\n      return output;\n    }\n\n    function URLUtils(url) {\n      if (nativeURL)\n        return new origURL(url);\n      var anchor = document.createElement('a');\n      anchor.href = url;\n      return anchor;\n    }\n\n    function URLSearchParams(init) {\n      var $this = this;\n      this._list = [];\n\n      if (init === undefined || init === null) {\n        // no-op\n      } else if (init instanceof URLSearchParams) {\n        // In ES6 init would be a sequence, but special case for ES5.\n        this._list = urlencoded_parse(String(init));\n      } else if (typeof init === 'object' && isSequence(init)) {\n        toArray(init).forEach(function(e) {\n          if (!isSequence(e)) throw TypeError();\n          var nv = toArray(e);\n          if (nv.length !== 2) throw TypeError();\n          $this._list.push({name: String(nv[0]), value: String(nv[1])});\n        });\n      } else if (typeof init === 'object' && init) {\n        Object.keys(init).forEach(function(key) {\n          $this._list.push({name: String(key), value: String(init[key])});\n        });\n      } else {\n        init = String(init);\n        if (init.substring(0, 1) === '?')\n          init = init.substring(1);\n        this._list = urlencoded_parse(init);\n      }\n\n      this._url_object = null;\n      this._setList = function (list) { if (!updating) $this._list = list; };\n\n      var updating = false;\n      this._update_steps = function() {\n        if (updating) return;\n        updating = true;\n\n        if (!$this._url_object) return;\n\n        // Partial workaround for IE issue with 'about:'\n        if ($this._url_object.protocol === 'about:' &&\n            $this._url_object.pathname.indexOf('?') !== -1) {\n          $this._url_object.pathname = $this._url_object.pathname.split('?')[0];\n        }\n\n        $this._url_object.search = urlencoded_serialize($this._list);\n\n        updating = false;\n      };\n    }\n\n\n    Object.defineProperties(URLSearchParams.prototype, {\n      append: {\n        value: function (name, value) {\n          this._list.push({ name: name, value: value });\n          this._update_steps();\n        }, writable: true, enumerable: true, configurable: true\n      },\n\n      'delete': {\n        value: function (name) {\n          for (var i = 0; i < this._list.length;) {\n            if (this._list[i].name === name)\n              this._list.splice(i, 1);\n            else\n              ++i;\n          }\n          this._update_steps();\n        }, writable: true, enumerable: true, configurable: true\n      },\n\n      get: {\n        value: function (name) {\n          for (var i = 0; i < this._list.length; ++i) {\n            if (this._list[i].name === name)\n              return this._list[i].value;\n          }\n          return null;\n        }, writable: true, enumerable: true, configurable: true\n      },\n\n      getAll: {\n        value: function (name) {\n          var result = [];\n          for (var i = 0; i < this._list.length; ++i) {\n            if (this._list[i].name === name)\n              result.push(this._list[i].value);\n          }\n          return result;\n        }, writable: true, enumerable: true, configurable: true\n      },\n\n      has: {\n        value: function (name) {\n          for (var i = 0; i < this._list.length; ++i) {\n            if (this._list[i].name === name)\n              return true;\n          }\n          return false;\n        }, writable: true, enumerable: true, configurable: true\n      },\n\n      set: {\n        value: function (name, value) {\n          var found = false;\n          for (var i = 0; i < this._list.length;) {\n            if (this._list[i].name === name) {\n              if (!found) {\n                this._list[i].value = value;\n                found = true;\n                ++i;\n              } else {\n                this._list.splice(i, 1);\n              }\n            } else {\n              ++i;\n            }\n          }\n\n          if (!found)\n            this._list.push({ name: name, value: value });\n\n          this._update_steps();\n        }, writable: true, enumerable: true, configurable: true\n      },\n\n      entries: {\n        value: function() { return new Iterator(this._list, 'key+value'); },\n        writable: true, enumerable: true, configurable: true\n      },\n\n      keys: {\n        value: function() { return new Iterator(this._list, 'key'); },\n        writable: true, enumerable: true, configurable: true\n      },\n\n      values: {\n        value: function() { return new Iterator(this._list, 'value'); },\n        writable: true, enumerable: true, configurable: true\n      },\n\n      forEach: {\n        value: function(callback) {\n          var thisArg = (arguments.length > 1) ? arguments[1] : undefined;\n          this._list.forEach(function(pair, index) {\n            callback.call(thisArg, pair.value, pair.name);\n          });\n\n        }, writable: true, enumerable: true, configurable: true\n      },\n\n      toString: {\n        value: function () {\n          return urlencoded_serialize(this._list);\n        }, writable: true, enumerable: false, configurable: true\n      }\n    });\n\n    function Iterator(source, kind) {\n      var index = 0;\n      this['next'] = function() {\n        if (index >= source.length)\n          return {done: true, value: undefined};\n        var pair = source[index++];\n        return {done: false, value:\n                kind === 'key' ? pair.name :\n                kind === 'value' ? pair.value :\n                [pair.name, pair.value]};\n      };\n    }\n\n    if ('Symbol' in global && 'iterator' in global.Symbol) {\n      Object.defineProperty(URLSearchParams.prototype, global.Symbol.iterator, {\n        value: URLSearchParams.prototype.entries,\n        writable: true, enumerable: true, configurable: true});\n      Object.defineProperty(Iterator.prototype, global.Symbol.iterator, {\n        value: function() { return this; },\n        writable: true, enumerable: true, configurable: true});\n    }\n\n    function URL(url, base) {\n      if (!(this instanceof global.URL))\n        throw new TypeError(\"Failed to construct 'URL': Please use the 'new' operator.\");\n\n      if (base) {\n        url = (function () {\n          if (nativeURL) return new origURL(url, base).href;\n          var iframe;\n          try {\n            var doc;\n            // Use another document/base tag/anchor for relative URL resolution, if possible\n            if (Object.prototype.toString.call(window.operamini) === \"[object OperaMini]\") {\n              iframe = document.createElement('iframe');\n              iframe.style.display = 'none';\n              document.documentElement.appendChild(iframe);\n              doc = iframe.contentWindow.document;\n            } else if (document.implementation && document.implementation.createHTMLDocument) {\n              doc = document.implementation.createHTMLDocument('');\n            } else if (document.implementation && document.implementation.createDocument) {\n              doc = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);\n              doc.documentElement.appendChild(doc.createElement('head'));\n              doc.documentElement.appendChild(doc.createElement('body'));\n            } else if (window.ActiveXObject) {\n              doc = new window.ActiveXObject('htmlfile');\n              doc.write('<head><\\/head><body><\\/body>');\n              doc.close();\n            }\n\n            if (!doc) throw Error('base not supported');\n\n            var baseTag = doc.createElement('base');\n            baseTag.href = base;\n            doc.getElementsByTagName('head')[0].appendChild(baseTag);\n            var anchor = doc.createElement('a');\n            anchor.href = url;\n            return anchor.href;\n          } finally {\n            if (iframe)\n              iframe.parentNode.removeChild(iframe);\n          }\n        }());\n      }\n\n      // An inner object implementing URLUtils (either a native URL\n      // object or an HTMLAnchorElement instance) is used to perform the\n      // URL algorithms. With full ES5 getter/setter support, return a\n      // regular object For IE8's limited getter/setter support, a\n      // different HTMLAnchorElement is returned with properties\n      // overridden\n\n      var instance = URLUtils(url || '');\n\n      // Detect for ES5 getter/setter support\n      // (an Object.defineProperties polyfill that doesn't support getters/setters may throw)\n      var ES5_GET_SET = (function() {\n        if (!('defineProperties' in Object)) return false;\n        try {\n          var obj = {};\n          Object.defineProperties(obj, { prop: { 'get': function () { return true; } } });\n          return obj.prop;\n        } catch (_) {\n          return false;\n        }\n      })();\n\n      var self = ES5_GET_SET ? this : document.createElement('a');\n\n\n\n      var query_object = new URLSearchParams(\n        instance.search ? instance.search.substring(1) : null);\n      query_object._url_object = self;\n\n      Object.defineProperties(self, {\n        href: {\n          get: function () { return instance.href; },\n          set: function (v) { instance.href = v; tidy_instance(); update_steps(); },\n          enumerable: true, configurable: true\n        },\n        origin: {\n          get: function () {\n            if ('origin' in instance) return instance.origin;\n            return this.protocol + '//' + this.host;\n          },\n          enumerable: true, configurable: true\n        },\n        protocol: {\n          get: function () { return instance.protocol; },\n          set: function (v) { instance.protocol = v; },\n          enumerable: true, configurable: true\n        },\n        username: {\n          get: function () { return instance.username; },\n          set: function (v) { instance.username = v; },\n          enumerable: true, configurable: true\n        },\n        password: {\n          get: function () { return instance.password; },\n          set: function (v) { instance.password = v; },\n          enumerable: true, configurable: true\n        },\n        host: {\n          get: function () {\n            // IE returns default port in |host|\n            var re = {'http:': /:80$/, 'https:': /:443$/, 'ftp:': /:21$/}[instance.protocol];\n            return re ? instance.host.replace(re, '') : instance.host;\n          },\n          set: function (v) { instance.host = v; },\n          enumerable: true, configurable: true\n        },\n        hostname: {\n          get: function () { return instance.hostname; },\n          set: function (v) { instance.hostname = v; },\n          enumerable: true, configurable: true\n        },\n        port: {\n          get: function () { return instance.port; },\n          set: function (v) { instance.port = v; },\n          enumerable: true, configurable: true\n        },\n        pathname: {\n          get: function () {\n            // IE does not include leading '/' in |pathname|\n            if (instance.pathname.charAt(0) !== '/') return '/' + instance.pathname;\n            return instance.pathname;\n          },\n          set: function (v) { instance.pathname = v; },\n          enumerable: true, configurable: true\n        },\n        search: {\n          get: function () { return instance.search; },\n          set: function (v) {\n            if (instance.search === v) return;\n            instance.search = v; tidy_instance(); update_steps();\n          },\n          enumerable: true, configurable: true\n        },\n        searchParams: {\n          get: function () { return query_object; },\n          enumerable: true, configurable: true\n        },\n        hash: {\n          get: function () { return instance.hash; },\n          set: function (v) { instance.hash = v; tidy_instance(); },\n          enumerable: true, configurable: true\n        },\n        toString: {\n          value: function() { return instance.toString(); },\n          enumerable: false, configurable: true\n        },\n        valueOf: {\n          value: function() { return instance.valueOf(); },\n          enumerable: false, configurable: true\n        }\n      });\n\n      function tidy_instance() {\n        var href = instance.href.replace(/#$|\\?$|\\?(?=#)/g, '');\n        if (instance.href !== href)\n          instance.href = href;\n      }\n\n      function update_steps() {\n        query_object._setList(instance.search ? urlencoded_parse(instance.search.substring(1)) : []);\n        query_object._update_steps();\n      };\n\n      return self;\n    }\n\n    if (origURL) {\n      for (var i in origURL) {\n        if (origURL.hasOwnProperty(i) && typeof origURL[i] === 'function')\n          URL[i] = origURL[i];\n      }\n    }\n\n    global.URL = URL;\n    global.URLSearchParams = URLSearchParams;\n  }());\n\n  // Patch native URLSearchParams constructor to handle sequences/records\n  // if necessary.\n  (function() {\n    if (new global.URLSearchParams([['a', 1]]).get('a') === '1' &&\n        new global.URLSearchParams({a: 1}).get('a') === '1')\n      return;\n    var orig = global.URLSearchParams;\n    global.URLSearchParams = function(init) {\n      if (init && typeof init === 'object' && isSequence(init)) {\n        var o = new orig();\n        toArray(init).forEach(function(e) {\n          if (!isSequence(e)) throw TypeError();\n          var nv = toArray(e);\n          if (nv.length !== 2) throw TypeError();\n          o.append(nv[0], nv[1]);\n        });\n        return o;\n      } else if (init && typeof init === 'object') {\n        o = new orig();\n        Object.keys(init).forEach(function(key) {\n          o.set(key, init[key]);\n        });\n        return o;\n      } else {\n        return new orig(init);\n      }\n    };\n  }());\n\n}(self));\n// Work-In-Progress 'prollyfill' for Fetch API\n// Standard: https://fetch.spec.whatwg.org/#fetch-api\n//\n// As usual, the intent is to produce a forward-compatible\n// subset so that code can be written using future standard\n// functionality; not every case is considered or supported.\n\n// Requires ES2015: Promise, Symbol.iterator (or polyfill)\n// Requires: URL (or polyfill)\n\n// Example:\n//   fetch('README.md')\n//     .then(function(response) { return response.text(); })\n//     .then(function(text) { alert(text); });\n\n(function(global) {\n  'use strict';\n\n  // Web IDL concepts\n\n  // https://heycam.github.io/webidl/#idl-ByteString\n  function ByteString(value) {\n    value = String(value);\n    if (value.match(/[^\\x00-\\xFF]/)) throw TypeError('Not a valid ByteString');\n    return value;\n  }\n\n  // https://heycam.github.io/webidl/#idl-USVString\n  function USVString(value) {\n    value = String(value);\n    return value.replace(\n        /([\\u0000-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDFFF])/g,\n      function (c) {\n        if (/^[\\uD800-\\uDFFF]$/.test(c)) return '\\uFFFD';\n        return c;\n      });\n  }\n\n  function ushort(x) { return x & 0xFFFF; }\n\n  // 2 Terminology\n\n  function byteLowerCase(s) {\n    return String(s).replace(/[A-Z]/g, function(c) { return c.toLowerCase(); });\n  }\n\n  function byteUpperCase(s) {\n    return String(s).replace(/[a-z]/g, function(c) { return c.toUpperCase(); });\n  }\n\n  function byteCaseInsensitiveMatch(a, b) {\n    return byteLowerCase(a) === byteLowerCase(b);\n  }\n\n  // 2.1 HTTP\n\n  // 2.1.1 Methods\n\n  function isForbiddenMethod(m) {\n    m = byteUpperCase(m);\n    return m === 'CONNECT' || m === 'TRACE' || m === 'TRACK';\n  }\n\n  function normalizeMethod(m) {\n    var u = byteUpperCase(m);\n    if (u === 'DELETE' || u === 'GET' || u === 'HEAD' || u === 'OPTIONS' ||\n        u === 'POST' || u === 'PUT') return u;\n    return m;\n  }\n\n  function isName(s) {\n    return /^[!#$%&'*+\\-.09A-Z^_`a-z|~]+$/.test(s);\n  }\n  function isValue(s) {\n    // TODO: Implement me\n    return true;\n  }\n  function isForbiddenHeaderName(n) {\n    n = String(n).toLowerCase();\n    var forbidden = {\n      'accept-charset': true,\n      'accept-encoding': true,\n      'access-control-request-headers': true,\n      'access-control-request-method': true,\n      'connection': true,\n      'content-length': true,\n      'cookie': true,\n      'cookie2': true,\n      'date': true,\n      'dnt': true,\n      'expect': true,\n      'host': true,\n      'keep-alive': true,\n      'origin': true,\n      'referer': true,\n      'te': true,\n      'trailer': true,\n      'transfer-encoding': true,\n      'upgrade': true,\n      'user-agent': true,\n      'via': true\n    };\n    return forbidden[n] || n.substring(0, 6) === 'proxy-' || n.substring(0, 4) === 'sec-';\n  }\n\n  function isForbiddenResponseHeaderName(n) {\n    n = String(n).toLowerCase();\n    var forbidden = {\n      'set-cookie': true,\n      'set-cookie2': true\n    };\n    return forbidden[n];\n  }\n\n  function isSimpleHeader(name, value) {\n    name = String(name).toLowerCase();\n    return name === 'accept' || name === 'accept-language' || name === 'content-language' ||\n      (name === 'content-type' &&\n       ['application/x-www-form-encoded', 'multipart/form-data', 'text/plain'].indexOf(value) !== -1);\n  }\n\n  //\n  // 5.1 Headers class\n  //\n\n  // typedef (Headers or sequence<sequence<ByteString>> or OpenEndedDictionary<ByteString>) HeadersInit;\n\n  // Constructor(optional HeadersInit init)\n  function Headers(init) {\n    this._guard = 'none';\n    this._headerList = [];\n    if (init) fill(this, init);\n  }\n\n  function fill(headers, init) {\n    if (init instanceof Headers) {\n      init._headerList.forEach(function(header) {\n        headers.append(header[0], header[1]);\n      });\n    } else if (Array.isArray(init)) {\n      init.forEach(function(header) {\n        if (!Array.isArray(header) || header.length !== 2) throw TypeError();\n        headers.append(header[0], header[1]);\n      });\n    } else {\n      init = Object(init);\n      Object.keys(init).forEach(function(key) {\n        headers.append(key, init[key]);\n      });\n    }\n  }\n\n  // interface Headers\n  Headers.prototype = {\n    // void append(ByteString name, ByteString value);\n    append: function append(name, value) {\n      name = ByteString(name);\n      if (!isName(name) || !isValue(value)) throw TypeError();\n      if (this._guard === 'immutable') throw TypeError();\n      else if (this._guard === 'request' && isForbiddenHeaderName(name)) return;\n      else if (this._guard === 'request-no-CORS' && !isSimpleHeader(name, value)) return;\n      else if (this._guard === 'response' && isForbiddenResponseHeaderName(name)) return;\n\n      name = name.toLowerCase();\n      this._headerList.push([name, value]);\n    },\n\n    // void delete(ByteString name);\n    'delete': function delete_(name) {\n      name = ByteString(name);\n      if (!isName(name)) throw TypeError();\n      if (this._guard === 'immutable') throw TypeError();\n      else if (this._guard === 'request' && isForbiddenHeaderName(name)) return;\n      else if (this._guard === 'request-no-CORS' && !isSimpleHeader(name, 'invalid')) return;\n      else if (this._guard === 'response' && isForbiddenResponseHeaderName(name)) return;\n\n      name = name.toLowerCase();\n      var index = 0;\n      while (index < this._headerList.length) {\n        if (this._headerList[index][0] === name)\n          this._headerList.splice(index, 1);\n        else\n          ++index;\n      }\n    },\n\n    // ByteString? get(ByteString name);\n    get: function get(name) {\n      name = ByteString(name);\n      if (!isName(name)) throw TypeError();\n      name = name.toLowerCase();\n      for (var index = 0; index < this._headerList.length; ++index) {\n        if (this._headerList[index][0] === name)\n          return this._headerList[index][1];\n      }\n      return null;\n    },\n\n    // sequence<ByteString> getAll(ByteString name);\n    getAll: function getAll(name) {\n      name = ByteString(name);\n      if (!isName(name)) throw TypeError();\n      name = name.toLowerCase();\n      var sequence = [];\n      for (var index = 0; index < this._headerList.length; ++index) {\n        if (this._headerList[index][0] === name)\n          sequence.push(this._headerList[index][1]);\n      }\n      return sequence;\n    },\n\n    // boolean has(ByteString name);\n    has: function has(name) {\n      name = ByteString(name);\n      if (!isName(name)) throw TypeError();\n      name = name.toLowerCase();\n      for (var index = 0; index < this._headerList.length; ++index) {\n        if (this._headerList[index][0] === name)\n          return true;\n      }\n      return false;\n    },\n\n    // void set(ByteString name, ByteString value);\n    set: function set(name, value) {\n      name = ByteString(name);\n      if (!isName(name) || !isValue(value)) throw TypeError();\n      if (this._guard === 'immutable') throw TypeError();\n      else if (this._guard === 'request' && isForbiddenHeaderName(name)) return;\n      else if (this._guard === 'request-no-CORS' && !isSimpleHeader(name, value)) return;\n      else if (this._guard === 'response' && isForbiddenResponseHeaderName(name)) return;\n\n      name = name.toLowerCase();\n      for (var index = 0; index < this._headerList.length; ++index) {\n        if (this._headerList[index][0] === name) {\n          this._headerList[index++][1] = value;\n          while (index < this._headerList.length) {\n            if (this._headerList[index][0] === name)\n              this._headerList.splice(index, 1);\n            else\n              ++index;\n          }\n          return;\n        }\n      }\n      this._headerList.push([name, value]);\n    }\n  };\n  Headers.prototype[Symbol.iterator] = function() {\n    return new HeadersIterator(this);\n  };\n\n  function HeadersIterator(headers) {\n    this._headers = headers;\n    this._index = 0;\n  }\n  HeadersIterator.prototype = {};\n  HeadersIterator.prototype.next = function() {\n    if (this._index >= this._headers._headerList.length)\n      return { value: undefined, done: true };\n    return { value: this._headers._headerList[this._index++], done: false };\n  };\n  HeadersIterator.prototype[Symbol.iterator] = function() { return this; };\n\n\n  //\n  // 5.2 Body mixin\n  //\n\n  function Body(_stream) {\n    // TODO: Handle initialization from other types\n    this._stream = _stream;\n    this.bodyUsed = false;\n  }\n\n  // interface FetchBodyStream\n  Body.prototype = {\n    // Promise<ArrayBuffer> arrayBuffer();\n    arrayBuffer: function() {\n      if (this.bodyUsed) return Promise.reject(TypeError());\n      this.bodyUsed = true;\n      if (this._stream instanceof ArrayBuffer) return Promise.resolve(this._stream);\n      var value = this._stream;\n      return new Promise(function(resolve, reject) {\n        var octets = unescape(encodeURIComponent(value)).split('').map(function(c) {\n          return c.charCodeAt(0);\n        });\n        resolve(new Uint8Array(octets).buffer);\n      });\n    },\n    // Promise<Blob> blob();\n    blob: function() {\n      if (this.bodyUsed) return Promise.reject(TypeError());\n      this.bodyUsed = true;\n      if (this._stream instanceof Blob) return Promise.resolve(this._stream);\n      return Promise.resolve(new Blob([this._stream]));\n    },\n    // Promise<FormData> formData();\n    formData: function() {\n      if (this.bodyUsed) return Promise.reject(TypeError());\n      this.bodyUsed = true;\n      if (this._stream instanceof FormData) return Promise.resolve(this._stream);\n      return Promise.reject(Error('Not yet implemented'));\n    },\n    // Promise<JSON> json();\n    json: function() {\n      if (this.bodyUsed) return Promise.reject(TypeError());\n      this.bodyUsed = true;\n      var that = this;\n      return new Promise(function(resolve, reject) {\n        resolve(JSON.parse(that._stream));\n      });\n    },\n    // Promise<USVString> text();\n    text: function() {\n      if (this.bodyUsed) return Promise.reject(TypeError());\n      this.bodyUsed = true;\n      return Promise.resolve(String(this._stream));\n    }\n  };\n\n  //\n  // 5.3 Request class\n  //\n\n  // typedef (Request or USVString) RequestInfo;\n\n  // Constructor(RequestInfo input, optional RequestInit init)\n  function Request(input, init) {\n    if (arguments.length < 1) throw TypeError('Not enough arguments');\n\n    Body.call(this, null);\n\n    // readonly attribute ByteString method;\n    this.method = 'GET';\n\n    // readonly attribute USVString url;\n    this.url = '';\n\n    // readonly attribute Headers headers;\n    this.headers = new Headers();\n    this.headers._guard = 'request';\n\n    // readonly attribute DOMString referrer;\n    this.referrer = null; // TODO: Implement.\n\n    // readonly attribute RequestMode mode;\n    this.mode = null; // TODO: Implement.\n\n    // readonly attribute RequestCredentials credentials;\n    this.credentials = 'omit';\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) throw TypeError();\n      input.bodyUsed = true;\n      this.method = input.method;\n      this.url = input.url;\n      this.headers = new Headers(input.headers);\n      this.headers._guard = input.headers._guard;\n      this.credentials = input.credentials;\n      this._stream = input._stream;\n    } else {\n      input = USVString(input);\n      this.url = String(new URL(input, self.location));\n    }\n\n    init = Object(init);\n\n    if ('method' in init) {\n      var method = ByteString(init.method);\n      if (isForbiddenMethod(method)) throw TypeError();\n      this.method = normalizeMethod(method);\n    }\n\n    if ('headers' in init) {\n      this.headers = new Headers();\n      fill(this.headers, init.headers);\n    }\n\n    if ('body' in init)\n      this._stream = init.body;\n\n    if ('credentials' in init &&\n        (['omit', 'same-origin', 'include'].indexOf(init.credentials) !== -1))\n      this.credentials = init.credentials;\n  }\n\n  // interface Request\n  Request.prototype = Body.prototype;\n\n  //\n  // 5.4 Response class\n  //\n\n  // Constructor(optional FetchBodyInit body, optional ResponseInit init)\n  function Response(body, init) {\n    if (arguments.length < 1)\n      body = '';\n\n    this.headers = new Headers();\n    this.headers._guard = 'response';\n\n    // Internal\n    if (body instanceof XMLHttpRequest && '_url' in body) {\n      var xhr = body;\n      this.type = 'basic'; // TODO: ResponseType\n      this.url = USVString(xhr._url);\n      this.status = xhr.status;\n      this.ok = 200 <= this.status && this.status <= 299;\n      this.statusText = xhr.statusText;\n      xhr.getAllResponseHeaders()\n        .split(/\\r?\\n/)\n        .filter(function(header) { return header.length; })\n        .forEach(function(header) {\n          var i = header.indexOf(':');\n          this.headers.append(header.substring(0, i), header.substring(i + 2));\n        }, this);\n      Body.call(this, xhr.responseText);\n      return;\n    }\n\n    Body.call(this, body);\n\n    init = Object(init) || {};\n\n    // readonly attribute USVString url;\n    this.url = '';\n\n    // readonly attribute unsigned short status;\n    var status = 'status' in init ? ushort(init.status) : 200;\n    if (status < 200 || status > 599) throw RangeError();\n    this.status = status;\n\n    // readonly attribute boolean ok;\n    this.ok = 200 <= this.status && this.status <= 299;\n\n    // readonly attribute ByteString statusText;\n    var statusText = 'statusText' in init ? String(init.statusText) : 'OK';\n    if (/[^\\x00-\\xFF]/.test(statusText)) throw TypeError();\n    this.statusText = statusText;\n\n    // readonly attribute Headers headers;\n    if ('headers' in init) fill(this.headers, init);\n\n    // TODO: Implement these\n    // readonly attribute ResponseType type;\n    this.type = 'basic'; // TODO: ResponseType\n  }\n\n  // interface Response\n  Response.prototype = Body.prototype;\n\n  Response.redirect = function() {\n    // TODO: Implement?\n    throw Error('Not supported');\n  };\n\n  //\n  // 5.5 Structured cloning of Headers, FetchBodyStream, Request, Response\n  //\n\n  //\n  // 5.6 Fetch method\n  //\n\n  // Promise<Response> fetch(RequestInfo input, optional RequestInit init);\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var r = new Request(input, init);\n\n      var xhr = new XMLHttpRequest(), async = true;\n      xhr._url = r.url;\n\n      try { xhr.open(r.method, r.url, async); } catch (e) { throw TypeError(e.message); }\n\n      for (var iter = r.headers[Symbol.iterator](), step = iter.next();\n           !step.done; step = iter.next())\n        xhr.setRequestHeader(step.value[0], step.value[1]);\n\n      if (r.credentials === 'include')\n        xhr.withCredentials = true;\n\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState !== XMLHttpRequest.DONE) return;\n        if (xhr.status === 0)\n          reject(new TypeError('Network error'));\n        else\n          resolve(new Response(xhr));\n      };\n\n      xhr.send(r._stream);\n    });\n  }\n\n  // Exported\n  if (!('fetch' in global)) {\n    global.Headers = Headers;\n    global.Request = Request;\n    global.Response = Response;\n    global.fetch = fetch;\n  }\n\n}(self));\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};","import ArrayUtil from './framework/Utilities/ArrayUtil';\r\nimport { CustomInputElement } from './framework/CustomInputElement';\r\nimport MakeRequest from './framework/Utilities/MakeRequest';\r\nimport { FileFieldElement } from './elements/FileField/FileFieldElement';\r\n\r\nexport class CustomForm {\r\n    action: string;\r\n    method: string;\r\n    _nativeInputs: HTMLInputElement[];\r\n\r\n    public onsubmit: ((this: CustomForm, promise: Promise<any>) => any) | null;\r\n\r\n    constructor(private form: HTMLFormElement) {\r\n        this.action = form.action || '';\r\n        this.method = form.method || 'get';\r\n        this.attachForm();\r\n        this.binGroupsToDependency();\r\n    }\r\n\r\n    get inputs(): CustomInputElement[] {\r\n        return ArrayUtil.FromNodeList(this.form.querySelectorAll('.group-container:not([hidden]) [custom-input]:not([hidden])'));\r\n    }\r\n    get nativeInputs(): HTMLInputElement[] {\r\n        this._nativeInputs =\r\n            this._nativeInputs ||\r\n            ArrayUtil.FromNodeList(this.form.querySelectorAll('input'));\r\n        return this._nativeInputs;\r\n    }\r\n\r\n    get hasFiles(): boolean {\r\n        return this.inputs.some(input => input instanceof FileFieldElement);\r\n    }\r\n\r\n    attachForm() {\r\n        this.form.onsubmit = event => {\r\n            event.preventDefault();\r\n            let valid = this.validate();\r\n            if (valid) {\r\n                if (this.onsubmit) {\r\n                    this.onsubmit(this.submit());\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    validate(): boolean {\r\n        this.inputs.forEach(input => (<CustomInputElement>input).validate());\r\n        return this.inputs.every(input => (<CustomInputElement>input).valid);\r\n    }\r\n\r\n    submit(): Promise<any> {\r\n        let formData = {};\r\n        const headers: any = {};\r\n        this.inputs.map(i => (formData[i.name] = i.value));\r\n        formData = this.extractData();\r\n        return new MakeRequest(this.action, this.method, headers).send(\r\n            formData,\r\n        );\r\n    }\r\n    private extractData(): FormData {\r\n        const formData: FormData = new FormData();\r\n        for (const input of this.inputs) {\r\n            if (input instanceof FileFieldElement) {\r\n                for (let index = 0; index < input.value.length; index++) {\r\n                    const file = input.value[index];\r\n                    formData.append(input.name, file, file.name);\r\n                }\r\n            } else {\r\n                formData.append(`Values[${input.name}]`, input.value);\r\n            }\r\n        }\r\n        for (const input of this.nativeInputs) {\r\n            if (input.name) {\r\n                formData.append(input.name, input.value);\r\n            }\r\n        }\r\n        return formData;\r\n    }\r\n\r\n    private binGroupsToDependency() {\r\n        let groupContainers = this.form.querySelectorAll('div.group-container:not([data-depends-on=\"\"])',\r\n        );\r\n        groupContainers.forEach((element: HTMLElement) => {\r\n            let dependentField = element.getAttribute('data-depends-on');\r\n            let dependentValue = element.getAttribute('data-dependent-value');\r\n            let customElement: CustomInputElement = document.forms[0].querySelector(`[name=\"${dependentField}\"]`) as CustomInputElement;\r\n            element.setAttribute(\"hidden\", \"\");\r\n            customElement.onChange.on(event => {\r\n                if (event.value === dependentValue || event.value.includes(dependentValue)) {\r\n                    element.removeAttribute(\"hidden\");\r\n                } else {\r\n                    element.setAttribute(\"hidden\", \"\");\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\n\r\n@CustomElement({\r\n    selector: 'address-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<input id='address' type=\"text\" placeholder='Address' required/>\r\n\t\t\t\t<input id='city' type=\"text\" placeholder='City'/>\r\n\t\t\t\t<input id='zip' type=\"number\" placeholder='Zip'/>\r\n\t\t\t</div>`,\r\n    style: `.wrapper{\r\n                display:flex;\r\n            }\r\n            input{\r\n                box-sizing: border-box;\r\n                border: none;\r\n                background-color: #f1f4ff;\r\n                margin: 2px;\r\n                resize: none;\r\n                width:33%;\r\n            }\r\n           `,\r\n    templatePath: './html.html',\r\n    useShadow: true,\r\n})\r\nexport class AddressElement extends CustomInputElement {\r\n    address: HTMLInputElement;\r\n    city: HTMLInputElement;\r\n    zip: HTMLInputElement;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        let address = this.address.value || '';\r\n        let city = this.city.value ? `,${this.city.value}` : '';\r\n        let zip = this.zip.value ? `,${this.zip.value}` : '';\r\n        return `${address}${city}${zip}`;\r\n    }\r\n\r\n    set value(value: string) {\r\n        const values = value.split(',');\r\n        this.address.value = values[0];\r\n        this.city.value = values[1];\r\n        this.zip.value = values[2];\r\n    }\r\n\r\n    get valid(): boolean {\r\n        return (\r\n            this.address.validity.valid &&\r\n            this.city.validity.valid &&\r\n            this.zip.validity.valid\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.address = super.getChildInput('#address');\r\n        this.city = super.getChildInput('#city');\r\n        this.zip = super.getChildInput('#zip');\r\n        this.address.addEventListener('change', this.change.bind(this));\r\n        this.city.addEventListener('change', this.change.bind(this));\r\n        this.zip.addEventListener('change', this.change.bind(this));\r\n    }\r\n\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\nimport BankAccountValidator from '../../framework/Validation/Validators/BankAccount';\r\nimport BankAccountRegistrationNumberValidator from '../../framework/Validation/Validators/BankAccountRegistrationNumber';\r\n\r\n@CustomElement({\r\n    selector: 'bank-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<input type=\"text\" id='account-field' placeholder='Bank Account'/>\r\n\t\t\t\t<input type=\"text\" id='reg-number-field' placeholder='Bank Account Registration Number'/>\r\n\t\t\t</div>`,\r\n    style: `\r\n    :host{\r\n            width:100%;\r\n    }\r\n    .wrapper{\r\n            display:flex;\r\n    }\r\n    input{\r\n            box-sizing: border-box;\r\n            width: 100% !important;\r\n            border: none;\r\n            background-color: #f1f4ff;\r\n            margin: 2px;\r\n            resize: none;\r\n    }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class BankFieldElement extends CustomInputElement {\r\n    account: HTMLInputElement;\r\n    regNumber: HTMLInputElement;\r\n    bankAccountValidator: BankAccountValidator = new BankAccountValidator();\r\n    regNumberValidator: BankAccountRegistrationNumberValidator = new BankAccountRegistrationNumberValidator();\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        let account = this.account.value || '';\r\n        let regNumber = this.regNumber.value ? `,${this.regNumber.value}` : '';\r\n        return `${account}${regNumber}`;\r\n    }\r\n\r\n    set value(value: string) {\r\n        const values = value.split(',');\r\n        this.account.value = values[0];\r\n        this.regNumber.value = values[1];\r\n    }\r\n\r\n    get valid(): boolean {\r\n        return (\r\n            this.bankAccountValidator.isSatisfiedBy(\r\n                this.account.value,\r\n                !this.required,\r\n            ) &&\r\n            this.regNumberValidator.isSatisfiedBy(\r\n                this.regNumber.value,\r\n                !this.required,\r\n            )\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.account = super.getChildInput('#account-field');\r\n        this.regNumber = super.getChildInput('#reg-number-field');\r\n        this.account.addEventListener('change', this.change.bind(this));\r\n        this.regNumber.addEventListener('change', this.change.bind(this));\r\n        if (this.required) {\r\n            this.account.setAttribute('required', '');\r\n            this.regNumber.setAttribute('required', '');\r\n        }\r\n    }\r\n\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\nimport CprValidator from '../../framework/Validation/Validators/CPR';\r\n\r\n@CustomElement({\r\n    selector: 'cpr-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<input type=\"text\" id='cpr-field' placeholder='DDMMYY-SSSS'/>\r\n\t\t\t</div>`,\r\n    style: `\r\n    :host{\r\n            width:100%;\r\n    }\r\n    .wrapper{\r\n            display:flex;\r\n    }\r\n    input{\r\n            box-sizing: border-box;\r\n            width: 100% !important;\r\n            border: none;\r\n            background-color: #f1f4ff;\r\n            margin: 2px;\r\n            resize: none;\r\n    }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class CPRElement extends CustomInputElement {\r\n    text: HTMLInputElement;\r\n    validator: CprValidator = new CprValidator();\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        return `${this.text.value}`;\r\n    }\r\n\r\n    set value(value: string) {\r\n        this.text.value = value;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        return this.validator.isSatisfiedBy(this.value, !this.required);\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.text = super.getChildInput('#cpr-field');\r\n        this.text.addEventListener('change', this.change.bind(this));\r\n        if (this.required) {\r\n            this.text.setAttribute('required', '');\r\n        }\r\n    }\r\n\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\nimport CprValidator from '../../framework/Validation/Validators/CPR';\r\nimport CvrValidator from '../../framework/Validation/Validators/CVR';\r\n\r\n@CustomElement({\r\n    selector: 'cvr-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<input type=\"text\" id='cvr-field' placeholder='DDMMYY-SSSS'/>\r\n\t\t\t</div>`,\r\n    style: `\r\n    :host{\r\n            width:100%;\r\n    }\r\n    .wrapper{\r\n            display:flex;\r\n    }\r\n    input{\r\n            box-sizing: border-box;\r\n            width: 100% !important;\r\n            border: none;\r\n            background-color: #f1f4ff;\r\n            margin: 2px;\r\n            resize: none;\r\n    }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class CVRElement extends CustomInputElement {\r\n    text: HTMLInputElement;\r\n    validator: CvrValidator = new CvrValidator();\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        return `${this.text.value}`;\r\n    }\r\n\r\n    set value(value: string) {\r\n        this.text.value = value;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        return this.validator.isSatisfiedBy(this.value, !this.required);\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.text = super.getChildInput('#cvr-field');\r\n        this.text.addEventListener('change', this.change.bind(this));\r\n        if (this.required) {\r\n            this.text.setAttribute('required', '');\r\n        }\r\n    }\r\n\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\nimport { StringUtil } from '../../framework/Utilities/StringUtil';\r\n\r\n@CustomElement({\r\n    selector: 'checkbox-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n               \r\n\t\t\t</div>`,\r\n    style: `\r\n            :host{\r\n                width:100%;\r\n            }\r\n            .wrapper{\r\n                display:flex;\r\n                justify-content: center;\r\n                flex-wrap:wrap;\r\n            }\r\n            .checkbox {\r\n                width: auto;\r\n                margin: auto 3px;\r\n                display: flex;\r\n                flex-grow: 0.1;\r\n                justify-content: space-around;\r\n            }\r\n            input{\r\n                box-sizing: border-box;\r\n                width: auto !important;\r\n                border: none;\r\n                background-color: #f1f4ff;\r\n                margin: 2px;\r\n                resize: none;\r\n            }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class CheckBoxElement extends CustomInputElement {\r\n    checkbox: HTMLInputElement[];\r\n    checkboxTemplate = `\r\n    <div class='checkbox'>\r\n        <label for=\"{2}\">{1}</label>\r\n        <input type='checkbox' name='{0}' value=\"{1}\" id=\"{2}\"/>\r\n    </div>`;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string[] {\r\n        return this.checkbox.filter(c => c.checked).map(c => c.value);\r\n    }\r\n\r\n    set value(values: string[]) {\r\n        // this.checkbox.value = value;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        if (this.required) {\r\n            return this.value.length > 0;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.addCheckBoxes();\r\n        this.checkbox = super.getChildInputs(`[name=${this.name}]`);\r\n        this.checkbox.forEach(c =>\r\n            c.addEventListener('change', this.change.bind(this)),\r\n        );\r\n    }\r\n\r\n    private addCheckBoxes() {\r\n        const wrapper = super.getChildElement('.wrapper');\r\n        this.options.forEach((element, index) => {\r\n            wrapper.insertAdjacentHTML(\r\n                'beforeend',\r\n                StringUtil.StringFormat(\r\n                    this.checkboxTemplate,\r\n                    this.name,\r\n                    element,\r\n                    `${this.name}-${index}`,\r\n                ),\r\n            );\r\n        });\r\n    }\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\n\r\n@CustomElement({\r\n    selector: 'regex-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<input type=\"text\" id='regex-field'/>\r\n\t\t\t</div>`,\r\n    style: `\r\n    :host{\r\n            width:100%;\r\n    }\r\n    .wrapper{\r\n            display:flex;\r\n    }\r\n    input{\r\n            box-sizing: border-box;\r\n            width: 100% !important;\r\n            border: none;\r\n            background-color: #f1f4ff;\r\n            margin: 2px;\r\n            resize: none;\r\n    }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class CustomRegularExpressionElement extends CustomInputElement {\r\n    text: HTMLInputElement;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        return `${this.text.value}`;\r\n    }\r\n\r\n    set value(value: string) {\r\n        this.text.value = value;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        return this.text.validity.valid;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.text = super.getChildInput('#regex-field');\r\n        this.text.addEventListener('change', this.change.bind(this));\r\n        if (this.required) {\r\n            this.text.setAttribute('required', '');\r\n        }\r\n        if (this.customValue) {\r\n            this.text.setAttribute('pattern', this.customValue);\r\n        }\r\n    }\r\n\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\n\r\n@CustomElement({\r\n    selector: 'date-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<input type=\"date\" id='date-field'/>\r\n\t\t\t</div>`,\r\n    style: `\r\n    :host{\r\n            width:100%;\r\n    }\r\n    .wrapper{\r\n            display:flex;\r\n    }\r\n    input{\r\n            box-sizing: border-box;\r\n            width: 100% !important;\r\n            border: none;\r\n            background-color: #f1f4ff;\r\n            margin: 2px;\r\n            resize: none;\r\n    }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class DateFieldElement extends CustomInputElement {\r\n    date: HTMLInputElement;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        return this.date.value;\r\n    }\r\n\r\n    set value(value: string) {\r\n        this.date.value = value;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        return this.date.validity.valid;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.date = super.getChildInput('#date-field');\r\n        this.date.addEventListener('change', this.change.bind(this));\r\n        if (this.required) {\r\n            this.date.setAttribute('required', '');\r\n        }\r\n        if (this.max) {\r\n            this.date.setAttribute('max', this.max);\r\n        }\r\n        if (this.min) {\r\n            this.date.setAttribute('min', this.min);\r\n        }\r\n    }\r\n\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\nimport { StringUtil } from '../../framework/Utilities/StringUtil';\r\n\r\n@CustomElement({\r\n    selector: 'drop-down-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n               <select id='select-list'>\r\n               </select>\r\n\t\t\t</div>`,\r\n    style: `\r\n            :host{\r\n                width:100%;\r\n            }\r\n            .wrapper{\r\n                display:flex;\r\n                justify-content: center;\r\n            }\r\n            .radio-button {\r\n                width: auto;\r\n                margin: auto 3px;\r\n                display: flex;\r\n                flex-grow: 0.1;\r\n                justify-content: space-around;\r\n            }\r\n            select{\r\n                box-sizing: border-box;\r\n                width: 100% !important;\r\n                border: none;\r\n                background-color: #f1f4ff;\r\n                margin: 2px;\r\n                resize: none;\r\n            }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class DropDownListElement extends CustomInputElement {\r\n    select: HTMLInputElement;\r\n    optionTemplate = `\r\n    <option value='{0}'>\r\n       {1}\r\n    </option>`;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        return `${this.select.value}`;\r\n    }\r\n\r\n    set value(value: string) {\r\n        this.select.value = value;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        return this.select.validity.valid;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.select = super.getChildInput(`#select-list`);\r\n        this.addOptions();\r\n        if (this.required) {\r\n            this.select.setAttribute('required', '');\r\n        }\r\n        if (this.multi) {\r\n            this.select.setAttribute('multiple', '');\r\n        }\r\n        this.select.addEventListener('change', this.change.bind(this));\r\n    }\r\n\r\n    private addOptions() {\r\n        this.options.forEach((element, index) => {\r\n            this.select.insertAdjacentHTML(\r\n                'beforeend',\r\n                StringUtil.StringFormat(this.optionTemplate, element, element),\r\n            );\r\n        });\r\n    }\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import { AddressElement } from './Address/AddressElement';\r\nimport { TextFieldElement } from './TextField/TextFieldElement';\r\nimport { EmailFieldElement } from './EmailField/EmailFieldElement';\r\nimport { CheckBoxElement } from './CheckBoxElement/CheckBoxElement';\r\nimport { RadioButtonGroupElement } from './RadioButtonGroup/RadioButtonGroupElement';\r\nimport { TextAreaElement } from './TextAreaElement/TextAreaElement';\r\nimport { DropDownListElement } from './DropDownList/DropDownListElement';\r\nimport { FileFieldElement } from './FileField/FileFieldElement';\r\nimport { NumericFieldElement } from './NumericField/NumericFieldElement';\r\nimport { CustomRegularExpressionElement } from './CustomRegularExpression/CustomRegularExpressionElement';\r\nimport { DateFieldElement } from './DateField/DateFieldElement';\r\nimport { IntPhoneFieldElement } from './InternationaPhoneNumber/InternationaPhoneNumberElement';\r\nimport { CPRElement } from './CPRElement/CPRElement';\r\nimport { CVRElement } from './CVRElement/CVRElement';\r\nimport { IdentificationElement } from './IdentificationElement/IdentificationElement';\r\nimport { BankFieldElement } from './BankField/BankFieldElement';\r\n\r\nexport {\r\n    AddressElement,\r\n    TextFieldElement,\r\n    EmailFieldElement,\r\n    CheckBoxElement,\r\n    RadioButtonGroupElement,\r\n    TextAreaElement,\r\n    DropDownListElement,\r\n    FileFieldElement,\r\n    NumericFieldElement,\r\n    CustomRegularExpressionElement,\r\n    DateFieldElement,\r\n    IntPhoneFieldElement,\r\n    CPRElement,\r\n    CVRElement,\r\n    IdentificationElement,\r\n    BankFieldElement,\r\n};\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\n\r\n@CustomElement({\r\n    selector: 'email-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<input type=\"text\" id='email-field'/>\r\n\t\t\t</div>`,\r\n    style: `\r\n    :host{\r\n            width:100%;\r\n    }\r\n    .wrapper{\r\n            display:flex;\r\n    }\r\n    input{\r\n            box-sizing: border-box;\r\n            width: 100% !important;\r\n            border: none;\r\n            background-color: #f1f4ff;\r\n            margin: 2px;\r\n            resize: none;\r\n    }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class EmailFieldElement extends CustomInputElement {\r\n    mailRegex: RegExp = new RegExp(\r\n        /^([a-zA-Z0-9ÆØÅæøå_.+-])+\\@(([a-zA-Z0-9ÆØÅæøå-])+\\.)+([a-zA-Z0-9ÆØÅæøå]{2,4})+$/,\r\n    );\r\n\r\n    email: HTMLInputElement;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        return `${this.email.value}`;\r\n    }\r\n\r\n    set value(value: string) {\r\n        this.email.value = value;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        const patternValid = !this.value || this.mailRegex.test(this.value);\r\n        return this.email.validity.valid && patternValid;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.initChildInputs();\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.email = super.getChildInput('#email-field');\r\n        this.email.addEventListener('change', this.change.bind(this));\r\n        if (this.required) {\r\n            this.email.setAttribute('required', '');\r\n        }\r\n    }\r\n\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\n\r\n@CustomElement({\r\n    selector: 'file-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<input type=\"file\" id='file-field' accept=\"image/*,application/pdf\"/>\r\n\t\t\t</div>`,\r\n    style: `\r\n    :host{\r\n            width:100%;\r\n    }\r\n    .wrapper{\r\n            display:flex;\r\n    }\r\n    input{\r\n            box-sizing: border-box;\r\n            width: 100% !important;\r\n            border: none;\r\n            background-color: #f1f4ff;\r\n            margin: 2px;\r\n            resize: none;\r\n    }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class FileFieldElement extends CustomInputElement {\r\n    file: HTMLInputElement;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): FileList {\r\n        return this.file.files;\r\n    }\r\n\r\n    set value(files: FileList) {\r\n        this.file.files = files;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        return this.file.validity.valid;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.initChildInputs();\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.file = super.getChildInput('#file-field');\r\n        this.file.addEventListener('change', this.change.bind(this));\r\n        if (this.required) {\r\n            this.file.setAttribute('required', '');\r\n        }\r\n        if (this.multi) {\r\n            this.file.setAttribute('multiple', '');\r\n        }\r\n    }\r\n\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\nimport CprValidator from '../../framework/Validation/Validators/CPR';\r\nimport IValidator from '../../framework/Validation/IValidator.interface';\r\nimport CvrValidator from '../../framework/Validation/Validators/CVR';\r\nimport BankIdSwedenValidator from '../../framework/Validation/Validators/BankIdSweden';\r\nimport BankIdNorwayValidator from '../../framework/Validation/Validators/BankIdNorway';\r\n\r\n@CustomElement({\r\n    selector: 'id-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n                <select id='id-type'>\r\n                    <option value='cvr'>Danish CVR</option>\r\n                    <option value='cpr'>Danish CPR</option>\r\n                    <option value='swe'>Sweden Bank Id</option>\r\n                    <option value='nor'>Norway Bank Id</option>\r\n                </select>\r\n\t\t\t\t<input type=\"text\" id='id-field' placeholder=''/>\r\n\t\t\t</div>`,\r\n    style: `\r\n    :host{\r\n            width:100%;\r\n    }\r\n    .wrapper{\r\n            display:flex;\r\n    }\r\n    input, select{\r\n            box-sizing: border-box;\r\n            border: none;\r\n            background-color: #f1f4ff;\r\n            margin: 2px;\r\n            resize: none;\r\n    }\r\n    input{\r\n            width: 75% !important;\r\n    }\r\n    select{\r\n            width: 25% !important;\r\n    }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class IdentificationElement extends CustomInputElement {\r\n    typeSelector: HTMLInputElement;\r\n    text: HTMLInputElement;\r\n\r\n    type: string;\r\n    validators: { [index: string]: IValidator } = {\r\n        cpr: new CprValidator(),\r\n        cvr: new CvrValidator(),\r\n        swe: new BankIdSwedenValidator(),\r\n        nor: new BankIdNorwayValidator(),\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        return `${this.text.value}`;\r\n    }\r\n\r\n    set value(value: string) {\r\n        this.text.value = value;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        return this.validators[this.type].isSatisfiedBy(\r\n            this.value,\r\n            !this.required,\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.text = super.getChildInput('#id-field');\r\n        this.typeSelector = super.getChildInput('#id-type');\r\n        this.text.addEventListener('change', this.change.bind(this));\r\n        this.typeSelector.addEventListener('change', this.change.bind(this));\r\n        if (this.required) {\r\n            this.text.setAttribute('required', '');\r\n        }\r\n        this.type = this.typeSelector.value;\r\n    }\r\n\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.type = this.typeSelector.value;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\nimport MakeRequest from '../../framework/Utilities/MakeRequest';\r\nimport * as intlTelInput from 'intl-tel-input';\r\nimport { Plugin } from 'intl-tel-input';\r\n\r\n@CustomElement({\r\n    selector: 'int-phone-element',\r\n    template: `\r\n            <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/16.0.0/css/intlTelInput.css\" >\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<input type=\"tel\" id=\"phone-field\"  />\r\n\t\t\t</div>`,\r\n    style: `\r\n    :host{\r\n            width:100%;\r\n    }\r\n    .wrapper{\r\n            display:flex;\r\n    }\r\n    .iti {\r\n        width: 100% !important;\r\n    }\r\n    input{\r\n            box-sizing: border-box;\r\n            width: 100% !important;\r\n            border: none;\r\n            background-color: #f1f4ff;\r\n            margin: 2px;\r\n            resize: none;\r\n    }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class IntPhoneFieldElement extends CustomInputElement {\r\n    phone: HTMLInputElement;\r\n    fullPhone: HTMLInputElement;\r\n    intlTelInput: Plugin;\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        return this.intlTelInput.getNumber();\r\n    }\r\n\r\n    set value(value: string) {\r\n        this.phone.value = value;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        const patternValid =\r\n            !this.intlTelInput.getNumber() || this.intlTelInput.isValidNumber();\r\n        return patternValid && this.phone.validity.valid;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.setIntlTelInput();\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.phone.addEventListener('change', this.change.bind(this));\r\n        if (this.required) {\r\n            this.phone.setAttribute('required', '');\r\n        }\r\n    }\r\n    setIntlTelInput() {\r\n        this.phone = super.getChildInput('#phone-field');\r\n        this.intlTelInput = intlTelInput(this.phone, {\r\n            geoIpLookup: (success, failure) => {\r\n                return new MakeRequest(\r\n                    'https://ipinfo.io/json?token=8226138217a68a',\r\n                    'get',\r\n                    { 'content-type': 'application/json' },\r\n                )\r\n                    .send()\r\n                    .then((request: any) => {\r\n                        const res = JSON.parse(request);\r\n                        return success(res.country);\r\n                    })\r\n                    .catch(err => {\r\n                        return success('DK');\r\n                    });\r\n            },\r\n            hiddenInput: 'fullphone',\r\n            initialCountry: 'auto',\r\n            nationalMode: true,\r\n            utilsScript:\r\n                'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/15.0.1/js/utils.js',\r\n        } as any);\r\n        this.intlTelInput.promise.then(e => {\r\n            setTimeout(() => {\r\n                this.fullPhone = super.getChildInput('[name=\"fullphone\"]');\r\n            }, 1000);\r\n        });\r\n    }\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\n\r\n@CustomElement({\r\n    selector: 'numeric-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<input type=\"number\" id='numeric-field'/>\r\n\t\t\t</div>`,\r\n    style: `\r\n    :host{\r\n            width:100%;\r\n    }\r\n    .wrapper{\r\n            display:flex;\r\n    }\r\n    input{\r\n            box-sizing: border-box;\r\n            width: 100% !important;\r\n            border: none;\r\n            background-color: #f1f4ff;\r\n            margin: 2px;\r\n            resize: none;\r\n    }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class NumericFieldElement extends CustomInputElement {\r\n    number: HTMLInputElement;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): any {\r\n        if (isNaN(this.number.valueAsNumber)) {\r\n            return '';\r\n        }\r\n        return this.number.valueAsNumber;\r\n    }\r\n\r\n    set value(value: any) {\r\n        this.number.valueAsNumber = value;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        return this.number.validity.valid;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.number = super.getChildInput('#numeric-field');\r\n        this.number.addEventListener('change', this.change.bind(this));\r\n        if (this.required) {\r\n            this.number.setAttribute('required', '');\r\n        }\r\n        if (this.max) {\r\n            this.number.setAttribute('max', this.max);\r\n        }\r\n        if (this.min) {\r\n            this.number.setAttribute('min', this.min);\r\n        }\r\n        if (this.step) {\r\n            this.number.setAttribute('step', this.step);\r\n        }\r\n    }\r\n\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\nimport { StringUtil } from '../../framework/Utilities/StringUtil';\r\n\r\n@CustomElement({\r\n    selector: 'radio-group-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n               \r\n\t\t\t</div>`,\r\n    style: `\r\n            :host{\r\n                width:100%;\r\n            }\r\n            .wrapper{\r\n                display:flex;\r\n                justify-content: center;\r\n            }\r\n            .radio-button {\r\n                width: auto;\r\n                margin: auto 3px;\r\n                display: flex;\r\n                flex-grow: 0.1;\r\n                justify-content: space-around;\r\n            }\r\n            input{\r\n                box-sizing: border-box;\r\n                width: auto !important;\r\n                border: none;\r\n                background-color: #f1f4ff;\r\n                margin: 2px;\r\n                resize: none;\r\n            }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class RadioButtonGroupElement extends CustomInputElement {\r\n    radioButton: HTMLInputElement[];\r\n    radioButtonTemplate = `\r\n    <div class='radio-button'>\r\n        <label for=\"{2}\">{1}</label>\r\n        <input type='radio' name='{0}' value=\"{1}\" id=\"{2}\" {3}/>\r\n    </div>`;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        return this.radioButton.filter(c => c.checked).map(c => c.value)[0];\r\n    }\r\n\r\n    set value(value: string) {\r\n        let matchedRadio = this.radioButton.filter(c => c.value === value)[0];\r\n        if (matchedRadio) {\r\n            matchedRadio.setAttribute('checked', '');\r\n        }\r\n    }\r\n\r\n    get valid(): boolean {\r\n        if (this.required) {\r\n            return this.radioButton.filter(c => c.checked).length > 0;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.addRadioButtons();\r\n        this.radioButton = super.getChildInputs(`[name=${this.name}]`);\r\n        this.radioButton.forEach(radio =>\r\n            radio.addEventListener('change', this.change.bind(this)),\r\n        );\r\n    }\r\n\r\n    private addRadioButtons() {\r\n        const wrapper = super.getChildElement('.wrapper');\r\n        this.options.forEach((element, index) => {\r\n            wrapper.insertAdjacentHTML(\r\n                'beforeend',\r\n                StringUtil.StringFormat(\r\n                    this.radioButtonTemplate,\r\n                    this.name,\r\n                    element,\r\n                    `${this.name}-${index}`,\r\n                    `${this.required ? 'required' : ''}`,\r\n                ),\r\n            );\r\n        });\r\n    }\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\n\r\n@CustomElement({\r\n    selector: 'text-area-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<textarea rows=5 id='text-area-field'></textarea>\r\n\t\t\t</div>`,\r\n    style: `\r\n    :host{\r\n            width:100%;\r\n    }\r\n    .wrapper{\r\n            display:flex;\r\n    }\r\n    textarea{\r\n            box-sizing: border-box;\r\n            width: 100% !important;\r\n            border: none;\r\n            background-color: #f1f4ff;\r\n            margin: 2px;\r\n            resize: none;\r\n    }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class TextAreaElement extends CustomInputElement {\r\n    text: HTMLInputElement;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        return `${this.text.value}`;\r\n    }\r\n\r\n    set value(value: string) {\r\n        this.text.value = value;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        return this.text.validity.valid;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.text = super.getChildInput('#text-area-field');\r\n        this.text.addEventListener('change', this.change.bind(this));\r\n        if (this.required) {\r\n            this.text.setAttribute('required', '');\r\n        }\r\n    }\r\n\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","import CustomElement from '../../framework/custom-element.decorator';\r\nimport { CustomInputElement } from '../../framework/CustomInputElement';\r\nimport { CustomElementEventArgs } from '../../framework/CustomEvents';\r\n\r\n@CustomElement({\r\n    selector: 'text-element',\r\n    template: `\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<input type=\"text\" id='text-field'/>\r\n\t\t\t</div>`,\r\n    style: `\r\n    :host{\r\n            width:100%;\r\n    }\r\n    .wrapper{\r\n            display:flex;\r\n    }\r\n    input{\r\n            box-sizing: border-box;\r\n            width: 100% !important;\r\n            border: none;\r\n            background-color: #f1f4ff;\r\n            margin: 2px;\r\n            resize: none;\r\n    }\r\n           `,\r\n    useShadow: true,\r\n})\r\nexport class TextFieldElement extends CustomInputElement {\r\n    text: HTMLInputElement;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get value(): string {\r\n        return `${this.text.value}`;\r\n    }\r\n\r\n    set value(value: string) {\r\n        this.text.value = value;\r\n    }\r\n\r\n    get valid(): boolean {\r\n        return this.text.validity.valid;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n    }\r\n\r\n    initChildInputs() {\r\n        this.text = super.getChildInput('#text-field');\r\n        this.text.addEventListener('change', this.change.bind(this));\r\n        if (this.required) {\r\n            this.text.setAttribute('required', '');\r\n        }\r\n    }\r\n\r\n    // events\r\n    public change($event): void {\r\n        this.touched = true;\r\n        this.onChange.emit(new CustomElementEventArgs(this.value, 'change'));\r\n    }\r\n\r\n    public validate(): void {\r\n        this.valid;\r\n        this.onValidate.emit(\r\n            new CustomElementEventArgs(this.value, 'validate'),\r\n        );\r\n    }\r\n}\r\n","export interface Listener<T> {\r\n    (event: T): any;\r\n}\r\n\r\nexport interface Disposable {\r\n    dispose();\r\n}\r\n\r\nexport class CustomElementEventArgs {\r\n    constructor(public value: any, public eventName: string) {}\r\n}\r\n/** passes through events as they happen. You will not get events from before you start listening */\r\nexport class CustomElementEvent<T> {\r\n    private listeners: Listener<T>[] = [];\r\n    private listenersOncer: Listener<T>[] = [];\r\n\r\n    on = (listener: Listener<T>): Disposable => {\r\n        this.listeners.push(listener);\r\n        return {\r\n            dispose: () => this.off(listener),\r\n        };\r\n    };\r\n\r\n    once = (listener: Listener<T>): void => {\r\n        this.listenersOncer.push(listener);\r\n    };\r\n\r\n    off = (listener: Listener<T>) => {\r\n        var callbackIndex = this.listeners.indexOf(listener);\r\n        if (callbackIndex > -1) this.listeners.splice(callbackIndex, 1);\r\n    };\r\n\r\n    emit = (event: T) => {\r\n        /** Update any general listeners */\r\n        this.listeners.forEach(listener => listener(event));\r\n\r\n        /** Clear the `once` queue */\r\n        if (this.listenersOncer.length > 0) {\r\n            this.listenersOncer.forEach(listener => listener(event));\r\n            this.listenersOncer = [];\r\n        }\r\n    };\r\n\r\n    pipe = (te: CustomElementEvent<T>): Disposable => {\r\n        return this.on(e => te.emit(e));\r\n    };\r\n}\r\n","import { CustomElementEvent, CustomElementEventArgs } from \"./CustomEvents\";\r\nimport DomUtil from \"./Utilities/DomUtil\";\r\nimport ArrayUtil from \"./Utilities/ArrayUtil\";\r\n\r\nclass IDictionary<TValue> {\r\n    [index: string]: TValue;\r\n}\r\nexport abstract class CustomInputElement extends HTMLElement {\r\n    private dependentOnList = new IDictionary<boolean>();\r\n    private visibilityState = true;\r\n\r\n    protected touched = false;\r\n    protected domUtil: DomUtil;\r\n\r\n    protected hasValueDependency: any;\r\n    protected noValueDependency: any;\r\n    protected dependencies: any[];\r\n\r\n    public onChange = new CustomElementEvent<CustomElementEventArgs>();\r\n    public onValidate = new CustomElementEvent<CustomElementEventArgs>();\r\n    public onVisibilityChanged = new CustomElementEvent<CustomElementEventArgs>();\r\n\r\n    public name: string;\r\n    public options: any[];\r\n    public required: boolean;\r\n    public customValue: string;\r\n    public allDependenciesMustBeMet: boolean = false;\r\n    public multi: boolean = false;\r\n    public max: any;\r\n    public min: any;\r\n    public step: any;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    abstract get value(): any;\r\n    abstract set value(value);\r\n    abstract get valid(): boolean;\r\n\r\n    abstract initChildInputs(): void;\r\n    abstract validate(): void;\r\n    abstract change($event): void;\r\n\r\n    connectedCallback(): void {\r\n        this.init();\r\n        this.setAttributes();\r\n    }\r\n\r\n    init(): void {\r\n        this.style.width = \"100%\";\r\n        this.domUtil = new DomUtil(this);\r\n        this.parseData();\r\n        this.initChildInputs();\r\n        this.bindEvents();\r\n        this.setAttributes();\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            this.bindDependencies();\r\n        });\r\n    }\r\n\r\n    private parseData(): void {\r\n        try {\r\n            let data = JSON.parse(this.children[0].innerHTML);\r\n            this.removeChild(this.children[0]);\r\n            this.options = data.options;\r\n            this.hasValueDependency = data.hasValueDependency;\r\n            this.noValueDependency = data.noValueDependency;\r\n            this.dependencies = data.dependencies;\r\n            this.required = data.required;\r\n            this.name = data.name;\r\n            this.allDependenciesMustBeMet = data.allDependenciesMustBeMet;\r\n            this.multi = data.multi;\r\n            this.max = data.max;\r\n            this.min = data.min;\r\n            this.step = data.step;\r\n            this.customValue = data.value;\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    private bindEvents(): void {\r\n        this.onValidate.on(e => {\r\n            if (this.valid) {\r\n                if(this.closest('.custom-validation-target')){\r\n                    this.closest('.custom-validation-target').classList.remove(\"invalid\");\r\n                    this.closest('.custom-validation-target').classList.add(\"valid\");\r\n                }\r\n            } else {\r\n                if(this.closest('.custom-validation-target')){\r\n                    this.closest('.custom-validation-target').classList.add(\"invalid\");\r\n                    this.closest('.custom-validation-target').classList.remove(\"valid\");\r\n                }\r\n                this.domUtil.focus();\r\n            }\r\n        });\r\n        this.onChange.on(e => {\r\n            if (this.touched) {\r\n                this.validate();\r\n            }\r\n        });\r\n    }\r\n\r\n    private setAttributes(): void {\r\n        this.setAttribute(\"custom-input\", \"\");\r\n        this.setAttribute(\"name\", this.name);\r\n    }\r\n\r\n    private bindDependencies(): void {\r\n        if (this.hasValueDependency && this.hasValueDependency.items.length) {\r\n            for (const fieldName of this.hasValueDependency.items) {\r\n                this.bindDependency(fieldName, \"has\");\r\n            }\r\n        }\r\n\r\n        if (this.noValueDependency && this.noValueDependency.items.length) {\r\n            for (const fieldName of this.noValueDependency.items) {\r\n                this.bindDependency(fieldName, \"no\");\r\n            }\r\n        }\r\n\r\n        if (this.dependencies && this.dependencies.length) {\r\n            for (const index in this.dependencies) {\r\n                if (this.dependencies.hasOwnProperty(index)) {\r\n                    const dependency = this.dependencies[index];\r\n                    for (const fieldName of dependency.items) {\r\n                        this.bindDependency(\r\n                            fieldName,\r\n                            \"custom\",\r\n                            dependency.value,\r\n                            dependency.criteria,\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private bindDependency(elementName: string, type: string, value?: string, criteria?: string, ): void {\r\n        let element = document.querySelector(`[name=\"${elementName}\"]`) as CustomInputElement;\r\n\r\n        if (element instanceof CustomInputElement) {\r\n            if (this.dependentOnList.hasOwnProperty(element.name)) {\r\n                return;\r\n            }\r\n            let isVisibleByDefault = type === \"no\";\r\n            element.RegisterDependentOn(this.name, isVisibleByDefault);\r\n            this.onChange.on(e => {\r\n                let IsConditionMatched = false;\r\n                if (type === \"has\") {\r\n                    IsConditionMatched = !!e.value;\r\n                }\r\n                if (type === \"no\") {\r\n                    IsConditionMatched = !e.value;\r\n                }\r\n                if (type === \"custom\") {\r\n                    if (criteria === \"Exact\") {\r\n                        IsConditionMatched = e.value == value;\r\n                    } else if (criteria === \"LessThan\") {\r\n                        IsConditionMatched = e.value < value;\r\n                    } else if (criteria === \"MoreThan\") {\r\n                        IsConditionMatched = e.value > value;\r\n                    }\r\n                }\r\n                element.DependentOnStateChanged(this.name, IsConditionMatched);\r\n            });\r\n            this.onVisibilityChanged.on(e => {\r\n                if (this.visibilityState) {\r\n                    this.onChange.emit(\r\n                        new CustomElementEventArgs(this.value, \"change\"),\r\n                    );\r\n                } else {\r\n                    element.DependentOnStateChanged(this.name, false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private setVisibility() {\r\n        if (this.allDependenciesMustBeMet) {\r\n            this.visibilityState = Object.values(this.dependentOnList).every(state => state);\r\n        } else {\r\n            this.visibilityState = Object.values(this.dependentOnList).some(state => state);\r\n        }\r\n\r\n        if (this.visibilityState) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n        this.onVisibilityChanged.emit(new CustomElementEventArgs(this.value, \"VisibilityChanged\"));\r\n    }\r\n\r\n    private hide() {\r\n        this.setAttribute(\"hidden\", \"\");\r\n        if(this.closest('.custom-validation-target')){\r\n            this.closest('.custom-validation-target').setAttribute(\"hidden\", \"\");\r\n        }\r\n    }\r\n\r\n    private show() {\r\n        this.removeAttribute(\"hidden\");\r\n        if(this.closest('.custom-validation-target')){\r\n            this.closest('.custom-validation-target').removeAttribute(\"hidden\");\r\n        }\r\n    }\r\n\r\n    protected getChildInput(selector: string): HTMLInputElement {\r\n        let element: any = this;\r\n        if (this.shadowRoot) {\r\n            element = this.shadowRoot;\r\n        }\r\n        return element.querySelector(selector) as HTMLInputElement;\r\n    }\r\n\r\n    protected getChildInputs(selector: string): HTMLInputElement[] {\r\n        let element: any = this;\r\n        if (this.shadowRoot) {\r\n            element = this.shadowRoot;\r\n        }\r\n        return ArrayUtil.FromNodeList(\r\n            element.querySelectorAll(selector),\r\n        ) as HTMLInputElement[];\r\n    }\r\n\r\n    protected getChildElement(selector: string): HTMLElement {\r\n        let element: any = this;\r\n        if (this.shadowRoot) {\r\n            element = this.shadowRoot;\r\n        }\r\n        return element.querySelector(selector) as HTMLElement;\r\n    }\r\n\r\n    public RegisterDependentOn(name: string, initialValue: boolean = false) {\r\n        this.dependentOnList[name] = initialValue;\r\n        this.setVisibility();\r\n    }\r\n\r\n    public DependentOnStateChanged(name: string, state: boolean) {\r\n        if (this.dependentOnList.hasOwnProperty(name)) {\r\n            this.dependentOnList[name] = state;\r\n        }\r\n        this.setVisibility();\r\n    }\r\n}\r\n","export default class ArrayUtil {\r\n\tpublic static FromNodeList<T extends Node>(list: NodeListOf<T>): T[] {\r\n\t\treturn Array.prototype.concat.apply([], list as any);\r\n\t}\r\n\r\n}\r\n","﻿import { ViewportUtil } from './ViewportUtil';\r\n\r\nexport default class DomUtil {\r\n    private viewPortUtil: ViewportUtil;\r\n    public element: Element;\r\n    constructor(element: Element) {\r\n        this.element = element;\r\n        this.viewPortUtil = new ViewportUtil(this.element as HTMLElement);\r\n    }\r\n\r\n    public getDataAttr(attr: string, defaultvalue?: string): any {\r\n        if (!this.element) {\r\n            return null;\r\n        }\r\n        const value = this.element.getAttribute(`data-${attr}`);\r\n\r\n        return value !== undefined ? value : defaultvalue;\r\n    }\r\n\r\n    public setDataAttr(attr: string, value: string): any {\r\n        if (!this.element) {\r\n            return null;\r\n        }\r\n        return this.element.setAttribute(`data-${attr}`, value);\r\n    }\r\n\r\n    public getAttr(attr: string, defaultvalue?: string): any {\r\n        if (!this.element) {\r\n            return null;\r\n        }\r\n        const value = this.element.getAttribute(attr);\r\n        return value !== undefined ? value : defaultvalue;\r\n    }\r\n\r\n    public setAttr(attr: string, value: string): void {\r\n        if (!this.element) {\r\n            return null;\r\n        }\r\n        this.element.setAttribute(attr, value);\r\n    }\r\n\r\n    public removeAttr(attr: string): void {\r\n        if (!this.element) {\r\n            return null;\r\n        }\r\n        this.element.removeAttribute(attr);\r\n    }\r\n\r\n    public removeDataAttr(attr: string): void {\r\n        if (!this.element) {\r\n            return null;\r\n        }\r\n        this.element.removeAttribute(`data-${attr}`);\r\n    }\r\n\r\n    public hasAttr(attr: string): boolean {\r\n        if (!this.element) {\r\n            return null;\r\n        }\r\n        return this.element.hasAttribute(attr);\r\n    }\r\n\r\n    public shake(): void {\r\n        this.appendClass('shake');\r\n        setTimeout(() => {\r\n            this.removeClass('shake');\r\n            (this.element as HTMLInputElement).readOnly = false;\r\n        }, 600);\r\n    }\r\n\r\n    public error(): void {\r\n        this.appendClass('error');\r\n        setTimeout(() => {\r\n            this.removeClass('error');\r\n            (this.element as HTMLInputElement).readOnly = false;\r\n        }, 5000);\r\n    }\r\n\r\n    public focus(): void {\r\n        if (!this.viewPortUtil.IsVisible()) {\r\n            this.element.scrollIntoView();\r\n        }\r\n    }\r\n\r\n    public removeClass(classname): void {\r\n        this.element.classList.remove(classname);\r\n    }\r\n\r\n    public appendClass(classname): void {\r\n        this.element.classList.add(classname);\r\n    }\r\n\r\n    public deleteElement(): void {\r\n        if (!this.element) {\r\n            return null;\r\n        }\r\n        this.element.remove();\r\n    }\r\n\r\n    public setChildElementByAttrName(name: string, value: string): void {\r\n        const firstLetter = name.replace(/^\\w/, c => c.toUpperCase());\r\n        const SubElement = this.element.querySelector(\r\n            `[name=\"${firstLetter}\"]`,\r\n        ) as HTMLInputElement;\r\n        if (SubElement) {\r\n            SubElement.value = value;\r\n        }\r\n    }\r\n\r\n    public hasClass(className: string): boolean {\r\n        return this.element.classList.contains(className);\r\n    }\r\n\r\n    public getStyle(ruleName: string) {\r\n        return getComputedStyle(this.element)[ruleName];\r\n    }\r\n}\r\n","export default class MakeRequest {\r\n    method: string;\r\n    url: string;\r\n    headers: any;\r\n\r\n    constructor(url: string, method: string = 'get', headers: any = {}) {\r\n        this.method = method;\r\n        this.url = url;\r\n        this.headers = headers;\r\n    }\r\n\r\n    private setHeaders(httpRequest: XMLHttpRequest) {\r\n        for (const header in this.headers) {\r\n            httpRequest.setRequestHeader(header, this.headers[header]);\r\n        }\r\n    }\r\n\r\n    send(data: any = null) {\r\n        return new Promise((resolve, reject) => {\r\n            const xmlHttpRequest = new XMLHttpRequest();\r\n            xmlHttpRequest.open(this.method, this.url);\r\n            this.setHeaders(xmlHttpRequest);\r\n            xmlHttpRequest.onload = () => {\r\n                if (\r\n                    xmlHttpRequest.status >= 200 &&\r\n                    xmlHttpRequest.status < 300\r\n                ) {\r\n                    resolve(xmlHttpRequest.response);\r\n                } else {\r\n                    reject({\r\n                        status: xmlHttpRequest.status,\r\n                        statusText: xmlHttpRequest.statusText,\r\n                        body: xmlHttpRequest.response,\r\n                    });\r\n                }\r\n            };\r\n            xmlHttpRequest.onerror = () => {\r\n                reject({\r\n                    status: xmlHttpRequest.status,\r\n                    statusText: xmlHttpRequest.statusText,\r\n                    body: xmlHttpRequest.response,\r\n                });\r\n            };\r\n            xmlHttpRequest.send(data);\r\n        });\r\n    }\r\n}\r\n","export class StringUtil {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    public static StringFormat(str: string, ...args: string[]) {\r\n        return str.replace(/{(\\d+)}/g, (match, index) => args[index] || '')\r\n    }\r\n}","export class ViewportUtil {\r\n    private element?: HTMLElement;\r\n    constructor(element: HTMLElement = null) {\r\n        this.element = element;\r\n    }\r\n\r\n    public IsVisible(): boolean {\r\n        const bounds = this.element.getBoundingClientRect();\r\n        return (\r\n            ((bounds.top > 0 && bounds.top < innerHeight) ||\r\n                (bounds.bottom > 0 && bounds.bottom < innerHeight)) &&\r\n            ((bounds.left > 0 && bounds.left < innerWidth) ||\r\n                (bounds.right > 0 && bounds.right < innerWidth))\r\n        );\r\n    }\r\n\r\n    public IsPartiallyVisible() {\r\n        const bounds = this.element.getBoundingClientRect();\r\n        return (\r\n            bounds.top >= 0 ||\r\n            bounds.left >= 0 ||\r\n            bounds.bottom <= innerHeight ||\r\n            bounds.right <= innerWidth\r\n        );\r\n    }\r\n\r\n    public IsOffsetVisible(offset: number = 300) {\r\n        const bounds = this.element.getBoundingClientRect();\r\n        // tslint:disable-next-line: max-line-length\r\n        return (\r\n            bounds.top + offset >= 0 ||\r\n            bounds.left + offset >= 0 ||\r\n            bounds.bottom - offset <= innerHeight ||\r\n            bounds.right - offset <= innerWidth\r\n        );\r\n    }\r\n\r\n    public WindowTop(offset: number = 0) {\r\n        const YOffset =\r\n            window.pageYOffset ||\r\n            document.documentElement.scrollTop ||\r\n            document.body.scrollTop ||\r\n            0;\r\n        return offset <= YOffset;\r\n    }\r\n}\r\n","import IValidation from '../IValidator.interface';\r\n\r\nexport default class BankAccountValidator implements IValidation {\r\n    isSatisfiedBy(input: string, allowEmpty: boolean = true): boolean {\r\n        return true;\r\n    }\r\n}\r\n","import IValidation from '../IValidator.interface';\r\n\r\nexport default class BankAccountRegistrationNumberValidator\r\n    implements IValidation {\r\n    isSatisfiedBy(input: string, allowEmpty: boolean = true): boolean {\r\n        return true;\r\n    }\r\n}\r\n","import IValidation from '../IValidator.interface';\r\n\r\nexport default class BankIdNorwayValidator implements IValidation {\r\n    isSatisfiedBy(input: string, allowEmpty: boolean = true): boolean {\r\n        return this.checkNoPersonnummer(input, allowEmpty);\r\n    }\r\n\r\n    private checkNoPersonnummer(\r\n        input: string,\r\n        allowEmpty: boolean = true,\r\n    ): boolean {\r\n        if (!input) {\r\n            return allowEmpty;\r\n        }\r\n        const personnummer: string = input.replace(' ', '').replace('-', '');\r\n        const regex: RegExp = new RegExp(\r\n            /^(0[1-9]|1[0-9]|2[0-9]|3[0-1])(0[1-9]|1[0-2])(\\d{2})(\\d{5})$/,\r\n        );\r\n        return regex.test(personnummer);\r\n    }\r\n}\r\n","import IValidation from '../IValidator.interface';\r\n\r\nexport default class BankIdSwedenValidator implements IValidation {\r\n    isSatisfiedBy(input: string, allowEmpty: boolean = true): boolean {\r\n        return this.checkSePersonnummer(input, allowEmpty);\r\n    }\r\n\r\n    private checkSePersonnummer(\r\n        input: string,\r\n        allowEmpty: boolean = true,\r\n    ): boolean {\r\n        if (!input) {\r\n            return allowEmpty;\r\n        }\r\n        const personnummer: string = input.replace(' ', '').replace('-', '');\r\n        const regex: RegExp = new RegExp(\r\n            /^(19\\d{2}|20\\d{2})(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])(\\d{4})$/,\r\n        );\r\n        return regex.test(personnummer);\r\n    }\r\n}\r\n","import IValidation from '../IValidator.interface';\r\n\r\nexport default class CprValidator implements IValidation {\r\n    isSatisfiedBy(input: string, allowEmpty: boolean = true): boolean {\r\n        return this.checkCpr(input, allowEmpty);\r\n    }\r\n    private modulus11Multiply(value: number, index: number): number {\r\n        const control: number[] = [4, 3, 2, 7, 6, 5, 4, 3, 2, 1];\r\n        return control[index] * value;\r\n    }\r\n\r\n    private modulus11Exceptions(input: string): boolean {\r\n        const exceptionDates: Date[] = [\r\n            1960,\r\n            1964,\r\n            1965,\r\n            1966,\r\n            1969,\r\n            1970,\r\n            1980,\r\n            1982,\r\n            1984,\r\n            1985,\r\n            1986,\r\n            1987,\r\n            1988,\r\n            1989,\r\n            1990,\r\n        ].map(x => new Date(x, 0, 1)); // months are 0-indexed\r\n\r\n        const cprDate: Date = this.getCprDate(input);\r\n\r\n        return exceptionDates.some(x => x.getDate() === cprDate.getDate());\r\n    }\r\n\r\n    private checkCprDate(input: string): boolean {\r\n        let year: number = +input.substr(4, 2) + 2000;\r\n        year -= year > new Date().getFullYear() ? 100 : 0; // is 20xx or 19xx\r\n        const month: number = +input.substr(2, 2) - 1;\r\n        const day: number = +input.substr(0, 2);\r\n        const date: Date = new Date(year, month, day);\r\n        return (\r\n            date.getFullYear() === year &&\r\n            date.getMonth() === month &&\r\n            date.getDate() === day\r\n        );\r\n    }\r\n\r\n    private getCprDate(input: string): Date {\r\n        let year: number = +input.substr(4, 2) + 2000;\r\n        year -= year > new Date().getFullYear() ? 100 : 0; // is 20xx or 19xx\r\n        const month: number = +input.substr(2, 2) - 1;\r\n        const day: number = +input.substr(0, 2);\r\n        return new Date(year, month, day);\r\n    }\r\n\r\n    private checkCpr(input: string, allowEmpty: boolean = true): boolean {\r\n        if (!input) {\r\n            return allowEmpty;\r\n        }\r\n        const cprnr: string = input.replace(' ', '').replace('-', '');\r\n        if (!cprnr.match(/^\\d{10}$/)) {\r\n            return false;\r\n        }\r\n        if (!this.checkCprDate(cprnr)) {\r\n            return false;\r\n        }\r\n        if (this.modulus11Exceptions(cprnr)) {\r\n            return true;\r\n        }\r\n\r\n        let output: number = 0;\r\n        for (let i: number = 0; i < 10; i++) {\r\n            output += this.modulus11Multiply(\r\n                parseInt(cprnr.substr(i, 1), 10),\r\n                i,\r\n            );\r\n        }\r\n\r\n        return output % 11 === 0; // hvis output går op i 11, er det et gyldigt cpr.\r\n    }\r\n}\r\n","import IValidation from '../IValidator.interface';\r\n\r\nexport default class CvrValidator implements IValidation {\r\n    isSatisfiedBy(input: string, allowEmpty: boolean = true): boolean {\r\n        return this.checkCvr(input, allowEmpty);\r\n    }\r\n\r\n    private checkCvr(input: string, allowEmpty: boolean = true): boolean {\r\n        if (!allowEmpty && !input) return false;\r\n        const cvrnr: string = input.replace(' ', '').replace('-', '');\r\n        if (!cvrnr) {\r\n            return allowEmpty;\r\n        }\r\n        if (!/^\\d{8}$/.test(cvrnr)) {\r\n            return false;\r\n        }\r\n\r\n        // cvr numre kan åbenbart også modulus11 testes.\r\n        let total: number = 0;\r\n\r\n        [2, 7, 6, 5, 4, 3, 2, 1].forEach((elm, index) => {\r\n            total += parseInt(cvrnr[index], 10) * elm;\r\n        });\r\n\r\n        return total % 11 === 0;\r\n    }\r\n}\r\n","class elementConfig {\r\n    selector: string;\r\n    template: string;\r\n    style: string;\r\n    useShadow: boolean;\r\n    templatePath?: string;\r\n}\r\n\r\nconst validateSelector = (selector: string) => {\r\n    if (selector.indexOf('-') <= 0) {\r\n        throw new Error('You need at least 1 dash in the custom element name!');\r\n    }\r\n};\r\n\r\nconst CustomElement = (config: elementConfig) => {\r\n    return (cls: any) => {\r\n        validateSelector(config.selector);\r\n        let templateElement = document.createElement('template');\r\n        if (!config.template) {\r\n            throw new Error('You need to pass a template for the element');\r\n        }\r\n        templateElement.innerHTML = `<style>${config.style}</style> ${\r\n            config.template\r\n        }`;\r\n        let connectedCallback =\r\n            cls.prototype.connectedCallback || function() {};\r\n        cls.prototype.connectedCallback = function() {\r\n            let clone = document.importNode(templateElement.content, true);\r\n            if (config.useShadow) {\r\n                this.attachShadow({ mode: 'open' }).appendChild(clone);\r\n            } else {\r\n                this.appendChild(clone);\r\n            }\r\n            connectedCallback.call(this);\r\n        };\r\n        window.customElements.define(config.selector, cls);\r\n    };\r\n};\r\n\r\nexport default CustomElement;\r\n","import 'js-polyfills';\r\nimport '@webcomponents/webcomponentsjs/webcomponents-bundle';\r\nimport '@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js';\r\nimport '@webcomponents/webcomponentsjs/webcomponents-loader.js';\r\n\r\n// form\r\nimport { CustomForm } from './custom-form';\r\nimport { CustomInputElement } from './framework/CustomInputElement';\r\n\r\n// elements\r\nimport * as elements from './elements/Elements';\r\n\r\nexport { CustomForm, elements, CustomInputElement };\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}